
WDT_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004cbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  00004cbe  00004d52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080018e  0080018e  00004e80  2**0
                  ALLOC
  3 .stab         00004464  00000000  00000000  00004e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000174b  00000000  00000000  000092e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000aa2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000abcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000adc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d1cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000e552  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f728  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000f8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000fbde  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001054c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__vector_1>
       8:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__vector_2>
       c:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <__vector_10>
      2c:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	fc e4       	ldi	r31, 0x4C	; 76
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <main>
      8a:	0c 94 5d 26 	jmp	0x4cba	; 0x4cba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 26 26 	jmp	0x4c4c	; 0x4c4c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e6       	ldi	r26, 0x62	; 98
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 32 26 	jmp	0x4c64	; 0x4c64 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4e 26 	jmp	0x4c9c	; 0x4c9c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 32 26 	jmp	0x4c64	; 0x4c64 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4e 26 	jmp	0x4c9c	; 0x4c9c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 26 26 	jmp	0x4c4c	; 0x4c4c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e6       	ldi	r24, 0x62	; 98
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2e 26 	jmp	0x4c5c	; 0x4c5c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e6       	ldi	r22, 0x62	; 98
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4a 26 	jmp	0x4c94	; 0x4c94 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 32 26 	jmp	0x4c64	; 0x4c64 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4e 26 	jmp	0x4c9c	; 0x4c9c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 32 26 	jmp	0x4c64	; 0x4c64 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4e 26 	jmp	0x4c9c	; 0x4c9c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 32 26 	jmp	0x4c64	; 0x4c64 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4e 26 	jmp	0x4c9c	; 0x4c9c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 36 26 	jmp	0x4c6c	; 0x4c6c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 52 26 	jmp	0x4ca4	; 0x4ca4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 2e 26 	jmp	0x4c5c	; 0x4c5c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 4a 26 	jmp	0x4c94	; 0x4c94 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e6 59       	subi	r30, 0x96	; 150
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <M_WDT_void_enable>:
#include"WDT_priv.h"
#include"WDT_config.h"
#include"WDT_int.h"

void M_WDT_void_enable(void)// open watcchdog
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR_REG,WDE_BIT);
     e36:	a1 e4       	ldi	r26, 0x41	; 65
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e1 e4       	ldi	r30, 0x41	; 65
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	88 60       	ori	r24, 0x08	; 8
     e42:	8c 93       	st	X, r24
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <M_WDT_void_disable>:
void M_WDT_void_disable(void)//turnoff WDT
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	/* Write logical one to WDTOE and WDE */
	WDTCR_REG |= (1<<WDTOE_BIT) | (1<<WDE_BIT);
     e52:	a1 e4       	ldi	r26, 0x41	; 65
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e1 e4       	ldi	r30, 0x41	; 65
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	88 61       	ori	r24, 0x18	; 24
     e5e:	8c 93       	st	X, r24
	/* Turn off WDT */
	WDTCR_REG = 0x00;
     e60:	e1 e4       	ldi	r30, 0x41	; 65
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	10 82       	st	Z, r1
}
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <M_WDT_void_sleep>:
void M_WDT_void_sleep(u8 copy_timeout)//time out
    {
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	0f 92       	push	r0
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	89 83       	std	Y+1, r24	; 0x01

	if((copy_timeout <= WDT_TIMEOUT_2_0_S ) &&(copy_timeout >= WDT_TIMEOUT_16_3_MS))
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	88 30       	cpi	r24, 0x08	; 8
     e7c:	40 f4       	brcc	.+16     	; 0xe8e <M_WDT_void_sleep+0x22>
	    {
       //step 1 apply mask
		//WDTCR_REG & = WDT_PRESCALER_MASK ;

	   // step 2 insert value
	   WDTCR_REG|=copy_timeout;
     e7e:	a1 e4       	ldi	r26, 0x41	; 65
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e1 e4       	ldi	r30, 0x41	; 65
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	90 81       	ld	r25, Z
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	89 2b       	or	r24, r25
     e8c:	8c 93       	st	X, r24
	     }

}
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <M_WDT_void_Refresh>:
void M_WDT_void_Refresh(void)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
  asm("WDR");
     e9e:	a8 95       	wdr
}
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <M_TIMER1_void_Init>:
#include "TIMER1_int.h"

static void (*ICU_CallBackPtr)(void)=NULL;

void M_TIMER1_void_Init()//mode normal  ,prescaler
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
	//set mood   as normal

	CLR_BIT(TCCR1A_REG,WGM10_BIT);
     eae:	af e4       	ldi	r26, 0x4F	; 79
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ef e4       	ldi	r30, 0x4F	; 79
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	8e 7f       	andi	r24, 0xFE	; 254
     eba:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG,WGM11_BIT);
     ebc:	af e4       	ldi	r26, 0x4F	; 79
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	ef e4       	ldi	r30, 0x4F	; 79
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8d 7f       	andi	r24, 0xFD	; 253
     ec8:	8c 93       	st	X, r24

	CLR_BIT(TCCR1B_REG,WGM12_BIT );
     eca:	ae e4       	ldi	r26, 0x4E	; 78
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	ee e4       	ldi	r30, 0x4E	; 78
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	87 7f       	andi	r24, 0xF7	; 247
     ed6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,WGM13_BIT);
     ed8:	ae e4       	ldi	r26, 0x4E	; 78
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	ee e4       	ldi	r30, 0x4E	; 78
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	8f 7e       	andi	r24, 0xEF	; 239
     ee4:	8c 93       	st	X, r24

	//step 2: set prescaler as 256
	CLR_BIT(TCCR1B_REG ,CS10_BIT);
     ee6:	ae e4       	ldi	r26, 0x4E	; 78
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	ee e4       	ldi	r30, 0x4E	; 78
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8e 7f       	andi	r24, 0xFE	; 254
     ef2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG ,CS11_BIT);
     ef4:	ae e4       	ldi	r26, 0x4E	; 78
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	ee e4       	ldi	r30, 0x4E	; 78
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	8d 7f       	andi	r24, 0xFD	; 253
     f00:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG ,CS12_BIT);
     f02:	ae e4       	ldi	r26, 0x4E	; 78
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	ee e4       	ldi	r30, 0x4E	; 78
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	84 60       	ori	r24, 0x04	; 4
     f0e:	8c 93       	st	X, r24

}
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <M_TIMER1_ICU_void_Init>:
void M_TIMER1_ICU_void_Init()//setup initial trigger for ICU
{
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
	//set initial trigger as  rising
 SET_BIT(TCCR1B_REG,ICES1_BIT);
     f1e:	ae e4       	ldi	r26, 0x4E	; 78
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ee e4       	ldi	r30, 0x4E	; 78
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 64       	ori	r24, 0x40	; 64
     f2a:	8c 93       	st	X, r24
}
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <M_TIMER1_ICU_void_INTEnable>:
void M_TIMER1_ICU_void_INTEnable(void)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
//set interrupt
	SET_BIT(TIMSK_REG,TICIE1_BIT);
     f3a:	a9 e5       	ldi	r26, 0x59	; 89
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e9 e5       	ldi	r30, 0x59	; 89
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	80 62       	ori	r24, 0x20	; 32
     f46:	8c 93       	st	X, r24
}
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <M_TIMER1_ICU_void_INTDisable>:
void M_TIMER1_ICU_void_INTDisable(void)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(TIMSK_REG,TICIE1_BIT);
     f56:	a9 e5       	ldi	r26, 0x59	; 89
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e9 e5       	ldi	r30, 0x59	; 89
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	8f 7d       	andi	r24, 0xDF	; 223
     f62:	8c 93       	st	X, r24
}
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <M_TIMER1_ICU_void_setTrigg>:
void M_TIMER1_ICU_void_setTrigg(u8 copy_u8Trigg)
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <M_TIMER1_ICU_void_setTrigg+0x6>
     f70:	0f 92       	push	r0
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	89 83       	std	Y+1, r24	; 0x01
   switch (copy_u8Trigg)
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	3b 83       	std	Y+3, r19	; 0x03
     f80:	2a 83       	std	Y+2, r18	; 0x02
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	9b 81       	ldd	r25, Y+3	; 0x03
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	31 f0       	breq	.+12     	; 0xf96 <M_TIMER1_ICU_void_setTrigg+0x2c>
     f8a:	2a 81       	ldd	r18, Y+2	; 0x02
     f8c:	3b 81       	ldd	r19, Y+3	; 0x03
     f8e:	21 30       	cpi	r18, 0x01	; 1
     f90:	31 05       	cpc	r19, r1
     f92:	49 f0       	breq	.+18     	; 0xfa6 <M_TIMER1_ICU_void_setTrigg+0x3c>
     f94:	0f c0       	rjmp	.+30     	; 0xfb4 <M_TIMER1_ICU_void_setTrigg+0x4a>
   {
   case TIMER1_ICU_FALL_TRIGG:
   CLR_BIT(TCCR1B_REG,ICES1_BIT);
     f96:	ae e4       	ldi	r26, 0x4E	; 78
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	ee e4       	ldi	r30, 0x4E	; 78
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8f 7b       	andi	r24, 0xBF	; 191
     fa2:	8c 93       	st	X, r24
     fa4:	07 c0       	rjmp	.+14     	; 0xfb4 <M_TIMER1_ICU_void_setTrigg+0x4a>
	    break;
   case TIMER1_ICU_RISING_TRIGG:
	   SET_BIT(TCCR1B_REG,ICES1_BIT);
     fa6:	ae e4       	ldi	r26, 0x4E	; 78
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	ee e4       	ldi	r30, 0x4E	; 78
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 64       	ori	r24, 0x40	; 64
     fb2:	8c 93       	st	X, r24
   	   break;
   }
}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <M_TIMER1_ICU_u16_takeReading>:
u16 M_TIMER1_ICU_u16_takeReading(void)
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
	return ICR1_REG;
     fc8:	e6 e4       	ldi	r30, 0x46	; 70
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	91 81       	ldd	r25, Z+1	; 0x01
}
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <M_TIMER1_ICU_void_setCallback>:
void M_TIMER1_ICU_void_setCallback(void(*ptrfn)(void))
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	00 d0       	rcall	.+0      	; 0xfdc <M_TIMER1_ICU_void_setCallback+0x6>
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
	if(ptrfn != NULL)
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	31 f0       	breq	.+12     	; 0xff8 <M_TIMER1_ICU_void_setCallback+0x22>
	{
		ICU_CallBackPtr=ptrfn;
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	90 93 8f 01 	sts	0x018F, r25
     ff4:	80 93 8e 01 	sts	0x018E, r24
	}

}
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1002:	1f 92       	push	r1
    1004:	0f 92       	push	r0
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	0f 92       	push	r0
    100a:	11 24       	eor	r1, r1
    100c:	2f 93       	push	r18
    100e:	3f 93       	push	r19
    1010:	4f 93       	push	r20
    1012:	5f 93       	push	r21
    1014:	6f 93       	push	r22
    1016:	7f 93       	push	r23
    1018:	8f 93       	push	r24
    101a:	9f 93       	push	r25
    101c:	af 93       	push	r26
    101e:	bf 93       	push	r27
    1020:	ef 93       	push	r30
    1022:	ff 93       	push	r31
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	if(ICU_CallBackPtr!=NULL)
    102c:	80 91 8e 01 	lds	r24, 0x018E
    1030:	90 91 8f 01 	lds	r25, 0x018F
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	29 f0       	breq	.+10     	; 0x1042 <__vector_7+0x40>
	{
		ICU_CallBackPtr();
    1038:	e0 91 8e 01 	lds	r30, 0x018E
    103c:	f0 91 8f 01 	lds	r31, 0x018F
    1040:	09 95       	icall
	}
}
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	ff 91       	pop	r31
    1048:	ef 91       	pop	r30
    104a:	bf 91       	pop	r27
    104c:	af 91       	pop	r26
    104e:	9f 91       	pop	r25
    1050:	8f 91       	pop	r24
    1052:	7f 91       	pop	r23
    1054:	6f 91       	pop	r22
    1056:	5f 91       	pop	r21
    1058:	4f 91       	pop	r20
    105a:	3f 91       	pop	r19
    105c:	2f 91       	pop	r18
    105e:	0f 90       	pop	r0
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	0f 90       	pop	r0
    1064:	1f 90       	pop	r1
    1066:	18 95       	reti

00001068 <M_TIMER0_void_Init>:

static u32 NumberOfOverflows=0;
static u32  NumberOfRemainingTicks=0;
static void(*Arr_Call_Back[2])(void)={NULL,NULL};
void M_TIMER0_void_Init(void)//set timer mood,set OC0 pin mood
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
       #else
          #error ("wrong insert node")
       #endif
 #elif  (TIMER0_MODE==TIMER0_FAST_PWM_MODE)

	SET_BIT(TCCR0_REG,WGM00_BIT);
    1070:	a3 e5       	ldi	r26, 0x53	; 83
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e3 e5       	ldi	r30, 0x53	; 83
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	80 64       	ori	r24, 0x40	; 64
    107c:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,WGM01_BIT);
    107e:	a3 e5       	ldi	r26, 0x53	; 83
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e3 e5       	ldi	r30, 0x53	; 83
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	88 60       	ori	r24, 0x08	; 8
    108a:	8c 93       	st	X, r24
    #if(TIMER0_OC0_MODE==TIMER0_PWM_NON_INVERTED||TIMER0_OC0_MODE== TIMER0_PWM_INVERTED)
	//step1 apply mask
	TCCR0_REG&= TIMER0_OC0_MASK;
    108c:	a3 e5       	ldi	r26, 0x53	; 83
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e3 e5       	ldi	r30, 0x53	; 83
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8f 7c       	andi	r24, 0xCF	; 207
    1098:	8c 93       	st	X, r24
	 TCCR0_REG|=TIMER0_OC0_MODE;
    109a:	a3 e5       	ldi	r26, 0x53	; 83
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e3 e5       	ldi	r30, 0x53	; 83
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	80 62       	ori	r24, 0x20	; 32
    10a6:	8c 93       	st	X, r24


#else
#error();
#endif
}
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <M_TIMER0_void_start>:
void M_TIMER0_void_start(void)//set clock prescaler
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
#if(TIMER0_PRESCALER>=TIMER0_PRESCALER_NO_CLK&&TIMER0_PRESCALER<=TIMER0_PRESCALER_EXTCLK_RAIS_EDGE)
	TCCR0_REG &=TIMER0_PRESCALER_MASK;
    10b6:	a3 e5       	ldi	r26, 0x53	; 83
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e3 e5       	ldi	r30, 0x53	; 83
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	88 7f       	andi	r24, 0xF8	; 248
    10c2:	8c 93       	st	X, r24
	TCCR0_REG |=TIMER0_PRESCALER;
    10c4:	a3 e5       	ldi	r26, 0x53	; 83
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e3 e5       	ldi	r30, 0x53	; 83
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	84 60       	ori	r24, 0x04	; 4
    10d0:	8c 93       	st	X, r24
#else
#error("invalid prescaler")
#endif
}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <M_TIMER0_void_stop>:
void M_TIMER0_void_stop(void)// NO CLOCK
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG &=TIMER0_PRESCALER_MASK;
    10e0:	a3 e5       	ldi	r26, 0x53	; 83
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e3 e5       	ldi	r30, 0x53	; 83
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	88 7f       	andi	r24, 0xF8	; 248
    10ec:	8c 93       	st	X, r24
}
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <M_TIMER0_void_setTime>:
void M_TIMER0_void_setTime(u32 copy_u32timeMS)//time in milli seconds;
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	a5 97       	sbiw	r28, 0x25	; 37
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	6d 8f       	std	Y+29, r22	; 0x1d
    110a:	7e 8f       	std	Y+30, r23	; 0x1e
    110c:	8f 8f       	std	Y+31, r24	; 0x1f
    110e:	98 a3       	std	Y+32, r25	; 0x20
	u32 Loc_prescalerArr[]={1,8,64,256,1024};
    1110:	ce 01       	movw	r24, r28
    1112:	09 96       	adiw	r24, 0x09	; 9
    1114:	9a a3       	std	Y+34, r25	; 0x22
    1116:	89 a3       	std	Y+33, r24	; 0x21
    1118:	ea e6       	ldi	r30, 0x6A	; 106
    111a:	f1 e0       	ldi	r31, 0x01	; 1
    111c:	fc a3       	std	Y+36, r31	; 0x24
    111e:	eb a3       	std	Y+35, r30	; 0x23
    1120:	f4 e1       	ldi	r31, 0x14	; 20
    1122:	fd a3       	std	Y+37, r31	; 0x25
    1124:	eb a1       	ldd	r30, Y+35	; 0x23
    1126:	fc a1       	ldd	r31, Y+36	; 0x24
    1128:	00 80       	ld	r0, Z
    112a:	8b a1       	ldd	r24, Y+35	; 0x23
    112c:	9c a1       	ldd	r25, Y+36	; 0x24
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	9c a3       	std	Y+36, r25	; 0x24
    1132:	8b a3       	std	Y+35, r24	; 0x23
    1134:	e9 a1       	ldd	r30, Y+33	; 0x21
    1136:	fa a1       	ldd	r31, Y+34	; 0x22
    1138:	00 82       	st	Z, r0
    113a:	89 a1       	ldd	r24, Y+33	; 0x21
    113c:	9a a1       	ldd	r25, Y+34	; 0x22
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	9a a3       	std	Y+34, r25	; 0x22
    1142:	89 a3       	std	Y+33, r24	; 0x21
    1144:	9d a1       	ldd	r25, Y+37	; 0x25
    1146:	91 50       	subi	r25, 0x01	; 1
    1148:	9d a3       	std	Y+37, r25	; 0x25
    114a:	ed a1       	ldd	r30, Y+37	; 0x25
    114c:	ee 23       	and	r30, r30
    114e:	51 f7       	brne	.-44     	; 0x1124 <M_TIMER0_void_setTime+0x30>
	f32 Locticktime=(f32)Loc_prescalerArr[TIMER0_PRESCALER-1]/FCPU;
    1150:	8d 89       	ldd	r24, Y+21	; 0x15
    1152:	9e 89       	ldd	r25, Y+22	; 0x16
    1154:	af 89       	ldd	r26, Y+23	; 0x17
    1156:	b8 8d       	ldd	r27, Y+24	; 0x18
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	bc 01       	movw	r22, r24
    1166:	cd 01       	movw	r24, r26
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e8       	ldi	r20, 0x80	; 128
    116e:	51 e4       	ldi	r21, 0x41	; 65
    1170:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	8d 83       	std	Y+5, r24	; 0x05
    117a:	9e 83       	std	Y+6, r25	; 0x06
    117c:	af 83       	std	Y+7, r26	; 0x07
    117e:	b8 87       	std	Y+8, r27	; 0x08
	u32  NoOfDesiredTicks=(copy_u32timeMS*1000)/Locticktime;
    1180:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1182:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1184:	af 8d       	ldd	r26, Y+31	; 0x1f
    1186:	b8 a1       	ldd	r27, Y+32	; 0x20
    1188:	28 ee       	ldi	r18, 0xE8	; 232
    118a:	33 e0       	ldi	r19, 0x03	; 3
    118c:	40 e0       	ldi	r20, 0x00	; 0
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	bc 01       	movw	r22, r24
    1192:	cd 01       	movw	r24, r26
    1194:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsi3>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	bc 01       	movw	r22, r24
    119e:	cd 01       	movw	r24, r26
    11a0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	bc 01       	movw	r22, r24
    11aa:	cd 01       	movw	r24, r26
    11ac:	2d 81       	ldd	r18, Y+5	; 0x05
    11ae:	3e 81       	ldd	r19, Y+6	; 0x06
    11b0:	4f 81       	ldd	r20, Y+7	; 0x07
    11b2:	58 85       	ldd	r21, Y+8	; 0x08
    11b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	bc 01       	movw	r22, r24
    11be:	cd 01       	movw	r24, r26
    11c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	ab 83       	std	Y+3, r26	; 0x03
    11ce:	bc 83       	std	Y+4, r27	; 0x04
		NumberOfOverflows++;
	}
#elif  (TIMER0_MODE == TIMER0_CTC_MODE)

#endif
}
    11d0:	a5 96       	adiw	r28, 0x25	; 37
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <M_TIMER0_void_EnableInt>:
void M_TIMER0_void_EnableInt(u32 copy_u8IntID)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	28 97       	sbiw	r28, 0x08	; 8
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	69 83       	std	Y+1, r22	; 0x01
    11f8:	7a 83       	std	Y+2, r23	; 0x02
    11fa:	8b 83       	std	Y+3, r24	; 0x03
    11fc:	9c 83       	std	Y+4, r25	; 0x04
	switch(copy_u8IntID)
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	9a 81       	ldd	r25, Y+2	; 0x02
    1202:	ab 81       	ldd	r26, Y+3	; 0x03
    1204:	bc 81       	ldd	r27, Y+4	; 0x04
    1206:	8d 83       	std	Y+5, r24	; 0x05
    1208:	9e 83       	std	Y+6, r25	; 0x06
    120a:	af 83       	std	Y+7, r26	; 0x07
    120c:	b8 87       	std	Y+8, r27	; 0x08
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
    1210:	9e 81       	ldd	r25, Y+6	; 0x06
    1212:	af 81       	ldd	r26, Y+7	; 0x07
    1214:	b8 85       	ldd	r27, Y+8	; 0x08
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	a1 05       	cpc	r26, r1
    121a:	b1 05       	cpc	r27, r1
    121c:	51 f0       	breq	.+20     	; 0x1232 <M_TIMER0_void_EnableInt+0x50>
    121e:	8d 81       	ldd	r24, Y+5	; 0x05
    1220:	9e 81       	ldd	r25, Y+6	; 0x06
    1222:	af 81       	ldd	r26, Y+7	; 0x07
    1224:	b8 85       	ldd	r27, Y+8	; 0x08
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	91 05       	cpc	r25, r1
    122a:	a1 05       	cpc	r26, r1
    122c:	b1 05       	cpc	r27, r1
    122e:	49 f0       	breq	.+18     	; 0x1242 <M_TIMER0_void_EnableInt+0x60>
    1230:	0f c0       	rjmp	.+30     	; 0x1250 <M_TIMER0_void_EnableInt+0x6e>
	{
	case TIMER0_OVF_INT_ID:
		SET_BIT(TIMSK_REG,TOIE0_BIT);
    1232:	a9 e5       	ldi	r26, 0x59	; 89
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e9 e5       	ldi	r30, 0x59	; 89
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	81 60       	ori	r24, 0x01	; 1
    123e:	8c 93       	st	X, r24
    1240:	07 c0       	rjmp	.+14     	; 0x1250 <M_TIMER0_void_EnableInt+0x6e>
		break;
	case TIMER0_COMP_INT_ID:
	SET_BIT(TIMSK_REG,OCIE0_BIT);
    1242:	a9 e5       	ldi	r26, 0x59	; 89
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e9 e5       	ldi	r30, 0x59	; 89
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	82 60       	ori	r24, 0x02	; 2
    124e:	8c 93       	st	X, r24
			break;
	}
	//METHOD 2
	if(copy_u8IntID >= TIMER0_OVF_INT_ID && copy_u8IntID <= TIMER0_COMP_INT_ID )
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	9a 81       	ldd	r25, Y+2	; 0x02
    1254:	ab 81       	ldd	r26, Y+3	; 0x03
    1256:	bc 81       	ldd	r27, Y+4	; 0x04
    1258:	82 30       	cpi	r24, 0x02	; 2
    125a:	91 05       	cpc	r25, r1
    125c:	a1 05       	cpc	r26, r1
    125e:	b1 05       	cpc	r27, r1
    1260:	90 f4       	brcc	.+36     	; 0x1286 <M_TIMER0_void_EnableInt+0xa4>
		{
			SET_BIT(TIMSK_REG,copy_u8IntID);
    1262:	a9 e5       	ldi	r26, 0x59	; 89
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e9 e5       	ldi	r30, 0x59	; 89
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	29 81       	ldd	r18, Y+1	; 0x01
    1270:	3a 81       	ldd	r19, Y+2	; 0x02
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <M_TIMER0_void_EnableInt+0x9c>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <M_TIMER0_void_EnableInt+0x98>
    1282:	84 2b       	or	r24, r20
    1284:	8c 93       	st	X, r24
		}

}
    1286:	28 96       	adiw	r28, 0x08	; 8
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <M_TIMER0_void_DisableInt>:
void M_TIMER0_void_DisableInt(u32 copy_u8IntID)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	00 d0       	rcall	.+0      	; 0x129e <M_TIMER0_void_DisableInt+0x6>
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <M_TIMER0_void_DisableInt+0x8>
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	69 83       	std	Y+1, r22	; 0x01
    12a6:	7a 83       	std	Y+2, r23	; 0x02
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    12aa:	9c 83       	std	Y+4, r25	; 0x04
		CLR_BIT(TIMSK_REG;OCIE0_BIT)
				break;
		}*/
	//METHOD 2

	CLR_BIT(TIMSK_REG,copy_u8IntID);
    12ac:	a9 e5       	ldi	r26, 0x59	; 89
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e9 e5       	ldi	r30, 0x59	; 89
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	29 81       	ldd	r18, Y+1	; 0x01
    12ba:	3a 81       	ldd	r19, Y+2	; 0x02
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <M_TIMER0_void_DisableInt+0x30>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <M_TIMER0_void_DisableInt+0x2c>
    12cc:	80 95       	com	r24
    12ce:	84 23       	and	r24, r20
    12d0:	8c 93       	st	X, r24
  }
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <M_TIMER0_void_setCallBack>:
void M_TIMER0_void_setCallBack(void(*ptrfn)(void),u8 copy_u8IntID)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <M_TIMER0_void_setCallBack+0x6>
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <M_TIMER0_void_setCallBack+0x8>
    12e8:	0f 92       	push	r0
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	9a 83       	std	Y+2, r25	; 0x02
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	6b 83       	std	Y+3, r22	; 0x03
	switch (copy_u8IntID)
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	3d 83       	std	Y+5, r19	; 0x05
    12fc:	2c 83       	std	Y+4, r18	; 0x04
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	9d 81       	ldd	r25, Y+5	; 0x05
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	31 f0       	breq	.+12     	; 0x1312 <M_TIMER0_void_setCallBack+0x32>
    1306:	2c 81       	ldd	r18, Y+4	; 0x04
    1308:	3d 81       	ldd	r19, Y+5	; 0x05
    130a:	21 30       	cpi	r18, 0x01	; 1
    130c:	31 05       	cpc	r19, r1
    130e:	41 f0       	breq	.+16     	; 0x1320 <M_TIMER0_void_setCallBack+0x40>
    1310:	0d c0       	rjmp	.+26     	; 0x132c <M_TIMER0_void_setCallBack+0x4c>
	{
	case TIMER0_OVF_INT_ID:
		Arr_Call_Back[0]=ptrfn;
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	9a 81       	ldd	r25, Y+2	; 0x02
    1316:	90 93 99 01 	sts	0x0199, r25
    131a:	80 93 98 01 	sts	0x0198, r24
    131e:	06 c0       	rjmp	.+12     	; 0x132c <M_TIMER0_void_setCallBack+0x4c>
		break;
	case TIMER0_COMP_INT_ID:
		Arr_Call_Back[1]=ptrfn;
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	9a 81       	ldd	r25, Y+2	; 0x02
    1324:	90 93 9b 01 	sts	0x019B, r25
    1328:	80 93 9a 01 	sts	0x019A, r24
		break;
	}
	//method 2
	Arr_Call_Back[copy_u8IntID]=ptrfn;
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	fc 01       	movw	r30, r24
    1338:	e8 56       	subi	r30, 0x68	; 104
    133a:	fe 4f       	sbci	r31, 0xFE	; 254
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	9a 81       	ldd	r25, Y+2	; 0x02
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	80 83       	st	Z, r24
}
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <M_TIMER0_void_setFastPWM>:
void M_TIMER0_void_setFastPWM(u8 copy_u8Duty)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <M_TIMER0_void_setFastPWM+0x6>
    135a:	00 d0       	rcall	.+0      	; 0x135c <M_TIMER0_void_setFastPWM+0x8>
    135c:	0f 92       	push	r0
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	89 83       	std	Y+1, r24	; 0x01
#if(TIMER0_MODE ==TIMER0_FAST_PWM_MODE)
     #if(TIMER0_OC0_MODE ==TIMER0_PWM_NON_INVERTED)
	 OCR0_REG=abs(((copy_u8Duty*256)/100)-1);
    1364:	8c e5       	ldi	r24, 0x5C	; 92
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	9d 83       	std	Y+5, r25	; 0x05
    136a:	8c 83       	std	Y+4, r24	; 0x04
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	88 2f       	mov	r24, r24
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	98 2f       	mov	r25, r24
    1374:	88 27       	eor	r24, r24
    1376:	24 e6       	ldi	r18, 0x64	; 100
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	b9 01       	movw	r22, r18
    137c:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <__divmodhi4>
    1380:	cb 01       	movw	r24, r22
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	9b 83       	std	Y+3, r25	; 0x03
    1386:	8a 83       	std	Y+2, r24	; 0x02
    1388:	ea 81       	ldd	r30, Y+2	; 0x02
    138a:	fb 81       	ldd	r31, Y+3	; 0x03
    138c:	ff 23       	and	r31, r31
    138e:	3c f4       	brge	.+14     	; 0x139e <M_TIMER0_void_setFastPWM+0x4a>
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	9b 81       	ldd	r25, Y+3	; 0x03
    1394:	90 95       	com	r25
    1396:	81 95       	neg	r24
    1398:	9f 4f       	sbci	r25, 0xFF	; 255
    139a:	9b 83       	std	Y+3, r25	; 0x03
    139c:	8a 83       	std	Y+2, r24	; 0x02
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	ec 81       	ldd	r30, Y+4	; 0x04
    13a2:	fd 81       	ldd	r31, Y+5	; 0x05
    13a4:	80 83       	st	Z, r24
	 OCR0_REG=255-(((copy_u8Duty*256)/100)-1);
      #else
        #error("wrong insert mode")
      #endif
#endif
}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <M_TIMER0_void_setPhasecorrectPWM>:
void M_TIMER0_void_setPhasecorrectPWM(u8 copy_u8Duty)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	0f 92       	push	r0
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	89 83       	std	Y+1, r24	; 0x01
	 OCR0_REG=(255-(copy_u8Duty*255)/100);
      #else
        #error("wrong insert mode")
      #endif
#endif
}
    13c2:	0f 90       	pop	r0
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <__vector_11>:
ISR(TIMER0_OVF_vect)
{
    13ca:	1f 92       	push	r1
    13cc:	0f 92       	push	r0
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	0f 92       	push	r0
    13d2:	11 24       	eor	r1, r1
    13d4:	2f 93       	push	r18
    13d6:	3f 93       	push	r19
    13d8:	4f 93       	push	r20
    13da:	5f 93       	push	r21
    13dc:	6f 93       	push	r22
    13de:	7f 93       	push	r23
    13e0:	8f 93       	push	r24
    13e2:	9f 93       	push	r25
    13e4:	af 93       	push	r26
    13e6:	bf 93       	push	r27
    13e8:	ef 93       	push	r30
    13ea:	ff 93       	push	r31
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
	static u32 Loc_Overflow_Count=0;
		Loc_Overflow_Count++;
    13f4:	80 91 9c 01 	lds	r24, 0x019C
    13f8:	90 91 9d 01 	lds	r25, 0x019D
    13fc:	a0 91 9e 01 	lds	r26, 0x019E
    1400:	b0 91 9f 01 	lds	r27, 0x019F
    1404:	01 96       	adiw	r24, 0x01	; 1
    1406:	a1 1d       	adc	r26, r1
    1408:	b1 1d       	adc	r27, r1
    140a:	80 93 9c 01 	sts	0x019C, r24
    140e:	90 93 9d 01 	sts	0x019D, r25
    1412:	a0 93 9e 01 	sts	0x019E, r26
    1416:	b0 93 9f 01 	sts	0x019F, r27
		if(Loc_Overflow_Count==NumberOfOverflows)
    141a:	20 91 9c 01 	lds	r18, 0x019C
    141e:	30 91 9d 01 	lds	r19, 0x019D
    1422:	40 91 9e 01 	lds	r20, 0x019E
    1426:	50 91 9f 01 	lds	r21, 0x019F
    142a:	80 91 90 01 	lds	r24, 0x0190
    142e:	90 91 91 01 	lds	r25, 0x0191
    1432:	a0 91 92 01 	lds	r26, 0x0192
    1436:	b0 91 93 01 	lds	r27, 0x0193
    143a:	28 17       	cp	r18, r24
    143c:	39 07       	cpc	r19, r25
    143e:	4a 07       	cpc	r20, r26
    1440:	5b 07       	cpc	r21, r27
    1442:	f9 f4       	brne	.+62     	; 0x1482 <__vector_11+0xb8>
		{
			TCNT0_REG=256-NumberOfRemainingTicks;
    1444:	e2 e5       	ldi	r30, 0x52	; 82
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 91 94 01 	lds	r24, 0x0194
    144c:	90 91 95 01 	lds	r25, 0x0195
    1450:	a0 91 96 01 	lds	r26, 0x0196
    1454:	b0 91 97 01 	lds	r27, 0x0197
    1458:	81 95       	neg	r24
    145a:	80 83       	st	Z, r24
			Loc_Overflow_Count=0;
    145c:	10 92 9c 01 	sts	0x019C, r1
    1460:	10 92 9d 01 	sts	0x019D, r1
    1464:	10 92 9e 01 	sts	0x019E, r1
    1468:	10 92 9f 01 	sts	0x019F, r1
	       if(Arr_Call_Back[TIMER0_OVF_INT_ID]!=NULL)
    146c:	80 91 98 01 	lds	r24, 0x0198
    1470:	90 91 99 01 	lds	r25, 0x0199
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	29 f0       	breq	.+10     	; 0x1482 <__vector_11+0xb8>
	         {
	            	Arr_Call_Back[TIMER0_OVF_INT_ID]();
    1478:	e0 91 98 01 	lds	r30, 0x0198
    147c:	f0 91 99 01 	lds	r31, 0x0199
    1480:	09 95       	icall
	         }
	}
}
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	ff 91       	pop	r31
    1488:	ef 91       	pop	r30
    148a:	bf 91       	pop	r27
    148c:	af 91       	pop	r26
    148e:	9f 91       	pop	r25
    1490:	8f 91       	pop	r24
    1492:	7f 91       	pop	r23
    1494:	6f 91       	pop	r22
    1496:	5f 91       	pop	r21
    1498:	4f 91       	pop	r20
    149a:	3f 91       	pop	r19
    149c:	2f 91       	pop	r18
    149e:	0f 90       	pop	r0
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	0f 90       	pop	r0
    14a4:	1f 90       	pop	r1
    14a6:	18 95       	reti

000014a8 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    14a8:	1f 92       	push	r1
    14aa:	0f 92       	push	r0
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	0f 92       	push	r0
    14b0:	11 24       	eor	r1, r1
    14b2:	2f 93       	push	r18
    14b4:	3f 93       	push	r19
    14b6:	4f 93       	push	r20
    14b8:	5f 93       	push	r21
    14ba:	6f 93       	push	r22
    14bc:	7f 93       	push	r23
    14be:	8f 93       	push	r24
    14c0:	9f 93       	push	r25
    14c2:	af 93       	push	r26
    14c4:	bf 93       	push	r27
    14c6:	ef 93       	push	r30
    14c8:	ff 93       	push	r31
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62

	if(Arr_Call_Back[TIMER0_COMP_INT_ID]!=NULL)
    14d2:	80 91 9a 01 	lds	r24, 0x019A
    14d6:	90 91 9b 01 	lds	r25, 0x019B
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	29 f0       	breq	.+10     	; 0x14e8 <__vector_10+0x40>
	{
		Arr_Call_Back[TIMER0_COMP_INT_ID]();
    14de:	e0 91 9a 01 	lds	r30, 0x019A
    14e2:	f0 91 9b 01 	lds	r31, 0x019B
    14e6:	09 95       	icall
	}

}
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	ff 91       	pop	r31
    14ee:	ef 91       	pop	r30
    14f0:	bf 91       	pop	r27
    14f2:	af 91       	pop	r26
    14f4:	9f 91       	pop	r25
    14f6:	8f 91       	pop	r24
    14f8:	7f 91       	pop	r23
    14fa:	6f 91       	pop	r22
    14fc:	5f 91       	pop	r21
    14fe:	4f 91       	pop	r20
    1500:	3f 91       	pop	r19
    1502:	2f 91       	pop	r18
    1504:	0f 90       	pop	r0
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	0f 90       	pop	r0
    150a:	1f 90       	pop	r1
    150c:	18 95       	reti

0000150e <M_GIE_void_enable>:
#include"GIE_priv.h"
#include"GIE_config.h"
#include"GIE_int.h"

void M_GIE_void_enable(void)
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
SET_BIT(SREG_REG,I_BIT);
    1516:	af e5       	ldi	r26, 0x5F	; 95
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	ef e5       	ldi	r30, 0x5F	; 95
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	80 68       	ori	r24, 0x80	; 128
    1522:	8c 93       	st	X, r24
asm("SEI");
    1524:	78 94       	sei

}
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <M_GIE_void_disable>:
void M_GIE_void_disable(void)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT(SREG_REG ,I_BIt);
	asm("CLI");
    1534:	f8 94       	cli
}
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <M_EXTI_void_Enable>:
#include"EXT1_int.h"

//arra of 3 pointers to function ( call back function )
static void (*Arr_CallBack[3]) (void)={NULL,NULL,NULL};
void M_EXTI_void_Enable(u8 copy_u8IntID,u8 copy_u8Sense)
{
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <M_EXTI_void_Enable+0x6>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <M_EXTI_void_Enable+0x8>
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8Sense>EXTI_TRIG_RAIS_EDGE &&copy_u8Sense<EXTI_TRIG_LOW_LEVEL)
	{
		return;
	}

	switch(copy_u8IntID)
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3c 83       	std	Y+4, r19	; 0x04
    1554:	2b 83       	std	Y+3, r18	; 0x03
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	86 30       	cpi	r24, 0x06	; 6
    155c:	91 05       	cpc	r25, r1
    155e:	59 f0       	breq	.+22     	; 0x1576 <M_EXTI_void_Enable+0x3a>
    1560:	2b 81       	ldd	r18, Y+3	; 0x03
    1562:	3c 81       	ldd	r19, Y+4	; 0x04
    1564:	27 30       	cpi	r18, 0x07	; 7
    1566:	31 05       	cpc	r19, r1
    1568:	b1 f0       	breq	.+44     	; 0x1596 <M_EXTI_void_Enable+0x5a>
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	85 30       	cpi	r24, 0x05	; 5
    1570:	91 05       	cpc	r25, r1
    1572:	41 f1       	breq	.+80     	; 0x15c4 <M_EXTI_void_Enable+0x88>
    1574:	38 c0       	rjmp	.+112    	; 0x15e6 <M_EXTI_void_Enable+0xaa>
		{
		case EXTI_INT0_ID:
		 //step 1: apply mask
			 MCUCR_REG&=EXTI_INT0_TRIG_MASK ;
    1576:	a5 e5       	ldi	r26, 0x55	; 85
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e5 e5       	ldi	r30, 0x55	; 85
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	8c 7f       	andi	r24, 0xFC	; 252
    1582:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= copy_u8Sense;
    1584:	a5 e5       	ldi	r26, 0x55	; 85
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e5 e5       	ldi	r30, 0x55	; 85
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	90 81       	ld	r25, Z
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	89 2b       	or	r24, r25
    1592:	8c 93       	st	X, r24
    1594:	28 c0       	rjmp	.+80     	; 0x15e6 <M_EXTI_void_Enable+0xaa>
		   break;
		case EXTI_INT1_ID:
			//step 1: apply mask
			 MCUCR_REG&=EXTI_INT1_TRIG_MASK ;
    1596:	a5 e5       	ldi	r26, 0x55	; 85
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e5 e5       	ldi	r30, 0x55	; 85
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	83 7f       	andi	r24, 0xF3	; 243
    15a2:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= copy_u8Sense<<EXTI_INT1_TRIG_SHIFT;
    15a4:	a5 e5       	ldi	r26, 0x55	; 85
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e5 e5       	ldi	r30, 0x55	; 85
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	28 2f       	mov	r18, r24
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	82 2b       	or	r24, r18
    15c0:	8c 93       	st	X, r24
    15c2:	11 c0       	rjmp	.+34     	; 0x15e6 <M_EXTI_void_Enable+0xaa>
			break;
		case EXTI_INT2_ID:
			//step 1: apply mask
			CLR_BIT(MCUSCR_REG,ISC2_BIT);
    15c4:	a4 e5       	ldi	r26, 0x54	; 84
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e4 e5       	ldi	r30, 0x54	; 84
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	8f 7b       	andi	r24, 0xBF	; 191
    15d0:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= GET_BIT(copy_u8Sense,0)<<EXTI_INT2_TRIG_SHIFT;
    15d2:	a5 e5       	ldi	r26, 0x55	; 85
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e5 e5       	ldi	r30, 0x55	; 85
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	98 2f       	mov	r25, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	80 74       	andi	r24, 0x40	; 64
    15e2:	89 2b       	or	r24, r25
    15e4:	8c 93       	st	X, r24
				break;
		}

	//step2 :enable PIE
	if (copy_u8IntID>=EXTI_INT2_ID&&copy_u8IntID<=EXTI_INT1_ID)
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	85 30       	cpi	r24, 0x05	; 5
    15ea:	b0 f0       	brcs	.+44     	; 0x1618 <M_EXTI_void_Enable+0xdc>
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	88 30       	cpi	r24, 0x08	; 8
    15f0:	98 f4       	brcc	.+38     	; 0x1618 <M_EXTI_void_Enable+0xdc>
		SET_BIT(GICR_REG,copy_u8IntID);
    15f2:	ab e5       	ldi	r26, 0x5B	; 91
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	eb e5       	ldi	r30, 0x5B	; 91
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <M_EXTI_void_Enable+0xd4>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <M_EXTI_void_Enable+0xd0>
    1614:	84 2b       	or	r24, r20
    1616:	8c 93       	st	X, r24

}
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <M_EXTI_void_Disble>:
void M_EXTI_void_Disble(u8 copy_u8IntID)
{
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	00 d0       	rcall	.+0      	; 0x162c <M_EXTI_void_Disble+0x6>
    162c:	0f 92       	push	r0
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	89 83       	std	Y+1, r24	; 0x01
	//METHOD 1
	switch(copy_u8IntID)
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	3b 83       	std	Y+3, r19	; 0x03
    163c:	2a 83       	std	Y+2, r18	; 0x02
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	9b 81       	ldd	r25, Y+3	; 0x03
    1642:	86 30       	cpi	r24, 0x06	; 6
    1644:	91 05       	cpc	r25, r1
    1646:	59 f0       	breq	.+22     	; 0x165e <M_EXTI_void_Disble+0x38>
    1648:	2a 81       	ldd	r18, Y+2	; 0x02
    164a:	3b 81       	ldd	r19, Y+3	; 0x03
    164c:	27 30       	cpi	r18, 0x07	; 7
    164e:	31 05       	cpc	r19, r1
    1650:	71 f0       	breq	.+28     	; 0x166e <M_EXTI_void_Disble+0x48>
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	9b 81       	ldd	r25, Y+3	; 0x03
    1656:	85 30       	cpi	r24, 0x05	; 5
    1658:	91 05       	cpc	r25, r1
    165a:	89 f0       	breq	.+34     	; 0x167e <M_EXTI_void_Disble+0x58>
    165c:	17 c0       	rjmp	.+46     	; 0x168c <M_EXTI_void_Disble+0x66>
	{
	case EXTI_INT0_ID:
	   CLR_BIT(GICR_REG,INT0_BIT);
    165e:	ab e5       	ldi	r26, 0x5B	; 91
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	eb e5       	ldi	r30, 0x5B	; 91
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8f 7b       	andi	r24, 0xBF	; 191
    166a:	8c 93       	st	X, r24
    166c:	0f c0       	rjmp	.+30     	; 0x168c <M_EXTI_void_Disble+0x66>
	   break;
	case EXTI_INT1_ID:
		   CLR_BIT(GICR_REG,INT1_BIT);
    166e:	ab e5       	ldi	r26, 0x5B	; 91
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	eb e5       	ldi	r30, 0x5B	; 91
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	8f 77       	andi	r24, 0x7F	; 127
    167a:	8c 93       	st	X, r24
    167c:	07 c0       	rjmp	.+14     	; 0x168c <M_EXTI_void_Disble+0x66>
		   break;
	case EXTI_INT2_ID:
		   CLR_BIT(GICR_REG,INT2_BIT);
    167e:	ab e5       	ldi	r26, 0x5B	; 91
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	eb e5       	ldi	r30, 0x5B	; 91
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8f 7d       	andi	r24, 0xDF	; 223
    168a:	8c 93       	st	X, r24
		   break;
	}
	//METHOD2
	if (copy_u8IntID>=EXTI_INT2_ID&&copy_u8IntID<=EXTI_INT1_ID)
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	85 30       	cpi	r24, 0x05	; 5
    1690:	b8 f0       	brcs	.+46     	; 0x16c0 <M_EXTI_void_Disble+0x9a>
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	88 30       	cpi	r24, 0x08	; 8
    1696:	a0 f4       	brcc	.+40     	; 0x16c0 <M_EXTI_void_Disble+0x9a>
	CLR_BIT(GICR_REG,copy_u8IntID);
    1698:	ab e5       	ldi	r26, 0x5B	; 91
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	eb e5       	ldi	r30, 0x5B	; 91
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	48 2f       	mov	r20, r24
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 2e       	mov	r0, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <M_EXTI_void_Disble+0x90>
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	0a 94       	dec	r0
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <M_EXTI_void_Disble+0x8c>
    16ba:	80 95       	com	r24
    16bc:	84 23       	and	r24, r20
    16be:	8c 93       	st	X, r24
}
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <M_EXTI_void_setCallback>:
void M_EXTI_void_setCallback(void (*ptrfn)(void),u8 copy_u8IntID)
{
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <M_EXTI_void_setCallback+0x6>
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <M_EXTI_void_setCallback+0x8>
    16d4:	0f 92       	push	r0
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	9a 83       	std	Y+2, r25	; 0x02
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	6b 83       	std	Y+3, r22	; 0x03
	switch(copy_u8IntID)
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	3d 83       	std	Y+5, r19	; 0x05
    16e8:	2c 83       	std	Y+4, r18	; 0x04
    16ea:	8c 81       	ldd	r24, Y+4	; 0x04
    16ec:	9d 81       	ldd	r25, Y+5	; 0x05
    16ee:	86 30       	cpi	r24, 0x06	; 6
    16f0:	91 05       	cpc	r25, r1
    16f2:	59 f0       	breq	.+22     	; 0x170a <M_EXTI_void_setCallback+0x3e>
    16f4:	2c 81       	ldd	r18, Y+4	; 0x04
    16f6:	3d 81       	ldd	r19, Y+5	; 0x05
    16f8:	27 30       	cpi	r18, 0x07	; 7
    16fa:	31 05       	cpc	r19, r1
    16fc:	69 f0       	breq	.+26     	; 0x1718 <M_EXTI_void_setCallback+0x4c>
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	85 30       	cpi	r24, 0x05	; 5
    1704:	91 05       	cpc	r25, r1
    1706:	79 f0       	breq	.+30     	; 0x1726 <M_EXTI_void_setCallback+0x5a>
    1708:	14 c0       	rjmp	.+40     	; 0x1732 <M_EXTI_void_setCallback+0x66>
		{
		case EXTI_INT0_ID:
			Arr_CallBack[0]=ptrfn;
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	90 93 a1 01 	sts	0x01A1, r25
    1712:	80 93 a0 01 	sts	0x01A0, r24
    1716:	0d c0       	rjmp	.+26     	; 0x1732 <M_EXTI_void_setCallback+0x66>
		   break;
		case EXTI_INT1_ID:
			Arr_CallBack[1]=ptrfn;
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	90 93 a3 01 	sts	0x01A3, r25
    1720:	80 93 a2 01 	sts	0x01A2, r24
    1724:	06 c0       	rjmp	.+12     	; 0x1732 <M_EXTI_void_setCallback+0x66>
			   break;
		case EXTI_INT2_ID:
			Arr_CallBack[2]=ptrfn;
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	9a 81       	ldd	r25, Y+2	; 0x02
    172a:	90 93 a5 01 	sts	0x01A5, r25
    172e:	80 93 a4 01 	sts	0x01A4, r24
			   break;
		}
}
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <__vector_1>:

ISR(INT0_vect)
{
    1742:	1f 92       	push	r1
    1744:	0f 92       	push	r0
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	0f 92       	push	r0
    174a:	11 24       	eor	r1, r1
    174c:	2f 93       	push	r18
    174e:	3f 93       	push	r19
    1750:	4f 93       	push	r20
    1752:	5f 93       	push	r21
    1754:	6f 93       	push	r22
    1756:	7f 93       	push	r23
    1758:	8f 93       	push	r24
    175a:	9f 93       	push	r25
    175c:	af 93       	push	r26
    175e:	bf 93       	push	r27
    1760:	ef 93       	push	r30
    1762:	ff 93       	push	r31
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[0]!=NULL)
    176c:	80 91 a0 01 	lds	r24, 0x01A0
    1770:	90 91 a1 01 	lds	r25, 0x01A1
    1774:	00 97       	sbiw	r24, 0x00	; 0
    1776:	29 f0       	breq	.+10     	; 0x1782 <__vector_1+0x40>
	{
		Arr_CallBack[0]();
    1778:	e0 91 a0 01 	lds	r30, 0x01A0
    177c:	f0 91 a1 01 	lds	r31, 0x01A1
    1780:	09 95       	icall
	}
}
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	ff 91       	pop	r31
    1788:	ef 91       	pop	r30
    178a:	bf 91       	pop	r27
    178c:	af 91       	pop	r26
    178e:	9f 91       	pop	r25
    1790:	8f 91       	pop	r24
    1792:	7f 91       	pop	r23
    1794:	6f 91       	pop	r22
    1796:	5f 91       	pop	r21
    1798:	4f 91       	pop	r20
    179a:	3f 91       	pop	r19
    179c:	2f 91       	pop	r18
    179e:	0f 90       	pop	r0
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	0f 90       	pop	r0
    17a4:	1f 90       	pop	r1
    17a6:	18 95       	reti

000017a8 <__vector_2>:
ISR(INT1_vect)
{
    17a8:	1f 92       	push	r1
    17aa:	0f 92       	push	r0
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	0f 92       	push	r0
    17b0:	11 24       	eor	r1, r1
    17b2:	2f 93       	push	r18
    17b4:	3f 93       	push	r19
    17b6:	4f 93       	push	r20
    17b8:	5f 93       	push	r21
    17ba:	6f 93       	push	r22
    17bc:	7f 93       	push	r23
    17be:	8f 93       	push	r24
    17c0:	9f 93       	push	r25
    17c2:	af 93       	push	r26
    17c4:	bf 93       	push	r27
    17c6:	ef 93       	push	r30
    17c8:	ff 93       	push	r31
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[1]!=NULL)
    17d2:	80 91 a2 01 	lds	r24, 0x01A2
    17d6:	90 91 a3 01 	lds	r25, 0x01A3
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	29 f0       	breq	.+10     	; 0x17e8 <__vector_2+0x40>
		{
			Arr_CallBack[1]();
    17de:	e0 91 a2 01 	lds	r30, 0x01A2
    17e2:	f0 91 a3 01 	lds	r31, 0x01A3
    17e6:	09 95       	icall
		}
}
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	ff 91       	pop	r31
    17ee:	ef 91       	pop	r30
    17f0:	bf 91       	pop	r27
    17f2:	af 91       	pop	r26
    17f4:	9f 91       	pop	r25
    17f6:	8f 91       	pop	r24
    17f8:	7f 91       	pop	r23
    17fa:	6f 91       	pop	r22
    17fc:	5f 91       	pop	r21
    17fe:	4f 91       	pop	r20
    1800:	3f 91       	pop	r19
    1802:	2f 91       	pop	r18
    1804:	0f 90       	pop	r0
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	0f 90       	pop	r0
    180a:	1f 90       	pop	r1
    180c:	18 95       	reti

0000180e <__vector_3>:
ISR(INT2_vect)
{
    180e:	1f 92       	push	r1
    1810:	0f 92       	push	r0
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	0f 92       	push	r0
    1816:	11 24       	eor	r1, r1
    1818:	2f 93       	push	r18
    181a:	3f 93       	push	r19
    181c:	4f 93       	push	r20
    181e:	5f 93       	push	r21
    1820:	6f 93       	push	r22
    1822:	7f 93       	push	r23
    1824:	8f 93       	push	r24
    1826:	9f 93       	push	r25
    1828:	af 93       	push	r26
    182a:	bf 93       	push	r27
    182c:	ef 93       	push	r30
    182e:	ff 93       	push	r31
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[2]!=NULL)
    1838:	80 91 a4 01 	lds	r24, 0x01A4
    183c:	90 91 a5 01 	lds	r25, 0x01A5
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	29 f0       	breq	.+10     	; 0x184e <__vector_3+0x40>
		{
			Arr_CallBack[2]();
    1844:	e0 91 a4 01 	lds	r30, 0x01A4
    1848:	f0 91 a5 01 	lds	r31, 0x01A5
    184c:	09 95       	icall
		}
}
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	ff 91       	pop	r31
    1854:	ef 91       	pop	r30
    1856:	bf 91       	pop	r27
    1858:	af 91       	pop	r26
    185a:	9f 91       	pop	r25
    185c:	8f 91       	pop	r24
    185e:	7f 91       	pop	r23
    1860:	6f 91       	pop	r22
    1862:	5f 91       	pop	r21
    1864:	4f 91       	pop	r20
    1866:	3f 91       	pop	r19
    1868:	2f 91       	pop	r18
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	0f 90       	pop	r0
    1870:	1f 90       	pop	r1
    1872:	18 95       	reti

00001874 <M_DIO_void_setPinDir>:
#include "DIO_pvt.h"
#include "DIO_config.h"
#include "DIO_int.h"

void M_DIO_void_setPinDir(u8 Port, PIN_T Pin, Dir_T DIRECTION)
{
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	2d 97       	sbiw	r28, 0x0d	; 13
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	6a 83       	std	Y+2, r22	; 0x02
    188c:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	3d 87       	std	Y+13, r19	; 0x0d
    1896:	2c 87       	std	Y+12, r18	; 0x0c
    1898:	8c 85       	ldd	r24, Y+12	; 0x0c
    189a:	9d 85       	ldd	r25, Y+13	; 0x0d
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	91 05       	cpc	r25, r1
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <M_DIO_void_setPinDir+0x30>
    18a2:	4f c0       	rjmp	.+158    	; 0x1942 <M_DIO_void_setPinDir+0xce>
    18a4:	2c 85       	ldd	r18, Y+12	; 0x0c
    18a6:	3d 85       	ldd	r19, Y+13	; 0x0d
    18a8:	22 30       	cpi	r18, 0x02	; 2
    18aa:	31 05       	cpc	r19, r1
    18ac:	2c f4       	brge	.+10     	; 0x18b8 <M_DIO_void_setPinDir+0x44>
    18ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    18b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	71 f0       	breq	.+28     	; 0x18d2 <M_DIO_void_setPinDir+0x5e>
    18b6:	ec c0       	rjmp	.+472    	; 0x1a90 <M_DIO_void_setPinDir+0x21c>
    18b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    18ba:	3d 85       	ldd	r19, Y+13	; 0x0d
    18bc:	22 30       	cpi	r18, 0x02	; 2
    18be:	31 05       	cpc	r19, r1
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <M_DIO_void_setPinDir+0x50>
    18c2:	77 c0       	rjmp	.+238    	; 0x19b2 <M_DIO_void_setPinDir+0x13e>
    18c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    18c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    18c8:	83 30       	cpi	r24, 0x03	; 3
    18ca:	91 05       	cpc	r25, r1
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <M_DIO_void_setPinDir+0x5c>
    18ce:	a9 c0       	rjmp	.+338    	; 0x1a22 <M_DIO_void_setPinDir+0x1ae>
    18d0:	df c0       	rjmp	.+446    	; 0x1a90 <M_DIO_void_setPinDir+0x21c>
	{
	case PORTA_ID :
		switch (DIRECTION)
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	3b 87       	std	Y+11, r19	; 0x0b
    18da:	2a 87       	std	Y+10, r18	; 0x0a
    18dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    18de:	9b 85       	ldd	r25, Y+11	; 0x0b
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	31 f0       	breq	.+12     	; 0x18f0 <M_DIO_void_setPinDir+0x7c>
    18e4:	2a 85       	ldd	r18, Y+10	; 0x0a
    18e6:	3b 85       	ldd	r19, Y+11	; 0x0b
    18e8:	21 30       	cpi	r18, 0x01	; 1
    18ea:	31 05       	cpc	r19, r1
    18ec:	b1 f0       	breq	.+44     	; 0x191a <M_DIO_void_setPinDir+0xa6>
    18ee:	d0 c0       	rjmp	.+416    	; 0x1a90 <M_DIO_void_setPinDir+0x21c>
		{
		case IN:
			 CLR_BIT(DDRA,Pin);
    18f0:	aa e3       	ldi	r26, 0x3A	; 58
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	ea e3       	ldi	r30, 0x3A	; 58
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 2e       	mov	r0, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <M_DIO_void_setPinDir+0x9a>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <M_DIO_void_setPinDir+0x96>
    1912:	80 95       	com	r24
    1914:	84 23       	and	r24, r20
    1916:	8c 93       	st	X, r24
    1918:	bb c0       	rjmp	.+374    	; 0x1a90 <M_DIO_void_setPinDir+0x21c>
			 break;
		case OUT:
			SET_BIT(DDRA,Pin);
    191a:	aa e3       	ldi	r26, 0x3A	; 58
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	ea e3       	ldi	r30, 0x3A	; 58
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	48 2f       	mov	r20, r24
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	02 2e       	mov	r0, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <M_DIO_void_setPinDir+0xc4>
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	0a 94       	dec	r0
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <M_DIO_void_setPinDir+0xc0>
    193c:	84 2b       	or	r24, r20
    193e:	8c 93       	st	X, r24
    1940:	a7 c0       	rjmp	.+334    	; 0x1a90 <M_DIO_void_setPinDir+0x21c>
			break;
		}
		break;
	case PORTB_ID :
				switch (DIRECTION)
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	39 87       	std	Y+9, r19	; 0x09
    194a:	28 87       	std	Y+8, r18	; 0x08
    194c:	88 85       	ldd	r24, Y+8	; 0x08
    194e:	99 85       	ldd	r25, Y+9	; 0x09
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	31 f0       	breq	.+12     	; 0x1960 <M_DIO_void_setPinDir+0xec>
    1954:	28 85       	ldd	r18, Y+8	; 0x08
    1956:	39 85       	ldd	r19, Y+9	; 0x09
    1958:	21 30       	cpi	r18, 0x01	; 1
    195a:	31 05       	cpc	r19, r1
    195c:	b1 f0       	breq	.+44     	; 0x198a <M_DIO_void_setPinDir+0x116>
    195e:	98 c0       	rjmp	.+304    	; 0x1a90 <M_DIO_void_setPinDir+0x21c>
				{
				case IN:
					 CLR_BIT(DDRB,Pin);
    1960:	a7 e3       	ldi	r26, 0x37	; 55
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e7 e3       	ldi	r30, 0x37	; 55
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	48 2f       	mov	r20, r24
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 2e       	mov	r0, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <M_DIO_void_setPinDir+0x10a>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	0a 94       	dec	r0
    1980:	e2 f7       	brpl	.-8      	; 0x197a <M_DIO_void_setPinDir+0x106>
    1982:	80 95       	com	r24
    1984:	84 23       	and	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	83 c0       	rjmp	.+262    	; 0x1a90 <M_DIO_void_setPinDir+0x21c>
					 break;
				case OUT:
					SET_BIT(DDRB,Pin);
    198a:	a7 e3       	ldi	r26, 0x37	; 55
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e7 e3       	ldi	r30, 0x37	; 55
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	48 2f       	mov	r20, r24
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 2e       	mov	r0, r18
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <M_DIO_void_setPinDir+0x134>
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	0a 94       	dec	r0
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <M_DIO_void_setPinDir+0x130>
    19ac:	84 2b       	or	r24, r20
    19ae:	8c 93       	st	X, r24
    19b0:	6f c0       	rjmp	.+222    	; 0x1a90 <M_DIO_void_setPinDir+0x21c>
					break;
				}
			break;
	case PORTC_ID:
				switch (DIRECTION)
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	3f 83       	std	Y+7, r19	; 0x07
    19ba:	2e 83       	std	Y+6, r18	; 0x06
    19bc:	8e 81       	ldd	r24, Y+6	; 0x06
    19be:	9f 81       	ldd	r25, Y+7	; 0x07
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	31 f0       	breq	.+12     	; 0x19d0 <M_DIO_void_setPinDir+0x15c>
    19c4:	2e 81       	ldd	r18, Y+6	; 0x06
    19c6:	3f 81       	ldd	r19, Y+7	; 0x07
    19c8:	21 30       	cpi	r18, 0x01	; 1
    19ca:	31 05       	cpc	r19, r1
    19cc:	b1 f0       	breq	.+44     	; 0x19fa <M_DIO_void_setPinDir+0x186>
    19ce:	60 c0       	rjmp	.+192    	; 0x1a90 <M_DIO_void_setPinDir+0x21c>
				{
				case IN:
						 CLR_BIT(DDRC,Pin);
    19d0:	a4 e3       	ldi	r26, 0x34	; 52
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e4 e3       	ldi	r30, 0x34	; 52
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 2e       	mov	r0, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <M_DIO_void_setPinDir+0x17a>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	0a 94       	dec	r0
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <M_DIO_void_setPinDir+0x176>
    19f2:	80 95       	com	r24
    19f4:	84 23       	and	r24, r20
    19f6:	8c 93       	st	X, r24
    19f8:	4b c0       	rjmp	.+150    	; 0x1a90 <M_DIO_void_setPinDir+0x21c>
						 break;
				case OUT:
						 SET_BIT(DDRC,Pin);
    19fa:	a4 e3       	ldi	r26, 0x34	; 52
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e4 e3       	ldi	r30, 0x34	; 52
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	48 2f       	mov	r20, r24
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	02 2e       	mov	r0, r18
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <M_DIO_void_setPinDir+0x1a4>
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	0a 94       	dec	r0
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <M_DIO_void_setPinDir+0x1a0>
    1a1c:	84 2b       	or	r24, r20
    1a1e:	8c 93       	st	X, r24
    1a20:	37 c0       	rjmp	.+110    	; 0x1a90 <M_DIO_void_setPinDir+0x21c>
						 break;
					}
				break;
	case PORTD_ID :
				 switch (DIRECTION)
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	3d 83       	std	Y+5, r19	; 0x05
    1a2a:	2c 83       	std	Y+4, r18	; 0x04
    1a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	31 f0       	breq	.+12     	; 0x1a40 <M_DIO_void_setPinDir+0x1cc>
    1a34:	2c 81       	ldd	r18, Y+4	; 0x04
    1a36:	3d 81       	ldd	r19, Y+5	; 0x05
    1a38:	21 30       	cpi	r18, 0x01	; 1
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	b1 f0       	breq	.+44     	; 0x1a6a <M_DIO_void_setPinDir+0x1f6>
    1a3e:	28 c0       	rjmp	.+80     	; 0x1a90 <M_DIO_void_setPinDir+0x21c>
				 {
					case IN:
						 CLR_BIT(DDRD,Pin);
    1a40:	a1 e3       	ldi	r26, 0x31	; 49
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e1 e3       	ldi	r30, 0x31	; 49
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	48 2f       	mov	r20, r24
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 2e       	mov	r0, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <M_DIO_void_setPinDir+0x1ea>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <M_DIO_void_setPinDir+0x1e6>
    1a62:	80 95       	com	r24
    1a64:	84 23       	and	r24, r20
    1a66:	8c 93       	st	X, r24
    1a68:	13 c0       	rjmp	.+38     	; 0x1a90 <M_DIO_void_setPinDir+0x21c>
						 break;
					case OUT:
						SET_BIT(DDRD,Pin);
    1a6a:	a1 e3       	ldi	r26, 0x31	; 49
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e1 e3       	ldi	r30, 0x31	; 49
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	48 2f       	mov	r20, r24
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 2e       	mov	r0, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <M_DIO_void_setPinDir+0x214>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 94       	dec	r0
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <M_DIO_void_setPinDir+0x210>
    1a8c:	84 2b       	or	r24, r20
    1a8e:	8c 93       	st	X, r24
						 break;
				}
				break;
	}
}
    1a90:	2d 96       	adiw	r28, 0x0d	; 13
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	08 95       	ret

00001aa2 <M_DIO_void_setPinValue>:
void M_DIO_void_setPinValue(u8 Port, u8 Pin, VALUE_T value)
{
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	2d 97       	sbiw	r28, 0x0d	; 13
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	6a 83       	std	Y+2, r22	; 0x02
    1aba:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	3d 87       	std	Y+13, r19	; 0x0d
    1ac4:	2c 87       	std	Y+12, r18	; 0x0c
    1ac6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ac8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	91 05       	cpc	r25, r1
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <M_DIO_void_setPinValue+0x30>
    1ad0:	4f c0       	rjmp	.+158    	; 0x1b70 <M_DIO_void_setPinValue+0xce>
    1ad2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ad4:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ad6:	22 30       	cpi	r18, 0x02	; 2
    1ad8:	31 05       	cpc	r19, r1
    1ada:	2c f4       	brge	.+10     	; 0x1ae6 <M_DIO_void_setPinValue+0x44>
    1adc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ade:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	71 f0       	breq	.+28     	; 0x1b00 <M_DIO_void_setPinValue+0x5e>
    1ae4:	ec c0       	rjmp	.+472    	; 0x1cbe <M_DIO_void_setPinValue+0x21c>
    1ae6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ae8:	3d 85       	ldd	r19, Y+13	; 0x0d
    1aea:	22 30       	cpi	r18, 0x02	; 2
    1aec:	31 05       	cpc	r19, r1
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <M_DIO_void_setPinValue+0x50>
    1af0:	77 c0       	rjmp	.+238    	; 0x1be0 <M_DIO_void_setPinValue+0x13e>
    1af2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1af4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1af6:	83 30       	cpi	r24, 0x03	; 3
    1af8:	91 05       	cpc	r25, r1
    1afa:	09 f4       	brne	.+2      	; 0x1afe <M_DIO_void_setPinValue+0x5c>
    1afc:	a9 c0       	rjmp	.+338    	; 0x1c50 <M_DIO_void_setPinValue+0x1ae>
    1afe:	df c0       	rjmp	.+446    	; 0x1cbe <M_DIO_void_setPinValue+0x21c>
		{
		case PORTA_ID :
			switch (value)
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	3b 87       	std	Y+11, r19	; 0x0b
    1b08:	2a 87       	std	Y+10, r18	; 0x0a
    1b0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	31 f0       	breq	.+12     	; 0x1b1e <M_DIO_void_setPinValue+0x7c>
    1b12:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b14:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b16:	21 30       	cpi	r18, 0x01	; 1
    1b18:	31 05       	cpc	r19, r1
    1b1a:	b1 f0       	breq	.+44     	; 0x1b48 <M_DIO_void_setPinValue+0xa6>
    1b1c:	d0 c0       	rjmp	.+416    	; 0x1cbe <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTA_REG,Pin);
    1b1e:	ab e3       	ldi	r26, 0x3B	; 59
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	eb e3       	ldi	r30, 0x3B	; 59
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	48 2f       	mov	r20, r24
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	02 2e       	mov	r0, r18
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <M_DIO_void_setPinValue+0x9a>
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	0a 94       	dec	r0
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <M_DIO_void_setPinValue+0x96>
    1b40:	80 95       	com	r24
    1b42:	84 23       	and	r24, r20
    1b44:	8c 93       	st	X, r24
    1b46:	bb c0       	rjmp	.+374    	; 0x1cbe <M_DIO_void_setPinValue+0x21c>
				 break;
			case HIGH:
				SET_BIT(PORTA_REG,Pin);
    1b48:	ab e3       	ldi	r26, 0x3B	; 59
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	eb e3       	ldi	r30, 0x3B	; 59
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	48 2f       	mov	r20, r24
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	02 2e       	mov	r0, r18
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <M_DIO_void_setPinValue+0xc4>
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	0a 94       	dec	r0
    1b68:	e2 f7       	brpl	.-8      	; 0x1b62 <M_DIO_void_setPinValue+0xc0>
    1b6a:	84 2b       	or	r24, r20
    1b6c:	8c 93       	st	X, r24
    1b6e:	a7 c0       	rjmp	.+334    	; 0x1cbe <M_DIO_void_setPinValue+0x21c>
				break;
		   }
			break;
		case PORTB_ID :
			switch (value)
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	39 87       	std	Y+9, r19	; 0x09
    1b78:	28 87       	std	Y+8, r18	; 0x08
    1b7a:	88 85       	ldd	r24, Y+8	; 0x08
    1b7c:	99 85       	ldd	r25, Y+9	; 0x09
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	31 f0       	breq	.+12     	; 0x1b8e <M_DIO_void_setPinValue+0xec>
    1b82:	28 85       	ldd	r18, Y+8	; 0x08
    1b84:	39 85       	ldd	r19, Y+9	; 0x09
    1b86:	21 30       	cpi	r18, 0x01	; 1
    1b88:	31 05       	cpc	r19, r1
    1b8a:	b1 f0       	breq	.+44     	; 0x1bb8 <M_DIO_void_setPinValue+0x116>
    1b8c:	98 c0       	rjmp	.+304    	; 0x1cbe <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTB_REG,Pin);
    1b8e:	a8 e3       	ldi	r26, 0x38	; 56
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e8 e3       	ldi	r30, 0x38	; 56
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	48 2f       	mov	r20, r24
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	02 2e       	mov	r0, r18
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <M_DIO_void_setPinValue+0x10a>
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	0a 94       	dec	r0
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <M_DIO_void_setPinValue+0x106>
    1bb0:	80 95       	com	r24
    1bb2:	84 23       	and	r24, r20
    1bb4:	8c 93       	st	X, r24
    1bb6:	83 c0       	rjmp	.+262    	; 0x1cbe <M_DIO_void_setPinValue+0x21c>
				 break;
			case HIGH:
				 SET_BIT(PORTB_REG,Pin);
    1bb8:	a8 e3       	ldi	r26, 0x38	; 56
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e8 e3       	ldi	r30, 0x38	; 56
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	48 2f       	mov	r20, r24
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	02 2e       	mov	r0, r18
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <M_DIO_void_setPinValue+0x134>
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	0a 94       	dec	r0
    1bd8:	e2 f7       	brpl	.-8      	; 0x1bd2 <M_DIO_void_setPinValue+0x130>
    1bda:	84 2b       	or	r24, r20
    1bdc:	8c 93       	st	X, r24
    1bde:	6f c0       	rjmp	.+222    	; 0x1cbe <M_DIO_void_setPinValue+0x21c>
				 break;
			}
			break;
		case PORTC_ID:
			switch (value)
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	3f 83       	std	Y+7, r19	; 0x07
    1be8:	2e 83       	std	Y+6, r18	; 0x06
    1bea:	8e 81       	ldd	r24, Y+6	; 0x06
    1bec:	9f 81       	ldd	r25, Y+7	; 0x07
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	31 f0       	breq	.+12     	; 0x1bfe <M_DIO_void_setPinValue+0x15c>
    1bf2:	2e 81       	ldd	r18, Y+6	; 0x06
    1bf4:	3f 81       	ldd	r19, Y+7	; 0x07
    1bf6:	21 30       	cpi	r18, 0x01	; 1
    1bf8:	31 05       	cpc	r19, r1
    1bfa:	b1 f0       	breq	.+44     	; 0x1c28 <M_DIO_void_setPinValue+0x186>
    1bfc:	60 c0       	rjmp	.+192    	; 0x1cbe <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTC_REG,Pin);
    1bfe:	a5 e3       	ldi	r26, 0x35	; 53
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e5 e3       	ldi	r30, 0x35	; 53
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	48 2f       	mov	r20, r24
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	02 2e       	mov	r0, r18
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <M_DIO_void_setPinValue+0x17a>
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	0a 94       	dec	r0
    1c1e:	e2 f7       	brpl	.-8      	; 0x1c18 <M_DIO_void_setPinValue+0x176>
    1c20:	80 95       	com	r24
    1c22:	84 23       	and	r24, r20
    1c24:	8c 93       	st	X, r24
    1c26:	4b c0       	rjmp	.+150    	; 0x1cbe <M_DIO_void_setPinValue+0x21c>
				break;
			case HIGH:
				 SET_BIT(PORTC_REG,Pin);
    1c28:	a5 e3       	ldi	r26, 0x35	; 53
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e5 e3       	ldi	r30, 0x35	; 53
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	48 2f       	mov	r20, r24
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	02 2e       	mov	r0, r18
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <M_DIO_void_setPinValue+0x1a4>
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	0a 94       	dec	r0
    1c48:	e2 f7       	brpl	.-8      	; 0x1c42 <M_DIO_void_setPinValue+0x1a0>
    1c4a:	84 2b       	or	r24, r20
    1c4c:	8c 93       	st	X, r24
    1c4e:	37 c0       	rjmp	.+110    	; 0x1cbe <M_DIO_void_setPinValue+0x21c>
				break;
			}
			break;
		case PORTD_ID :
			 switch (value)
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	3d 83       	std	Y+5, r19	; 0x05
    1c58:	2c 83       	std	Y+4, r18	; 0x04
    1c5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	31 f0       	breq	.+12     	; 0x1c6e <M_DIO_void_setPinValue+0x1cc>
    1c62:	2c 81       	ldd	r18, Y+4	; 0x04
    1c64:	3d 81       	ldd	r19, Y+5	; 0x05
    1c66:	21 30       	cpi	r18, 0x01	; 1
    1c68:	31 05       	cpc	r19, r1
    1c6a:	b1 f0       	breq	.+44     	; 0x1c98 <M_DIO_void_setPinValue+0x1f6>
    1c6c:	28 c0       	rjmp	.+80     	; 0x1cbe <M_DIO_void_setPinValue+0x21c>
			 {
				case LOW:
				   CLR_BIT(PORTD_REG,Pin);
    1c6e:	a2 e3       	ldi	r26, 0x32	; 50
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e2 e3       	ldi	r30, 0x32	; 50
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	48 2f       	mov	r20, r24
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 2e       	mov	r0, r18
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <M_DIO_void_setPinValue+0x1ea>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	0a 94       	dec	r0
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <M_DIO_void_setPinValue+0x1e6>
    1c90:	80 95       	com	r24
    1c92:	84 23       	and	r24, r20
    1c94:	8c 93       	st	X, r24
    1c96:	13 c0       	rjmp	.+38     	; 0x1cbe <M_DIO_void_setPinValue+0x21c>
					break;
				case HIGH:
					SET_BIT(PORTD_REG,Pin);
    1c98:	a2 e3       	ldi	r26, 0x32	; 50
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e2 e3       	ldi	r30, 0x32	; 50
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	48 2f       	mov	r20, r24
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 2e       	mov	r0, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <M_DIO_void_setPinValue+0x214>
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	0a 94       	dec	r0
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <M_DIO_void_setPinValue+0x210>
    1cba:	84 2b       	or	r24, r20
    1cbc:	8c 93       	st	X, r24
					break;
			 }
			 break;
		}
}
    1cbe:	2d 96       	adiw	r28, 0x0d	; 13
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <M_DIO_void_getPinValue>:
void M_DIO_void_getPinValue(u8 Port, u8 Pin, u8 *pvalue)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <M_DIO_void_getPinValue+0x6>
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <M_DIO_void_getPinValue+0x8>
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <M_DIO_void_getPinValue+0xa>
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	6a 83       	std	Y+2, r22	; 0x02
    1ce2:	5c 83       	std	Y+4, r21	; 0x04
    1ce4:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port){
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	3e 83       	std	Y+6, r19	; 0x06
    1cee:	2d 83       	std	Y+5, r18	; 0x05
    1cf0:	4d 81       	ldd	r20, Y+5	; 0x05
    1cf2:	5e 81       	ldd	r21, Y+6	; 0x06
    1cf4:	41 30       	cpi	r20, 0x01	; 1
    1cf6:	51 05       	cpc	r21, r1
    1cf8:	59 f1       	breq	.+86     	; 0x1d50 <M_DIO_void_getPinValue+0x80>
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	82 30       	cpi	r24, 0x02	; 2
    1d00:	91 05       	cpc	r25, r1
    1d02:	34 f4       	brge	.+12     	; 0x1d10 <M_DIO_void_getPinValue+0x40>
    1d04:	2d 81       	ldd	r18, Y+5	; 0x05
    1d06:	3e 81       	ldd	r19, Y+6	; 0x06
    1d08:	21 15       	cp	r18, r1
    1d0a:	31 05       	cpc	r19, r1
    1d0c:	69 f0       	breq	.+26     	; 0x1d28 <M_DIO_void_getPinValue+0x58>
    1d0e:	5b c0       	rjmp	.+182    	; 0x1dc6 <M_DIO_void_getPinValue+0xf6>
    1d10:	4d 81       	ldd	r20, Y+5	; 0x05
    1d12:	5e 81       	ldd	r21, Y+6	; 0x06
    1d14:	42 30       	cpi	r20, 0x02	; 2
    1d16:	51 05       	cpc	r21, r1
    1d18:	79 f1       	breq	.+94     	; 0x1d78 <M_DIO_void_getPinValue+0xa8>
    1d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1e:	83 30       	cpi	r24, 0x03	; 3
    1d20:	91 05       	cpc	r25, r1
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <M_DIO_void_getPinValue+0x56>
    1d24:	3d c0       	rjmp	.+122    	; 0x1da0 <M_DIO_void_getPinValue+0xd0>
    1d26:	4f c0       	rjmp	.+158    	; 0x1dc6 <M_DIO_void_getPinValue+0xf6>
	case PORTA_ID:
		*pvalue = GET_BIT(PINA_REG,Pin);
    1d28:	e9 e3       	ldi	r30, 0x39	; 57
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	88 2f       	mov	r24, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	a9 01       	movw	r20, r18
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <M_DIO_void_getPinValue+0x70>
    1d3c:	55 95       	asr	r21
    1d3e:	47 95       	ror	r20
    1d40:	8a 95       	dec	r24
    1d42:	e2 f7       	brpl	.-8      	; 0x1d3c <M_DIO_void_getPinValue+0x6c>
    1d44:	ca 01       	movw	r24, r20
    1d46:	81 70       	andi	r24, 0x01	; 1
    1d48:	eb 81       	ldd	r30, Y+3	; 0x03
    1d4a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d4c:	80 83       	st	Z, r24
    1d4e:	3b c0       	rjmp	.+118    	; 0x1dc6 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTB_ID:
		*pvalue=GET_BIT(PINB_REG,Pin);
    1d50:	e6 e3       	ldi	r30, 0x36	; 54
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	88 2f       	mov	r24, r24
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a9 01       	movw	r20, r18
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <M_DIO_void_getPinValue+0x98>
    1d64:	55 95       	asr	r21
    1d66:	47 95       	ror	r20
    1d68:	8a 95       	dec	r24
    1d6a:	e2 f7       	brpl	.-8      	; 0x1d64 <M_DIO_void_getPinValue+0x94>
    1d6c:	ca 01       	movw	r24, r20
    1d6e:	81 70       	andi	r24, 0x01	; 1
    1d70:	eb 81       	ldd	r30, Y+3	; 0x03
    1d72:	fc 81       	ldd	r31, Y+4	; 0x04
    1d74:	80 83       	st	Z, r24
    1d76:	27 c0       	rjmp	.+78     	; 0x1dc6 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTC_ID:
		*pvalue=GET_BIT(PINC_REG,Pin);
    1d78:	e3 e3       	ldi	r30, 0x33	; 51
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a9 01       	movw	r20, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <M_DIO_void_getPinValue+0xc0>
    1d8c:	55 95       	asr	r21
    1d8e:	47 95       	ror	r20
    1d90:	8a 95       	dec	r24
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <M_DIO_void_getPinValue+0xbc>
    1d94:	ca 01       	movw	r24, r20
    1d96:	81 70       	andi	r24, 0x01	; 1
    1d98:	eb 81       	ldd	r30, Y+3	; 0x03
    1d9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d9c:	80 83       	st	Z, r24
    1d9e:	13 c0       	rjmp	.+38     	; 0x1dc6 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTD_ID:
		*pvalue=GET_BIT(PIND_REG,Pin);
    1da0:	e0 e3       	ldi	r30, 0x30	; 48
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	88 2f       	mov	r24, r24
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a9 01       	movw	r20, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <M_DIO_void_getPinValue+0xe8>
    1db4:	55 95       	asr	r21
    1db6:	47 95       	ror	r20
    1db8:	8a 95       	dec	r24
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <M_DIO_void_getPinValue+0xe4>
    1dbc:	ca 01       	movw	r24, r20
    1dbe:	81 70       	andi	r24, 0x01	; 1
    1dc0:	eb 81       	ldd	r30, Y+3	; 0x03
    1dc2:	fc 81       	ldd	r31, Y+4	; 0x04
    1dc4:	80 83       	st	Z, r24
		break;
	}
}
    1dc6:	26 96       	adiw	r28, 0x06	; 6
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <M_DIO_void_TogPinValue>:
void M_DIO_void_TogPinValue(u8 Port, u8 Pin)
{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	00 d0       	rcall	.+0      	; 0x1dde <M_DIO_void_TogPinValue+0x6>
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <M_DIO_void_TogPinValue+0x8>
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	6a 83       	std	Y+2, r22	; 0x02
	switch (Port){
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	3c 83       	std	Y+4, r19	; 0x04
    1df0:	2b 83       	std	Y+3, r18	; 0x03
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	9c 81       	ldd	r25, Y+4	; 0x04
    1df6:	81 30       	cpi	r24, 0x01	; 1
    1df8:	91 05       	cpc	r25, r1
    1dfa:	49 f1       	breq	.+82     	; 0x1e4e <M_DIO_void_TogPinValue+0x76>
    1dfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1e00:	22 30       	cpi	r18, 0x02	; 2
    1e02:	31 05       	cpc	r19, r1
    1e04:	2c f4       	brge	.+10     	; 0x1e10 <M_DIO_void_TogPinValue+0x38>
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	61 f0       	breq	.+24     	; 0x1e26 <M_DIO_void_TogPinValue+0x4e>
    1e0e:	5a c0       	rjmp	.+180    	; 0x1ec4 <M_DIO_void_TogPinValue+0xec>
    1e10:	2b 81       	ldd	r18, Y+3	; 0x03
    1e12:	3c 81       	ldd	r19, Y+4	; 0x04
    1e14:	22 30       	cpi	r18, 0x02	; 2
    1e16:	31 05       	cpc	r19, r1
    1e18:	71 f1       	breq	.+92     	; 0x1e76 <M_DIO_void_TogPinValue+0x9e>
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	83 30       	cpi	r24, 0x03	; 3
    1e20:	91 05       	cpc	r25, r1
    1e22:	e9 f1       	breq	.+122    	; 0x1e9e <M_DIO_void_TogPinValue+0xc6>
    1e24:	4f c0       	rjmp	.+158    	; 0x1ec4 <M_DIO_void_TogPinValue+0xec>
		case PORTA_ID:
			TOG_BIT(PORTA_REG,Pin);
    1e26:	ab e3       	ldi	r26, 0x3B	; 59
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	eb e3       	ldi	r30, 0x3B	; 59
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	48 2f       	mov	r20, r24
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	02 2e       	mov	r0, r18
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <M_DIO_void_TogPinValue+0x6c>
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	0a 94       	dec	r0
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <M_DIO_void_TogPinValue+0x68>
    1e48:	84 27       	eor	r24, r20
    1e4a:	8c 93       	st	X, r24
    1e4c:	3b c0       	rjmp	.+118    	; 0x1ec4 <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTB_ID:
			TOG_BIT(PORTB_REG,Pin);
    1e4e:	a8 e3       	ldi	r26, 0x38	; 56
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e8 e3       	ldi	r30, 0x38	; 56
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	48 2f       	mov	r20, r24
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	02 2e       	mov	r0, r18
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <M_DIO_void_TogPinValue+0x94>
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	0a 94       	dec	r0
    1e6e:	e2 f7       	brpl	.-8      	; 0x1e68 <M_DIO_void_TogPinValue+0x90>
    1e70:	84 27       	eor	r24, r20
    1e72:	8c 93       	st	X, r24
    1e74:	27 c0       	rjmp	.+78     	; 0x1ec4 <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTC_ID:
			TOG_BIT(PORTC_REG,Pin);
    1e76:	a5 e3       	ldi	r26, 0x35	; 53
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e5 e3       	ldi	r30, 0x35	; 53
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	48 2f       	mov	r20, r24
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	02 2e       	mov	r0, r18
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <M_DIO_void_TogPinValue+0xbc>
    1e90:	88 0f       	add	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	0a 94       	dec	r0
    1e96:	e2 f7       	brpl	.-8      	; 0x1e90 <M_DIO_void_TogPinValue+0xb8>
    1e98:	84 27       	eor	r24, r20
    1e9a:	8c 93       	st	X, r24
    1e9c:	13 c0       	rjmp	.+38     	; 0x1ec4 <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTD_ID:
			TOG_BIT(PORTD_REG,Pin);
    1e9e:	a2 e3       	ldi	r26, 0x32	; 50
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e2 e3       	ldi	r30, 0x32	; 50
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	48 2f       	mov	r20, r24
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	02 2e       	mov	r0, r18
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <M_DIO_void_TogPinValue+0xe4>
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	0a 94       	dec	r0
    1ebe:	e2 f7       	brpl	.-8      	; 0x1eb8 <M_DIO_void_TogPinValue+0xe0>
    1ec0:	84 27       	eor	r24, r20
    1ec2:	8c 93       	st	X, r24
			break;
		}


}
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <H_SSD_void_init>:



//u8 arr[]={0x3f,};
void H_SSD_void_init(void)
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
	M_DIO_void_setPinDir(SSD_LED_A_PORT,  SSD_LED_A_PIN , OUT);
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	41 e0       	ldi	r20, 0x01	; 1
    1ee0:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_B_PORT,  SSD_LED_B_PIN , OUT);
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	62 e0       	ldi	r22, 0x02	; 2
    1ee8:	41 e0       	ldi	r20, 0x01	; 1
    1eea:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_C_PORT,  SSD_LED_C_PIN , OUT);
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	63 e0       	ldi	r22, 0x03	; 3
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_D_PORT,  SSD_LED_D_PIN , OUT);
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	64 e0       	ldi	r22, 0x04	; 4
    1efc:	41 e0       	ldi	r20, 0x01	; 1
    1efe:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_E_PORT,  SSD_LED_E_PIN , OUT);
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	65 e0       	ldi	r22, 0x05	; 5
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_F_PORT,  SSD_LED_F_PIN , OUT);
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	66 e0       	ldi	r22, 0x06	; 6
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_G_PORT,  SSD_LED_G_PIN , OUT);
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	67 e0       	ldi	r22, 0x07	; 7
    1f1a:	41 e0       	ldi	r20, 0x01	; 1
    1f1c:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_DOT_PORT,  SSD_LED_DOT_PIN , OUT);
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	60 e0       	ldi	r22, 0x00	; 0
    1f24:	41 e0       	ldi	r20, 0x01	; 1
    1f26:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>

	//ENABLE DIGITS 1

	M_DIO_void_setPinDir(SSD_DIG_1_EN_PORT,  SSD_DIG_1_EN_PIN , OUT);
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	66 e0       	ldi	r22, 0x06	; 6
    1f2e:	41 e0       	ldi	r20, 0x01	; 1
    1f30:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_DIG_2_EN_PORT,  SSD_DIG_2_EN_PIN , OUT);
    1f34:	82 e0       	ldi	r24, 0x02	; 2
    1f36:	67 e0       	ldi	r22, 0x07	; 7
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
}
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	08 95       	ret

00001f44 <H_SSD_void_DisplayNumber>:
void H_SSD_void_DisplayNumber(u8 number)
{
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	a7 97       	sbiw	r28, 0x27	; 39
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	8b a3       	std	Y+35, r24	; 0x23
	if(number>99)
    1f5a:	8b a1       	ldd	r24, Y+35	; 0x23
    1f5c:	84 36       	cpi	r24, 0x64	; 100
    1f5e:	08 f0       	brcs	.+2      	; 0x1f62 <H_SSD_void_DisplayNumber+0x1e>
    1f60:	04 c5       	rjmp	.+2568   	; 0x296a <H_SSD_void_DisplayNumber+0xa26>
	{
		return;
	}
	u32 i ;
	u8 units =number % 10;
    1f62:	8b a1       	ldd	r24, Y+35	; 0x23
    1f64:	9a e0       	ldi	r25, 0x0A	; 10
    1f66:	69 2f       	mov	r22, r25
    1f68:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__udivmodqi4>
    1f6c:	89 2f       	mov	r24, r25
    1f6e:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 tens = number/10;
    1f70:	8b a1       	ldd	r24, Y+35	; 0x23
    1f72:	9a e0       	ldi	r25, 0x0A	; 10
    1f74:	69 2f       	mov	r22, r25
    1f76:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__udivmodqi4>
    1f7a:	8d 8f       	std	Y+29, r24	; 0x1d
	for(i=0;i<SSD_DISPLAYY_TIME ;i++){
    1f7c:	1f 8e       	std	Y+31, r1	; 0x1f
    1f7e:	18 a2       	std	Y+32, r1	; 0x20
    1f80:	19 a2       	std	Y+33, r1	; 0x21
    1f82:	1a a2       	std	Y+34, r1	; 0x22
    1f84:	e8 c4       	rjmp	.+2512   	; 0x2956 <H_SSD_void_DisplayNumber+0xa12>

		switch (units)
    1f86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	3f a3       	std	Y+39, r19	; 0x27
    1f8e:	2e a3       	std	Y+38, r18	; 0x26
    1f90:	8e a1       	ldd	r24, Y+38	; 0x26
    1f92:	9f a1       	ldd	r25, Y+39	; 0x27
    1f94:	84 30       	cpi	r24, 0x04	; 4
    1f96:	91 05       	cpc	r25, r1
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <H_SSD_void_DisplayNumber+0x58>
    1f9a:	f0 c0       	rjmp	.+480    	; 0x217c <H_SSD_void_DisplayNumber+0x238>
    1f9c:	2e a1       	ldd	r18, Y+38	; 0x26
    1f9e:	3f a1       	ldd	r19, Y+39	; 0x27
    1fa0:	25 30       	cpi	r18, 0x05	; 5
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	ec f4       	brge	.+58     	; 0x1fe0 <H_SSD_void_DisplayNumber+0x9c>
    1fa6:	8e a1       	ldd	r24, Y+38	; 0x26
    1fa8:	9f a1       	ldd	r25, Y+39	; 0x27
    1faa:	81 30       	cpi	r24, 0x01	; 1
    1fac:	91 05       	cpc	r25, r1
    1fae:	09 f4       	brne	.+2      	; 0x1fb2 <H_SSD_void_DisplayNumber+0x6e>
    1fb0:	6a c0       	rjmp	.+212    	; 0x2086 <H_SSD_void_DisplayNumber+0x142>
    1fb2:	2e a1       	ldd	r18, Y+38	; 0x26
    1fb4:	3f a1       	ldd	r19, Y+39	; 0x27
    1fb6:	22 30       	cpi	r18, 0x02	; 2
    1fb8:	31 05       	cpc	r19, r1
    1fba:	2c f4       	brge	.+10     	; 0x1fc6 <H_SSD_void_DisplayNumber+0x82>
    1fbc:	8e a1       	ldd	r24, Y+38	; 0x26
    1fbe:	9f a1       	ldd	r25, Y+39	; 0x27
    1fc0:	00 97       	sbiw	r24, 0x00	; 0
    1fc2:	99 f1       	breq	.+102    	; 0x202a <H_SSD_void_DisplayNumber+0xe6>
    1fc4:	d0 c1       	rjmp	.+928    	; 0x2366 <H_SSD_void_DisplayNumber+0x422>
    1fc6:	2e a1       	ldd	r18, Y+38	; 0x26
    1fc8:	3f a1       	ldd	r19, Y+39	; 0x27
    1fca:	22 30       	cpi	r18, 0x02	; 2
    1fcc:	31 05       	cpc	r19, r1
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <H_SSD_void_DisplayNumber+0x8e>
    1fd0:	83 c0       	rjmp	.+262    	; 0x20d8 <H_SSD_void_DisplayNumber+0x194>
    1fd2:	8e a1       	ldd	r24, Y+38	; 0x26
    1fd4:	9f a1       	ldd	r25, Y+39	; 0x27
    1fd6:	83 30       	cpi	r24, 0x03	; 3
    1fd8:	91 05       	cpc	r25, r1
    1fda:	09 f4       	brne	.+2      	; 0x1fde <H_SSD_void_DisplayNumber+0x9a>
    1fdc:	a6 c0       	rjmp	.+332    	; 0x212a <H_SSD_void_DisplayNumber+0x1e6>
    1fde:	c3 c1       	rjmp	.+902    	; 0x2366 <H_SSD_void_DisplayNumber+0x422>
    1fe0:	2e a1       	ldd	r18, Y+38	; 0x26
    1fe2:	3f a1       	ldd	r19, Y+39	; 0x27
    1fe4:	27 30       	cpi	r18, 0x07	; 7
    1fe6:	31 05       	cpc	r19, r1
    1fe8:	09 f4       	brne	.+2      	; 0x1fec <H_SSD_void_DisplayNumber+0xa8>
    1fea:	43 c1       	rjmp	.+646    	; 0x2272 <H_SSD_void_DisplayNumber+0x32e>
    1fec:	8e a1       	ldd	r24, Y+38	; 0x26
    1fee:	9f a1       	ldd	r25, Y+39	; 0x27
    1ff0:	88 30       	cpi	r24, 0x08	; 8
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	6c f4       	brge	.+26     	; 0x2010 <H_SSD_void_DisplayNumber+0xcc>
    1ff6:	2e a1       	ldd	r18, Y+38	; 0x26
    1ff8:	3f a1       	ldd	r19, Y+39	; 0x27
    1ffa:	25 30       	cpi	r18, 0x05	; 5
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	09 f4       	brne	.+2      	; 0x2002 <H_SSD_void_DisplayNumber+0xbe>
    2000:	e6 c0       	rjmp	.+460    	; 0x21ce <H_SSD_void_DisplayNumber+0x28a>
    2002:	8e a1       	ldd	r24, Y+38	; 0x26
    2004:	9f a1       	ldd	r25, Y+39	; 0x27
    2006:	86 30       	cpi	r24, 0x06	; 6
    2008:	91 05       	cpc	r25, r1
    200a:	09 f4       	brne	.+2      	; 0x200e <H_SSD_void_DisplayNumber+0xca>
    200c:	09 c1       	rjmp	.+530    	; 0x2220 <H_SSD_void_DisplayNumber+0x2dc>
    200e:	ab c1       	rjmp	.+854    	; 0x2366 <H_SSD_void_DisplayNumber+0x422>
    2010:	2e a1       	ldd	r18, Y+38	; 0x26
    2012:	3f a1       	ldd	r19, Y+39	; 0x27
    2014:	28 30       	cpi	r18, 0x08	; 8
    2016:	31 05       	cpc	r19, r1
    2018:	09 f4       	brne	.+2      	; 0x201c <H_SSD_void_DisplayNumber+0xd8>
    201a:	54 c1       	rjmp	.+680    	; 0x22c4 <H_SSD_void_DisplayNumber+0x380>
    201c:	8e a1       	ldd	r24, Y+38	; 0x26
    201e:	9f a1       	ldd	r25, Y+39	; 0x27
    2020:	89 30       	cpi	r24, 0x09	; 9
    2022:	91 05       	cpc	r25, r1
    2024:	09 f4       	brne	.+2      	; 0x2028 <H_SSD_void_DisplayNumber+0xe4>
    2026:	77 c1       	rjmp	.+750    	; 0x2316 <H_SSD_void_DisplayNumber+0x3d2>
    2028:	9e c1       	rjmp	.+828    	; 0x2366 <H_SSD_void_DisplayNumber+0x422>
		{
		case 0:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	61 e0       	ldi	r22, 0x01	; 1
    202e:	41 e0       	ldi	r20, 0x01	; 1
    2030:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	62 e0       	ldi	r22, 0x02	; 2
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	63 e0       	ldi	r22, 0x03	; 3
    2042:	41 e0       	ldi	r20, 0x01	; 1
    2044:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	64 e0       	ldi	r22, 0x04	; 4
    204c:	41 e0       	ldi	r20, 0x01	; 1
    204e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	65 e0       	ldi	r22, 0x05	; 5
    2056:	41 e0       	ldi	r20, 0x01	; 1
    2058:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	66 e0       	ldi	r22, 0x06	; 6
    2060:	41 e0       	ldi	r20, 0x01	; 1
    2062:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	61 e0       	ldi	r22, 0x01	; 1
    206a:	41 e0       	ldi	r20, 0x01	; 1
    206c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	67 e0       	ldi	r22, 0x07	; 7
    2074:	40 e0       	ldi	r20, 0x00	; 0
    2076:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    2084:	70 c1       	rjmp	.+736    	; 0x2366 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 1:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	61 e0       	ldi	r22, 0x01	; 1
    208a:	40 e0       	ldi	r20, 0x00	; 0
    208c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	62 e0       	ldi	r22, 0x02	; 2
    2094:	41 e0       	ldi	r20, 0x01	; 1
    2096:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	63 e0       	ldi	r22, 0x03	; 3
    209e:	41 e0       	ldi	r20, 0x01	; 1
    20a0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	64 e0       	ldi	r22, 0x04	; 4
    20a8:	40 e0       	ldi	r20, 0x00	; 0
    20aa:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	65 e0       	ldi	r22, 0x05	; 5
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	66 e0       	ldi	r22, 0x06	; 6
    20bc:	40 e0       	ldi	r20, 0x00	; 0
    20be:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	67 e0       	ldi	r22, 0x07	; 7
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    20d6:	47 c1       	rjmp	.+654    	; 0x2366 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 2:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	61 e0       	ldi	r22, 0x01	; 1
    20dc:	41 e0       	ldi	r20, 0x01	; 1
    20de:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	62 e0       	ldi	r22, 0x02	; 2
    20e6:	41 e0       	ldi	r20, 0x01	; 1
    20e8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,LOW);
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	63 e0       	ldi	r22, 0x03	; 3
    20f0:	40 e0       	ldi	r20, 0x00	; 0
    20f2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	64 e0       	ldi	r22, 0x04	; 4
    20fa:	41 e0       	ldi	r20, 0x01	; 1
    20fc:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	65 e0       	ldi	r22, 0x05	; 5
    2104:	41 e0       	ldi	r20, 0x01	; 1
    2106:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	66 e0       	ldi	r22, 0x06	; 6
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	67 e0       	ldi	r22, 0x07	; 7
    2118:	41 e0       	ldi	r20, 0x01	; 1
    211a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	40 e0       	ldi	r20, 0x00	; 0
    2124:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    2128:	1e c1       	rjmp	.+572    	; 0x2366 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 3:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	61 e0       	ldi	r22, 0x01	; 1
    212e:	41 e0       	ldi	r20, 0x01	; 1
    2130:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	62 e0       	ldi	r22, 0x02	; 2
    2138:	41 e0       	ldi	r20, 0x01	; 1
    213a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	63 e0       	ldi	r22, 0x03	; 3
    2142:	41 e0       	ldi	r20, 0x01	; 1
    2144:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	64 e0       	ldi	r22, 0x04	; 4
    214c:	41 e0       	ldi	r20, 0x01	; 1
    214e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	65 e0       	ldi	r22, 0x05	; 5
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	66 e0       	ldi	r22, 0x06	; 6
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	67 e0       	ldi	r22, 0x07	; 7
    216a:	41 e0       	ldi	r20, 0x01	; 1
    216c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	60 e0       	ldi	r22, 0x00	; 0
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    217a:	f5 c0       	rjmp	.+490    	; 0x2366 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 4:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	61 e0       	ldi	r22, 0x01	; 1
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	62 e0       	ldi	r22, 0x02	; 2
    218a:	41 e0       	ldi	r20, 0x01	; 1
    218c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	63 e0       	ldi	r22, 0x03	; 3
    2194:	41 e0       	ldi	r20, 0x01	; 1
    2196:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	64 e0       	ldi	r22, 0x04	; 4
    219e:	40 e0       	ldi	r20, 0x00	; 0
    21a0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	65 e0       	ldi	r22, 0x05	; 5
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	66 e0       	ldi	r22, 0x06	; 6
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	67 e0       	ldi	r22, 0x07	; 7
    21bc:	41 e0       	ldi	r20, 0x01	; 1
    21be:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	60 e0       	ldi	r22, 0x00	; 0
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    21cc:	cc c0       	rjmp	.+408    	; 0x2366 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 5:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	61 e0       	ldi	r22, 0x01	; 1
    21d2:	41 e0       	ldi	r20, 0x01	; 1
    21d4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	62 e0       	ldi	r22, 0x02	; 2
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	63 e0       	ldi	r22, 0x03	; 3
    21e6:	41 e0       	ldi	r20, 0x01	; 1
    21e8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	64 e0       	ldi	r22, 0x04	; 4
    21f0:	41 e0       	ldi	r20, 0x01	; 1
    21f2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	65 e0       	ldi	r22, 0x05	; 5
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	66 e0       	ldi	r22, 0x06	; 6
    2204:	41 e0       	ldi	r20, 0x01	; 1
    2206:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	67 e0       	ldi	r22, 0x07	; 7
    220e:	41 e0       	ldi	r20, 0x01	; 1
    2210:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    221e:	a3 c0       	rjmp	.+326    	; 0x2366 <H_SSD_void_DisplayNumber+0x422>
			break;
		case 6:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	61 e0       	ldi	r22, 0x01	; 1
    2224:	41 e0       	ldi	r20, 0x01	; 1
    2226:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	62 e0       	ldi	r22, 0x02	; 2
    222e:	40 e0       	ldi	r20, 0x00	; 0
    2230:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	63 e0       	ldi	r22, 0x03	; 3
    2238:	41 e0       	ldi	r20, 0x01	; 1
    223a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	64 e0       	ldi	r22, 0x04	; 4
    2242:	41 e0       	ldi	r20, 0x01	; 1
    2244:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	65 e0       	ldi	r22, 0x05	; 5
    224c:	41 e0       	ldi	r20, 0x01	; 1
    224e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	66 e0       	ldi	r22, 0x06	; 6
    2256:	41 e0       	ldi	r20, 0x01	; 1
    2258:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	67 e0       	ldi	r22, 0x07	; 7
    2260:	41 e0       	ldi	r20, 0x01	; 1
    2262:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    2270:	7a c0       	rjmp	.+244    	; 0x2366 <H_SSD_void_DisplayNumber+0x422>
			break;
		case 7:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	61 e0       	ldi	r22, 0x01	; 1
    2276:	41 e0       	ldi	r20, 0x01	; 1
    2278:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	62 e0       	ldi	r22, 0x02	; 2
    2280:	41 e0       	ldi	r20, 0x01	; 1
    2282:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	63 e0       	ldi	r22, 0x03	; 3
    228a:	41 e0       	ldi	r20, 0x01	; 1
    228c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	64 e0       	ldi	r22, 0x04	; 4
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	65 e0       	ldi	r22, 0x05	; 5
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	66 e0       	ldi	r22, 0x06	; 6
    22a8:	40 e0       	ldi	r20, 0x00	; 0
    22aa:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	67 e0       	ldi	r22, 0x07	; 7
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	60 e0       	ldi	r22, 0x00	; 0
    22bc:	40 e0       	ldi	r20, 0x00	; 0
    22be:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    22c2:	51 c0       	rjmp	.+162    	; 0x2366 <H_SSD_void_DisplayNumber+0x422>
			break;
		case 8:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	61 e0       	ldi	r22, 0x01	; 1
    22c8:	41 e0       	ldi	r20, 0x01	; 1
    22ca:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	62 e0       	ldi	r22, 0x02	; 2
    22d2:	41 e0       	ldi	r20, 0x01	; 1
    22d4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	63 e0       	ldi	r22, 0x03	; 3
    22dc:	41 e0       	ldi	r20, 0x01	; 1
    22de:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	64 e0       	ldi	r22, 0x04	; 4
    22e6:	41 e0       	ldi	r20, 0x01	; 1
    22e8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	65 e0       	ldi	r22, 0x05	; 5
    22f0:	41 e0       	ldi	r20, 0x01	; 1
    22f2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	66 e0       	ldi	r22, 0x06	; 6
    22fa:	41 e0       	ldi	r20, 0x01	; 1
    22fc:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	67 e0       	ldi	r22, 0x07	; 7
    2304:	41 e0       	ldi	r20, 0x01	; 1
    2306:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	60 e0       	ldi	r22, 0x00	; 0
    230e:	40 e0       	ldi	r20, 0x00	; 0
    2310:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    2314:	28 c0       	rjmp	.+80     	; 0x2366 <H_SSD_void_DisplayNumber+0x422>
			break;
		case 9:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	61 e0       	ldi	r22, 0x01	; 1
    231a:	41 e0       	ldi	r20, 0x01	; 1
    231c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	62 e0       	ldi	r22, 0x02	; 2
    2324:	41 e0       	ldi	r20, 0x01	; 1
    2326:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	63 e0       	ldi	r22, 0x03	; 3
    232e:	41 e0       	ldi	r20, 0x01	; 1
    2330:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	64 e0       	ldi	r22, 0x04	; 4
    2338:	41 e0       	ldi	r20, 0x01	; 1
    233a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	65 e0       	ldi	r22, 0x05	; 5
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	66 e0       	ldi	r22, 0x06	; 6
    234c:	41 e0       	ldi	r20, 0x01	; 1
    234e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	67 e0       	ldi	r22, 0x07	; 7
    2356:	41 e0       	ldi	r20, 0x01	; 1
    2358:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	60 e0       	ldi	r22, 0x00	; 0
    2360:	40 e0       	ldi	r20, 0x00	; 0
    2362:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>


		}
		//enable digit 1
		//disable digit 2
		M_DIO_void_setPinValue(SSD_DIG_1_EN_PORT,SSD_DIG_1_EN_PIN,HIGH);
    2366:	82 e0       	ldi	r24, 0x02	; 2
    2368:	66 e0       	ldi	r22, 0x06	; 6
    236a:	41 e0       	ldi	r20, 0x01	; 1
    236c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
    2370:	82 e0       	ldi	r24, 0x02	; 2
    2372:	67 e0       	ldi	r22, 0x07	; 7
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	a0 e8       	ldi	r26, 0x80	; 128
    2380:	bf e3       	ldi	r27, 0x3F	; 63
    2382:	89 8f       	std	Y+25, r24	; 0x19
    2384:	9a 8f       	std	Y+26, r25	; 0x1a
    2386:	ab 8f       	std	Y+27, r26	; 0x1b
    2388:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238a:	69 8d       	ldd	r22, Y+25	; 0x19
    238c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    238e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2390:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	48 ec       	ldi	r20, 0xC8	; 200
    2398:	53 e4       	ldi	r21, 0x43	; 67
    239a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	8d 8b       	std	Y+21, r24	; 0x15
    23a4:	9e 8b       	std	Y+22, r25	; 0x16
    23a6:	af 8b       	std	Y+23, r26	; 0x17
    23a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23aa:	6d 89       	ldd	r22, Y+21	; 0x15
    23ac:	7e 89       	ldd	r23, Y+22	; 0x16
    23ae:	8f 89       	ldd	r24, Y+23	; 0x17
    23b0:	98 8d       	ldd	r25, Y+24	; 0x18
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5f e3       	ldi	r21, 0x3F	; 63
    23ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23be:	88 23       	and	r24, r24
    23c0:	2c f4       	brge	.+10     	; 0x23cc <H_SSD_void_DisplayNumber+0x488>
		__ticks = 1;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	9c 8b       	std	Y+20, r25	; 0x14
    23c8:	8b 8b       	std	Y+19, r24	; 0x13
    23ca:	3f c0       	rjmp	.+126    	; 0x244a <H_SSD_void_DisplayNumber+0x506>
	else if (__tmp > 65535)
    23cc:	6d 89       	ldd	r22, Y+21	; 0x15
    23ce:	7e 89       	ldd	r23, Y+22	; 0x16
    23d0:	8f 89       	ldd	r24, Y+23	; 0x17
    23d2:	98 8d       	ldd	r25, Y+24	; 0x18
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	3f ef       	ldi	r19, 0xFF	; 255
    23d8:	4f e7       	ldi	r20, 0x7F	; 127
    23da:	57 e4       	ldi	r21, 0x47	; 71
    23dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23e0:	18 16       	cp	r1, r24
    23e2:	4c f5       	brge	.+82     	; 0x2436 <H_SSD_void_DisplayNumber+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e4:	69 8d       	ldd	r22, Y+25	; 0x19
    23e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e2       	ldi	r20, 0x20	; 32
    23f2:	51 e4       	ldi	r21, 0x41	; 65
    23f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	9c 8b       	std	Y+20, r25	; 0x14
    240a:	8b 8b       	std	Y+19, r24	; 0x13
    240c:	0f c0       	rjmp	.+30     	; 0x242c <H_SSD_void_DisplayNumber+0x4e8>
    240e:	88 e2       	ldi	r24, 0x28	; 40
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	9a 8b       	std	Y+18, r25	; 0x12
    2414:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2416:	89 89       	ldd	r24, Y+17	; 0x11
    2418:	9a 89       	ldd	r25, Y+18	; 0x12
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <H_SSD_void_DisplayNumber+0x4d6>
    241e:	9a 8b       	std	Y+18, r25	; 0x12
    2420:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2422:	8b 89       	ldd	r24, Y+19	; 0x13
    2424:	9c 89       	ldd	r25, Y+20	; 0x14
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	9c 8b       	std	Y+20, r25	; 0x14
    242a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242c:	8b 89       	ldd	r24, Y+19	; 0x13
    242e:	9c 89       	ldd	r25, Y+20	; 0x14
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	69 f7       	brne	.-38     	; 0x240e <H_SSD_void_DisplayNumber+0x4ca>
    2434:	14 c0       	rjmp	.+40     	; 0x245e <H_SSD_void_DisplayNumber+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2436:	6d 89       	ldd	r22, Y+21	; 0x15
    2438:	7e 89       	ldd	r23, Y+22	; 0x16
    243a:	8f 89       	ldd	r24, Y+23	; 0x17
    243c:	98 8d       	ldd	r25, Y+24	; 0x18
    243e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	9c 8b       	std	Y+20, r25	; 0x14
    2448:	8b 8b       	std	Y+19, r24	; 0x13
    244a:	8b 89       	ldd	r24, Y+19	; 0x13
    244c:	9c 89       	ldd	r25, Y+20	; 0x14
    244e:	98 8b       	std	Y+16, r25	; 0x10
    2450:	8f 87       	std	Y+15, r24	; 0x0f
    2452:	8f 85       	ldd	r24, Y+15	; 0x0f
    2454:	98 89       	ldd	r25, Y+16	; 0x10
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <H_SSD_void_DisplayNumber+0x512>
    245a:	98 8b       	std	Y+16, r25	; 0x10
    245c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_1_EN_PORT,SSD_DIG_1_EN_PIN,LOW);
    245e:	82 e0       	ldi	r24, 0x02	; 2
    2460:	66 e0       	ldi	r22, 0x06	; 6
    2462:	40 e0       	ldi	r20, 0x00	; 0
    2464:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
		switch (tens)
    2468:	8d 8d       	ldd	r24, Y+29	; 0x1d
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	3d a3       	std	Y+37, r19	; 0x25
    2470:	2c a3       	std	Y+36, r18	; 0x24
    2472:	8c a1       	ldd	r24, Y+36	; 0x24
    2474:	9d a1       	ldd	r25, Y+37	; 0x25
    2476:	84 30       	cpi	r24, 0x04	; 4
    2478:	91 05       	cpc	r25, r1
    247a:	09 f4       	brne	.+2      	; 0x247e <H_SSD_void_DisplayNumber+0x53a>
    247c:	f0 c0       	rjmp	.+480    	; 0x265e <H_SSD_void_DisplayNumber+0x71a>
    247e:	2c a1       	ldd	r18, Y+36	; 0x24
    2480:	3d a1       	ldd	r19, Y+37	; 0x25
    2482:	25 30       	cpi	r18, 0x05	; 5
    2484:	31 05       	cpc	r19, r1
    2486:	ec f4       	brge	.+58     	; 0x24c2 <H_SSD_void_DisplayNumber+0x57e>
    2488:	8c a1       	ldd	r24, Y+36	; 0x24
    248a:	9d a1       	ldd	r25, Y+37	; 0x25
    248c:	81 30       	cpi	r24, 0x01	; 1
    248e:	91 05       	cpc	r25, r1
    2490:	09 f4       	brne	.+2      	; 0x2494 <H_SSD_void_DisplayNumber+0x550>
    2492:	6a c0       	rjmp	.+212    	; 0x2568 <H_SSD_void_DisplayNumber+0x624>
    2494:	2c a1       	ldd	r18, Y+36	; 0x24
    2496:	3d a1       	ldd	r19, Y+37	; 0x25
    2498:	22 30       	cpi	r18, 0x02	; 2
    249a:	31 05       	cpc	r19, r1
    249c:	2c f4       	brge	.+10     	; 0x24a8 <H_SSD_void_DisplayNumber+0x564>
    249e:	8c a1       	ldd	r24, Y+36	; 0x24
    24a0:	9d a1       	ldd	r25, Y+37	; 0x25
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	99 f1       	breq	.+102    	; 0x250c <H_SSD_void_DisplayNumber+0x5c8>
    24a6:	d0 c1       	rjmp	.+928    	; 0x2848 <H_SSD_void_DisplayNumber+0x904>
    24a8:	2c a1       	ldd	r18, Y+36	; 0x24
    24aa:	3d a1       	ldd	r19, Y+37	; 0x25
    24ac:	22 30       	cpi	r18, 0x02	; 2
    24ae:	31 05       	cpc	r19, r1
    24b0:	09 f4       	brne	.+2      	; 0x24b4 <H_SSD_void_DisplayNumber+0x570>
    24b2:	83 c0       	rjmp	.+262    	; 0x25ba <H_SSD_void_DisplayNumber+0x676>
    24b4:	8c a1       	ldd	r24, Y+36	; 0x24
    24b6:	9d a1       	ldd	r25, Y+37	; 0x25
    24b8:	83 30       	cpi	r24, 0x03	; 3
    24ba:	91 05       	cpc	r25, r1
    24bc:	09 f4       	brne	.+2      	; 0x24c0 <H_SSD_void_DisplayNumber+0x57c>
    24be:	a6 c0       	rjmp	.+332    	; 0x260c <H_SSD_void_DisplayNumber+0x6c8>
    24c0:	c3 c1       	rjmp	.+902    	; 0x2848 <H_SSD_void_DisplayNumber+0x904>
    24c2:	2c a1       	ldd	r18, Y+36	; 0x24
    24c4:	3d a1       	ldd	r19, Y+37	; 0x25
    24c6:	27 30       	cpi	r18, 0x07	; 7
    24c8:	31 05       	cpc	r19, r1
    24ca:	09 f4       	brne	.+2      	; 0x24ce <H_SSD_void_DisplayNumber+0x58a>
    24cc:	43 c1       	rjmp	.+646    	; 0x2754 <H_SSD_void_DisplayNumber+0x810>
    24ce:	8c a1       	ldd	r24, Y+36	; 0x24
    24d0:	9d a1       	ldd	r25, Y+37	; 0x25
    24d2:	88 30       	cpi	r24, 0x08	; 8
    24d4:	91 05       	cpc	r25, r1
    24d6:	6c f4       	brge	.+26     	; 0x24f2 <H_SSD_void_DisplayNumber+0x5ae>
    24d8:	2c a1       	ldd	r18, Y+36	; 0x24
    24da:	3d a1       	ldd	r19, Y+37	; 0x25
    24dc:	25 30       	cpi	r18, 0x05	; 5
    24de:	31 05       	cpc	r19, r1
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <H_SSD_void_DisplayNumber+0x5a0>
    24e2:	e6 c0       	rjmp	.+460    	; 0x26b0 <H_SSD_void_DisplayNumber+0x76c>
    24e4:	8c a1       	ldd	r24, Y+36	; 0x24
    24e6:	9d a1       	ldd	r25, Y+37	; 0x25
    24e8:	86 30       	cpi	r24, 0x06	; 6
    24ea:	91 05       	cpc	r25, r1
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <H_SSD_void_DisplayNumber+0x5ac>
    24ee:	09 c1       	rjmp	.+530    	; 0x2702 <H_SSD_void_DisplayNumber+0x7be>
    24f0:	ab c1       	rjmp	.+854    	; 0x2848 <H_SSD_void_DisplayNumber+0x904>
    24f2:	2c a1       	ldd	r18, Y+36	; 0x24
    24f4:	3d a1       	ldd	r19, Y+37	; 0x25
    24f6:	28 30       	cpi	r18, 0x08	; 8
    24f8:	31 05       	cpc	r19, r1
    24fa:	09 f4       	brne	.+2      	; 0x24fe <H_SSD_void_DisplayNumber+0x5ba>
    24fc:	54 c1       	rjmp	.+680    	; 0x27a6 <H_SSD_void_DisplayNumber+0x862>
    24fe:	8c a1       	ldd	r24, Y+36	; 0x24
    2500:	9d a1       	ldd	r25, Y+37	; 0x25
    2502:	89 30       	cpi	r24, 0x09	; 9
    2504:	91 05       	cpc	r25, r1
    2506:	09 f4       	brne	.+2      	; 0x250a <H_SSD_void_DisplayNumber+0x5c6>
    2508:	77 c1       	rjmp	.+750    	; 0x27f8 <H_SSD_void_DisplayNumber+0x8b4>
    250a:	9e c1       	rjmp	.+828    	; 0x2848 <H_SSD_void_DisplayNumber+0x904>
		{
		case 0:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	61 e0       	ldi	r22, 0x01	; 1
    2510:	41 e0       	ldi	r20, 0x01	; 1
    2512:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	62 e0       	ldi	r22, 0x02	; 2
    251a:	41 e0       	ldi	r20, 0x01	; 1
    251c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	63 e0       	ldi	r22, 0x03	; 3
    2524:	41 e0       	ldi	r20, 0x01	; 1
    2526:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	64 e0       	ldi	r22, 0x04	; 4
    252e:	41 e0       	ldi	r20, 0x01	; 1
    2530:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	65 e0       	ldi	r22, 0x05	; 5
    2538:	41 e0       	ldi	r20, 0x01	; 1
    253a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	66 e0       	ldi	r22, 0x06	; 6
    2542:	41 e0       	ldi	r20, 0x01	; 1
    2544:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	61 e0       	ldi	r22, 0x01	; 1
    254c:	41 e0       	ldi	r20, 0x01	; 1
    254e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	67 e0       	ldi	r22, 0x07	; 7
    2556:	40 e0       	ldi	r20, 0x00	; 0
    2558:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	60 e0       	ldi	r22, 0x00	; 0
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    2566:	70 c1       	rjmp	.+736    	; 0x2848 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 1:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	61 e0       	ldi	r22, 0x01	; 1
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	62 e0       	ldi	r22, 0x02	; 2
    2576:	41 e0       	ldi	r20, 0x01	; 1
    2578:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	63 e0       	ldi	r22, 0x03	; 3
    2580:	41 e0       	ldi	r20, 0x01	; 1
    2582:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	64 e0       	ldi	r22, 0x04	; 4
    258a:	40 e0       	ldi	r20, 0x00	; 0
    258c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	65 e0       	ldi	r22, 0x05	; 5
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	66 e0       	ldi	r22, 0x06	; 6
    259e:	40 e0       	ldi	r20, 0x00	; 0
    25a0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	67 e0       	ldi	r22, 0x07	; 7
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	40 e0       	ldi	r20, 0x00	; 0
    25b4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    25b8:	47 c1       	rjmp	.+654    	; 0x2848 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 2:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	61 e0       	ldi	r22, 0x01	; 1
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	62 e0       	ldi	r22, 0x02	; 2
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,LOW);
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	63 e0       	ldi	r22, 0x03	; 3
    25d2:	40 e0       	ldi	r20, 0x00	; 0
    25d4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	64 e0       	ldi	r22, 0x04	; 4
    25dc:	41 e0       	ldi	r20, 0x01	; 1
    25de:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	65 e0       	ldi	r22, 0x05	; 5
    25e6:	41 e0       	ldi	r20, 0x01	; 1
    25e8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	66 e0       	ldi	r22, 0x06	; 6
    25f0:	40 e0       	ldi	r20, 0x00	; 0
    25f2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	67 e0       	ldi	r22, 0x07	; 7
    25fa:	41 e0       	ldi	r20, 0x01	; 1
    25fc:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	60 e0       	ldi	r22, 0x00	; 0
    2604:	40 e0       	ldi	r20, 0x00	; 0
    2606:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    260a:	1e c1       	rjmp	.+572    	; 0x2848 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 3:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	61 e0       	ldi	r22, 0x01	; 1
    2610:	41 e0       	ldi	r20, 0x01	; 1
    2612:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	62 e0       	ldi	r22, 0x02	; 2
    261a:	41 e0       	ldi	r20, 0x01	; 1
    261c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	63 e0       	ldi	r22, 0x03	; 3
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	64 e0       	ldi	r22, 0x04	; 4
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	65 e0       	ldi	r22, 0x05	; 5
    2638:	40 e0       	ldi	r20, 0x00	; 0
    263a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	66 e0       	ldi	r22, 0x06	; 6
    2642:	40 e0       	ldi	r20, 0x00	; 0
    2644:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	67 e0       	ldi	r22, 0x07	; 7
    264c:	41 e0       	ldi	r20, 0x01	; 1
    264e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	40 e0       	ldi	r20, 0x00	; 0
    2658:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    265c:	f5 c0       	rjmp	.+490    	; 0x2848 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 4:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	61 e0       	ldi	r22, 0x01	; 1
    2662:	40 e0       	ldi	r20, 0x00	; 0
    2664:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	62 e0       	ldi	r22, 0x02	; 2
    266c:	41 e0       	ldi	r20, 0x01	; 1
    266e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	63 e0       	ldi	r22, 0x03	; 3
    2676:	41 e0       	ldi	r20, 0x01	; 1
    2678:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	64 e0       	ldi	r22, 0x04	; 4
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	65 e0       	ldi	r22, 0x05	; 5
    268a:	40 e0       	ldi	r20, 0x00	; 0
    268c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	66 e0       	ldi	r22, 0x06	; 6
    2694:	41 e0       	ldi	r20, 0x01	; 1
    2696:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	67 e0       	ldi	r22, 0x07	; 7
    269e:	41 e0       	ldi	r20, 0x01	; 1
    26a0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	60 e0       	ldi	r22, 0x00	; 0
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    26ae:	cc c0       	rjmp	.+408    	; 0x2848 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 5:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	61 e0       	ldi	r22, 0x01	; 1
    26b4:	41 e0       	ldi	r20, 0x01	; 1
    26b6:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	62 e0       	ldi	r22, 0x02	; 2
    26be:	40 e0       	ldi	r20, 0x00	; 0
    26c0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	63 e0       	ldi	r22, 0x03	; 3
    26c8:	41 e0       	ldi	r20, 0x01	; 1
    26ca:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	64 e0       	ldi	r22, 0x04	; 4
    26d2:	41 e0       	ldi	r20, 0x01	; 1
    26d4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	65 e0       	ldi	r22, 0x05	; 5
    26dc:	40 e0       	ldi	r20, 0x00	; 0
    26de:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	66 e0       	ldi	r22, 0x06	; 6
    26e6:	41 e0       	ldi	r20, 0x01	; 1
    26e8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	67 e0       	ldi	r22, 0x07	; 7
    26f0:	41 e0       	ldi	r20, 0x01	; 1
    26f2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	60 e0       	ldi	r22, 0x00	; 0
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    2700:	a3 c0       	rjmp	.+326    	; 0x2848 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 6:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	61 e0       	ldi	r22, 0x01	; 1
    2706:	41 e0       	ldi	r20, 0x01	; 1
    2708:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	62 e0       	ldi	r22, 0x02	; 2
    2710:	40 e0       	ldi	r20, 0x00	; 0
    2712:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	63 e0       	ldi	r22, 0x03	; 3
    271a:	41 e0       	ldi	r20, 0x01	; 1
    271c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	64 e0       	ldi	r22, 0x04	; 4
    2724:	41 e0       	ldi	r20, 0x01	; 1
    2726:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	65 e0       	ldi	r22, 0x05	; 5
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	66 e0       	ldi	r22, 0x06	; 6
    2738:	41 e0       	ldi	r20, 0x01	; 1
    273a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	67 e0       	ldi	r22, 0x07	; 7
    2742:	41 e0       	ldi	r20, 0x01	; 1
    2744:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    2752:	7a c0       	rjmp	.+244    	; 0x2848 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 7:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	61 e0       	ldi	r22, 0x01	; 1
    2758:	41 e0       	ldi	r20, 0x01	; 1
    275a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	62 e0       	ldi	r22, 0x02	; 2
    2762:	41 e0       	ldi	r20, 0x01	; 1
    2764:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	63 e0       	ldi	r22, 0x03	; 3
    276c:	41 e0       	ldi	r20, 0x01	; 1
    276e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	64 e0       	ldi	r22, 0x04	; 4
    2776:	40 e0       	ldi	r20, 0x00	; 0
    2778:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	65 e0       	ldi	r22, 0x05	; 5
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	66 e0       	ldi	r22, 0x06	; 6
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	67 e0       	ldi	r22, 0x07	; 7
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	60 e0       	ldi	r22, 0x00	; 0
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    27a4:	51 c0       	rjmp	.+162    	; 0x2848 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 8:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	61 e0       	ldi	r22, 0x01	; 1
    27aa:	41 e0       	ldi	r20, 0x01	; 1
    27ac:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	62 e0       	ldi	r22, 0x02	; 2
    27b4:	41 e0       	ldi	r20, 0x01	; 1
    27b6:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	63 e0       	ldi	r22, 0x03	; 3
    27be:	41 e0       	ldi	r20, 0x01	; 1
    27c0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	64 e0       	ldi	r22, 0x04	; 4
    27c8:	41 e0       	ldi	r20, 0x01	; 1
    27ca:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	65 e0       	ldi	r22, 0x05	; 5
    27d2:	41 e0       	ldi	r20, 0x01	; 1
    27d4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	66 e0       	ldi	r22, 0x06	; 6
    27dc:	41 e0       	ldi	r20, 0x01	; 1
    27de:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	67 e0       	ldi	r22, 0x07	; 7
    27e6:	41 e0       	ldi	r20, 0x01	; 1
    27e8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	60 e0       	ldi	r22, 0x00	; 0
    27f0:	40 e0       	ldi	r20, 0x00	; 0
    27f2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    27f6:	28 c0       	rjmp	.+80     	; 0x2848 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 9:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	61 e0       	ldi	r22, 0x01	; 1
    27fc:	41 e0       	ldi	r20, 0x01	; 1
    27fe:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	62 e0       	ldi	r22, 0x02	; 2
    2806:	41 e0       	ldi	r20, 0x01	; 1
    2808:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	63 e0       	ldi	r22, 0x03	; 3
    2810:	41 e0       	ldi	r20, 0x01	; 1
    2812:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	64 e0       	ldi	r22, 0x04	; 4
    281a:	41 e0       	ldi	r20, 0x01	; 1
    281c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	65 e0       	ldi	r22, 0x05	; 5
    2824:	40 e0       	ldi	r20, 0x00	; 0
    2826:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	66 e0       	ldi	r22, 0x06	; 6
    282e:	41 e0       	ldi	r20, 0x01	; 1
    2830:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	67 e0       	ldi	r22, 0x07	; 7
    2838:	41 e0       	ldi	r20, 0x01	; 1
    283a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	60 e0       	ldi	r22, 0x00	; 0
    2842:	40 e0       	ldi	r20, 0x00	; 0
    2844:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>



				}
		//enable digit 2
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,HIGH);
    2848:	82 e0       	ldi	r24, 0x02	; 2
    284a:	67 e0       	ldi	r22, 0x07	; 7
    284c:	41 e0       	ldi	r20, 0x01	; 1
    284e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	a0 e8       	ldi	r26, 0x80	; 128
    2858:	bf e3       	ldi	r27, 0x3F	; 63
    285a:	8b 87       	std	Y+11, r24	; 0x0b
    285c:	9c 87       	std	Y+12, r25	; 0x0c
    285e:	ad 87       	std	Y+13, r26	; 0x0d
    2860:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2862:	6b 85       	ldd	r22, Y+11	; 0x0b
    2864:	7c 85       	ldd	r23, Y+12	; 0x0c
    2866:	8d 85       	ldd	r24, Y+13	; 0x0d
    2868:	9e 85       	ldd	r25, Y+14	; 0x0e
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	48 ec       	ldi	r20, 0xC8	; 200
    2870:	53 e4       	ldi	r21, 0x43	; 67
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	8f 83       	std	Y+7, r24	; 0x07
    287c:	98 87       	std	Y+8, r25	; 0x08
    287e:	a9 87       	std	Y+9, r26	; 0x09
    2880:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2882:	6f 81       	ldd	r22, Y+7	; 0x07
    2884:	78 85       	ldd	r23, Y+8	; 0x08
    2886:	89 85       	ldd	r24, Y+9	; 0x09
    2888:	9a 85       	ldd	r25, Y+10	; 0x0a
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e8       	ldi	r20, 0x80	; 128
    2890:	5f e3       	ldi	r21, 0x3F	; 63
    2892:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2896:	88 23       	and	r24, r24
    2898:	2c f4       	brge	.+10     	; 0x28a4 <H_SSD_void_DisplayNumber+0x960>
		__ticks = 1;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	9e 83       	std	Y+6, r25	; 0x06
    28a0:	8d 83       	std	Y+5, r24	; 0x05
    28a2:	3f c0       	rjmp	.+126    	; 0x2922 <H_SSD_void_DisplayNumber+0x9de>
	else if (__tmp > 65535)
    28a4:	6f 81       	ldd	r22, Y+7	; 0x07
    28a6:	78 85       	ldd	r23, Y+8	; 0x08
    28a8:	89 85       	ldd	r24, Y+9	; 0x09
    28aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	3f ef       	ldi	r19, 0xFF	; 255
    28b0:	4f e7       	ldi	r20, 0x7F	; 127
    28b2:	57 e4       	ldi	r21, 0x47	; 71
    28b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28b8:	18 16       	cp	r1, r24
    28ba:	4c f5       	brge	.+82     	; 0x290e <H_SSD_void_DisplayNumber+0x9ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    28be:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e2       	ldi	r20, 0x20	; 32
    28ca:	51 e4       	ldi	r21, 0x41	; 65
    28cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9e 83       	std	Y+6, r25	; 0x06
    28e2:	8d 83       	std	Y+5, r24	; 0x05
    28e4:	0f c0       	rjmp	.+30     	; 0x2904 <H_SSD_void_DisplayNumber+0x9c0>
    28e6:	88 e2       	ldi	r24, 0x28	; 40
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	9c 83       	std	Y+4, r25	; 0x04
    28ec:	8b 83       	std	Y+3, r24	; 0x03
    28ee:	8b 81       	ldd	r24, Y+3	; 0x03
    28f0:	9c 81       	ldd	r25, Y+4	; 0x04
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <H_SSD_void_DisplayNumber+0x9ae>
    28f6:	9c 83       	std	Y+4, r25	; 0x04
    28f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fa:	8d 81       	ldd	r24, Y+5	; 0x05
    28fc:	9e 81       	ldd	r25, Y+6	; 0x06
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	9e 83       	std	Y+6, r25	; 0x06
    2902:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2904:	8d 81       	ldd	r24, Y+5	; 0x05
    2906:	9e 81       	ldd	r25, Y+6	; 0x06
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	69 f7       	brne	.-38     	; 0x28e6 <H_SSD_void_DisplayNumber+0x9a2>
    290c:	14 c0       	rjmp	.+40     	; 0x2936 <H_SSD_void_DisplayNumber+0x9f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290e:	6f 81       	ldd	r22, Y+7	; 0x07
    2910:	78 85       	ldd	r23, Y+8	; 0x08
    2912:	89 85       	ldd	r24, Y+9	; 0x09
    2914:	9a 85       	ldd	r25, Y+10	; 0x0a
    2916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	9e 83       	std	Y+6, r25	; 0x06
    2920:	8d 83       	std	Y+5, r24	; 0x05
    2922:	8d 81       	ldd	r24, Y+5	; 0x05
    2924:	9e 81       	ldd	r25, Y+6	; 0x06
    2926:	9a 83       	std	Y+2, r25	; 0x02
    2928:	89 83       	std	Y+1, r24	; 0x01
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	9a 81       	ldd	r25, Y+2	; 0x02
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <H_SSD_void_DisplayNumber+0x9ea>
    2932:	9a 83       	std	Y+2, r25	; 0x02
    2934:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
    2936:	82 e0       	ldi	r24, 0x02	; 2
    2938:	67 e0       	ldi	r22, 0x07	; 7
    293a:	40 e0       	ldi	r20, 0x00	; 0
    293c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
		return;
	}
	u32 i ;
	u8 units =number % 10;
	u8 tens = number/10;
	for(i=0;i<SSD_DISPLAYY_TIME ;i++){
    2940:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2942:	98 a1       	ldd	r25, Y+32	; 0x20
    2944:	a9 a1       	ldd	r26, Y+33	; 0x21
    2946:	ba a1       	ldd	r27, Y+34	; 0x22
    2948:	01 96       	adiw	r24, 0x01	; 1
    294a:	a1 1d       	adc	r26, r1
    294c:	b1 1d       	adc	r27, r1
    294e:	8f 8f       	std	Y+31, r24	; 0x1f
    2950:	98 a3       	std	Y+32, r25	; 0x20
    2952:	a9 a3       	std	Y+33, r26	; 0x21
    2954:	ba a3       	std	Y+34, r27	; 0x22
    2956:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2958:	98 a1       	ldd	r25, Y+32	; 0x20
    295a:	a9 a1       	ldd	r26, Y+33	; 0x21
    295c:	ba a1       	ldd	r27, Y+34	; 0x22
    295e:	8a 3f       	cpi	r24, 0xFA	; 250
    2960:	91 05       	cpc	r25, r1
    2962:	a1 05       	cpc	r26, r1
    2964:	b1 05       	cpc	r27, r1
    2966:	08 f4       	brcc	.+2      	; 0x296a <H_SSD_void_DisplayNumber+0xa26>
    2968:	0e cb       	rjmp	.-2532   	; 0x1f86 <H_SSD_void_DisplayNumber+0x42>
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,HIGH);

		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
	}
}
    296a:	a7 96       	adiw	r28, 0x27	; 39
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	f8 94       	cli
    2970:	de bf       	out	0x3e, r29	; 62
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	cd bf       	out	0x3d, r28	; 61
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	08 95       	ret

0000297c <H_PB_void_init>:
#include"PB_int.h"
#include<util/delay.h>


void H_PB_void_init(const PB_t *ptr)
{
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	00 d0       	rcall	.+0      	; 0x2982 <H_PB_void_init+0x6>
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
    2986:	9a 83       	std	Y+2, r25	; 0x02
    2988:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_void_setPinDir(ptr->PB_port, ptr->PB_pin,IN);
    298a:	e9 81       	ldd	r30, Y+1	; 0x01
    298c:	fa 81       	ldd	r31, Y+2	; 0x02
    298e:	81 81       	ldd	r24, Z+1	; 0x01
    2990:	e9 81       	ldd	r30, Y+1	; 0x01
    2992:	fa 81       	ldd	r31, Y+2	; 0x02
    2994:	92 81       	ldd	r25, Z+2	; 0x02
    2996:	69 2f       	mov	r22, r25
    2998:	40 e0       	ldi	r20, 0x00	; 0
    299a:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
}
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <H_PB_void_read>:
void H_PB_void_read(const PB_t *ptr,VALUE_T *pvalue)
{
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	a1 97       	sbiw	r28, 0x21	; 33
    29b2:	0f b6       	in	r0, 0x3f	; 63
    29b4:	f8 94       	cli
    29b6:	de bf       	out	0x3e, r29	; 62
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	cd bf       	out	0x3d, r28	; 61
    29bc:	9f 8f       	std	Y+31, r25	; 0x1f
    29be:	8e 8f       	std	Y+30, r24	; 0x1e
    29c0:	79 a3       	std	Y+33, r23	; 0x21
    29c2:	68 a3       	std	Y+32, r22	; 0x20
	//u8 read;

	if(ptr -> PB_activeMood == ACTIVE_LOW)
    29c4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    29c6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    29c8:	83 81       	ldd	r24, Z+3	; 0x03
    29ca:	88 23       	and	r24, r24
    29cc:	09 f0       	breq	.+2      	; 0x29d0 <H_PB_void_read+0x28>
    29ce:	b0 c0       	rjmp	.+352    	; 0x2b30 <H_PB_void_read+0x188>
	{
		*pvalue=NOT_PRESSED_ACTIVE_LOW ;
    29d0:	e8 a1       	ldd	r30, Y+32	; 0x20
    29d2:	f9 a1       	ldd	r31, Y+33	; 0x21
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	80 83       	st	Z, r24
		M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
    29d8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    29da:	ff 8d       	ldd	r31, Y+31	; 0x1f
    29dc:	81 81       	ldd	r24, Z+1	; 0x01
    29de:	ee 8d       	ldd	r30, Y+30	; 0x1e
    29e0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    29e2:	92 81       	ldd	r25, Z+2	; 0x02
    29e4:	28 a1       	ldd	r18, Y+32	; 0x20
    29e6:	39 a1       	ldd	r19, Y+33	; 0x21
    29e8:	69 2f       	mov	r22, r25
    29ea:	a9 01       	movw	r20, r18
    29ec:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <M_DIO_void_getPinValue>
		if(*pvalue==PRESSED_ACTIVE_LOW){
    29f0:	e8 a1       	ldd	r30, Y+32	; 0x20
    29f2:	f9 a1       	ldd	r31, Y+33	; 0x21
    29f4:	80 81       	ld	r24, Z
    29f6:	88 23       	and	r24, r24
    29f8:	09 f0       	breq	.+2      	; 0x29fc <H_PB_void_read+0x54>
    29fa:	4f c1       	rjmp	.+670    	; 0x2c9a <H_PB_void_read+0x2f2>
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	a8 e4       	ldi	r26, 0x48	; 72
    2a02:	b3 e4       	ldi	r27, 0x43	; 67
    2a04:	89 8f       	std	Y+25, r24	; 0x19
    2a06:	9a 8f       	std	Y+26, r25	; 0x1a
    2a08:	ab 8f       	std	Y+27, r26	; 0x1b
    2a0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	48 ec       	ldi	r20, 0xC8	; 200
    2a1a:	53 e4       	ldi	r21, 0x43	; 67
    2a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	8d 8b       	std	Y+21, r24	; 0x15
    2a26:	9e 8b       	std	Y+22, r25	; 0x16
    2a28:	af 8b       	std	Y+23, r26	; 0x17
    2a2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a30:	8f 89       	ldd	r24, Y+23	; 0x17
    2a32:	98 8d       	ldd	r25, Y+24	; 0x18
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e8       	ldi	r20, 0x80	; 128
    2a3a:	5f e3       	ldi	r21, 0x3F	; 63
    2a3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a40:	88 23       	and	r24, r24
    2a42:	2c f4       	brge	.+10     	; 0x2a4e <H_PB_void_read+0xa6>
		__ticks = 1;
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	9c 8b       	std	Y+20, r25	; 0x14
    2a4a:	8b 8b       	std	Y+19, r24	; 0x13
    2a4c:	3f c0       	rjmp	.+126    	; 0x2acc <H_PB_void_read+0x124>
	else if (__tmp > 65535)
    2a4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a50:	7e 89       	ldd	r23, Y+22	; 0x16
    2a52:	8f 89       	ldd	r24, Y+23	; 0x17
    2a54:	98 8d       	ldd	r25, Y+24	; 0x18
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	3f ef       	ldi	r19, 0xFF	; 255
    2a5a:	4f e7       	ldi	r20, 0x7F	; 127
    2a5c:	57 e4       	ldi	r21, 0x47	; 71
    2a5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a62:	18 16       	cp	r1, r24
    2a64:	4c f5       	brge	.+82     	; 0x2ab8 <H_PB_void_read+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a66:	69 8d       	ldd	r22, Y+25	; 0x19
    2a68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e2       	ldi	r20, 0x20	; 32
    2a74:	51 e4       	ldi	r21, 0x41	; 65
    2a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	bc 01       	movw	r22, r24
    2a80:	cd 01       	movw	r24, r26
    2a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	9c 8b       	std	Y+20, r25	; 0x14
    2a8c:	8b 8b       	std	Y+19, r24	; 0x13
    2a8e:	0f c0       	rjmp	.+30     	; 0x2aae <H_PB_void_read+0x106>
    2a90:	88 e2       	ldi	r24, 0x28	; 40
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	9a 8b       	std	Y+18, r25	; 0x12
    2a96:	89 8b       	std	Y+17, r24	; 0x11
    2a98:	89 89       	ldd	r24, Y+17	; 0x11
    2a9a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <H_PB_void_read+0xf4>
    2aa0:	9a 8b       	std	Y+18, r25	; 0x12
    2aa2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa4:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa6:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	9c 8b       	std	Y+20, r25	; 0x14
    2aac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aae:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab2:	00 97       	sbiw	r24, 0x00	; 0
    2ab4:	69 f7       	brne	.-38     	; 0x2a90 <H_PB_void_read+0xe8>
    2ab6:	14 c0       	rjmp	.+40     	; 0x2ae0 <H_PB_void_read+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab8:	6d 89       	ldd	r22, Y+21	; 0x15
    2aba:	7e 89       	ldd	r23, Y+22	; 0x16
    2abc:	8f 89       	ldd	r24, Y+23	; 0x17
    2abe:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	9c 8b       	std	Y+20, r25	; 0x14
    2aca:	8b 8b       	std	Y+19, r24	; 0x13
    2acc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ace:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad0:	98 8b       	std	Y+16, r25	; 0x10
    2ad2:	8f 87       	std	Y+15, r24	; 0x0f
    2ad4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ad6:	98 89       	ldd	r25, Y+16	; 0x10
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	f1 f7       	brne	.-4      	; 0x2ad8 <H_PB_void_read+0x130>
    2adc:	98 8b       	std	Y+16, r25	; 0x10
    2ade:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);

			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin,pvalue);
    2ae0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2ae2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2ae4:	81 81       	ldd	r24, Z+1	; 0x01
    2ae6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2ae8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2aea:	92 81       	ldd	r25, Z+2	; 0x02
    2aec:	28 a1       	ldd	r18, Y+32	; 0x20
    2aee:	39 a1       	ldd	r19, Y+33	; 0x21
    2af0:	69 2f       	mov	r22, r25
    2af2:	a9 01       	movw	r20, r18
    2af4:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <M_DIO_void_getPinValue>
			if (*pvalue==PRESSED_ACTIVE_LOW)
    2af8:	e8 a1       	ldd	r30, Y+32	; 0x20
    2afa:	f9 a1       	ldd	r31, Y+33	; 0x21
    2afc:	80 81       	ld	r24, Z
    2afe:	88 23       	and	r24, r24
    2b00:	09 f0       	breq	.+2      	; 0x2b04 <H_PB_void_read+0x15c>
    2b02:	cb c0       	rjmp	.+406    	; 0x2c9a <H_PB_void_read+0x2f2>
    2b04:	0c c0       	rjmp	.+24     	; 0x2b1e <H_PB_void_read+0x176>
			{
				while(*pvalue==PRESSED_ACTIVE_LOW)
				{
					M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
    2b06:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2b08:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2b0a:	81 81       	ldd	r24, Z+1	; 0x01
    2b0c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2b0e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2b10:	92 81       	ldd	r25, Z+2	; 0x02
    2b12:	28 a1       	ldd	r18, Y+32	; 0x20
    2b14:	39 a1       	ldd	r19, Y+33	; 0x21
    2b16:	69 2f       	mov	r22, r25
    2b18:	a9 01       	movw	r20, r18
    2b1a:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <M_DIO_void_getPinValue>
			_delay_ms(200);

			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin,pvalue);
			if (*pvalue==PRESSED_ACTIVE_LOW)
			{
				while(*pvalue==PRESSED_ACTIVE_LOW)
    2b1e:	e8 a1       	ldd	r30, Y+32	; 0x20
    2b20:	f9 a1       	ldd	r31, Y+33	; 0x21
    2b22:	80 81       	ld	r24, Z
    2b24:	88 23       	and	r24, r24
    2b26:	79 f3       	breq	.-34     	; 0x2b06 <H_PB_void_read+0x15e>
				{
					M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
				}
				*pvalue=PRESSED_ACTIVE_LOW;
    2b28:	e8 a1       	ldd	r30, Y+32	; 0x20
    2b2a:	f9 a1       	ldd	r31, Y+33	; 0x21
    2b2c:	10 82       	st	Z, r1
    2b2e:	b5 c0       	rjmp	.+362    	; 0x2c9a <H_PB_void_read+0x2f2>
				return;
			}

		}
	}
	else if(ptr->PB_activeMood==ACTIVE_HIGH)
    2b30:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2b32:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2b34:	83 81       	ldd	r24, Z+3	; 0x03
    2b36:	81 30       	cpi	r24, 0x01	; 1
    2b38:	09 f0       	breq	.+2      	; 0x2b3c <H_PB_void_read+0x194>
    2b3a:	af c0       	rjmp	.+350    	; 0x2c9a <H_PB_void_read+0x2f2>
	{
		u8 read;

		if(ptr->PB_activeMood==ACTIVE_LOW)
    2b3c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2b3e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2b40:	83 81       	ldd	r24, Z+3	; 0x03
    2b42:	88 23       	and	r24, r24
    2b44:	09 f0       	breq	.+2      	; 0x2b48 <H_PB_void_read+0x1a0>
    2b46:	a9 c0       	rjmp	.+338    	; 0x2c9a <H_PB_void_read+0x2f2>
		{
			read=NOT_PRESSED_ACTIVEHIGH ;
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	8d 8f       	std	Y+29, r24	; 0x1d
			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    2b4c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2b4e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2b50:	81 81       	ldd	r24, Z+1	; 0x01
    2b52:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2b54:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2b56:	92 81       	ldd	r25, Z+2	; 0x02
    2b58:	9e 01       	movw	r18, r28
    2b5a:	20 5e       	subi	r18, 0xE0	; 224
    2b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b5e:	69 2f       	mov	r22, r25
    2b60:	a9 01       	movw	r20, r18
    2b62:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <M_DIO_void_getPinValue>
			if(read==PRESSED_ACTIVE_LOW){
    2b66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b68:	88 23       	and	r24, r24
    2b6a:	09 f0       	breq	.+2      	; 0x2b6e <H_PB_void_read+0x1c6>
    2b6c:	96 c0       	rjmp	.+300    	; 0x2c9a <H_PB_void_read+0x2f2>
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	a8 e4       	ldi	r26, 0x48	; 72
    2b74:	b3 e4       	ldi	r27, 0x43	; 67
    2b76:	8b 87       	std	Y+11, r24	; 0x0b
    2b78:	9c 87       	std	Y+12, r25	; 0x0c
    2b7a:	ad 87       	std	Y+13, r26	; 0x0d
    2b7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	48 ec       	ldi	r20, 0xC8	; 200
    2b8c:	53 e4       	ldi	r21, 0x43	; 67
    2b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	8f 83       	std	Y+7, r24	; 0x07
    2b98:	98 87       	std	Y+8, r25	; 0x08
    2b9a:	a9 87       	std	Y+9, r26	; 0x09
    2b9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba0:	78 85       	ldd	r23, Y+8	; 0x08
    2ba2:	89 85       	ldd	r24, Y+9	; 0x09
    2ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	40 e8       	ldi	r20, 0x80	; 128
    2bac:	5f e3       	ldi	r21, 0x3F	; 63
    2bae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bb2:	88 23       	and	r24, r24
    2bb4:	2c f4       	brge	.+10     	; 0x2bc0 <H_PB_void_read+0x218>
		__ticks = 1;
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	9e 83       	std	Y+6, r25	; 0x06
    2bbc:	8d 83       	std	Y+5, r24	; 0x05
    2bbe:	3f c0       	rjmp	.+126    	; 0x2c3e <H_PB_void_read+0x296>
	else if (__tmp > 65535)
    2bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc2:	78 85       	ldd	r23, Y+8	; 0x08
    2bc4:	89 85       	ldd	r24, Y+9	; 0x09
    2bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	3f ef       	ldi	r19, 0xFF	; 255
    2bcc:	4f e7       	ldi	r20, 0x7F	; 127
    2bce:	57 e4       	ldi	r21, 0x47	; 71
    2bd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bd4:	18 16       	cp	r1, r24
    2bd6:	4c f5       	brge	.+82     	; 0x2c2a <H_PB_void_read+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e2       	ldi	r20, 0x20	; 32
    2be6:	51 e4       	ldi	r21, 0x41	; 65
    2be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	bc 01       	movw	r22, r24
    2bf2:	cd 01       	movw	r24, r26
    2bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	9e 83       	std	Y+6, r25	; 0x06
    2bfe:	8d 83       	std	Y+5, r24	; 0x05
    2c00:	0f c0       	rjmp	.+30     	; 0x2c20 <H_PB_void_read+0x278>
    2c02:	88 e2       	ldi	r24, 0x28	; 40
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	9c 83       	std	Y+4, r25	; 0x04
    2c08:	8b 83       	std	Y+3, r24	; 0x03
    2c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <H_PB_void_read+0x266>
    2c12:	9c 83       	std	Y+4, r25	; 0x04
    2c14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c16:	8d 81       	ldd	r24, Y+5	; 0x05
    2c18:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	9e 83       	std	Y+6, r25	; 0x06
    2c1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c20:	8d 81       	ldd	r24, Y+5	; 0x05
    2c22:	9e 81       	ldd	r25, Y+6	; 0x06
    2c24:	00 97       	sbiw	r24, 0x00	; 0
    2c26:	69 f7       	brne	.-38     	; 0x2c02 <H_PB_void_read+0x25a>
    2c28:	14 c0       	rjmp	.+40     	; 0x2c52 <H_PB_void_read+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2c:	78 85       	ldd	r23, Y+8	; 0x08
    2c2e:	89 85       	ldd	r24, Y+9	; 0x09
    2c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	9e 83       	std	Y+6, r25	; 0x06
    2c3c:	8d 83       	std	Y+5, r24	; 0x05
    2c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c40:	9e 81       	ldd	r25, Y+6	; 0x06
    2c42:	9a 83       	std	Y+2, r25	; 0x02
    2c44:	89 83       	std	Y+1, r24	; 0x01
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	f1 f7       	brne	.-4      	; 0x2c4a <H_PB_void_read+0x2a2>
    2c4e:	9a 83       	std	Y+2, r25	; 0x02
    2c50:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(200);

				M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    2c52:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c54:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c56:	81 81       	ldd	r24, Z+1	; 0x01
    2c58:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c5a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c5c:	92 81       	ldd	r25, Z+2	; 0x02
    2c5e:	9e 01       	movw	r18, r28
    2c60:	20 5e       	subi	r18, 0xE0	; 224
    2c62:	3f 4f       	sbci	r19, 0xFF	; 255
    2c64:	69 2f       	mov	r22, r25
    2c66:	a9 01       	movw	r20, r18
    2c68:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <M_DIO_void_getPinValue>
				if (read==PRESSED_ACTIVE_LOW)
    2c6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c6e:	88 23       	and	r24, r24
    2c70:	a1 f4       	brne	.+40     	; 0x2c9a <H_PB_void_read+0x2f2>
    2c72:	0d c0       	rjmp	.+26     	; 0x2c8e <H_PB_void_read+0x2e6>
				{
					while(read==PRESSED_ACTIVE_LOW)
					{
						M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    2c74:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c76:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c78:	81 81       	ldd	r24, Z+1	; 0x01
    2c7a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c7c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c7e:	92 81       	ldd	r25, Z+2	; 0x02
    2c80:	9e 01       	movw	r18, r28
    2c82:	20 5e       	subi	r18, 0xE0	; 224
    2c84:	3f 4f       	sbci	r19, 0xFF	; 255
    2c86:	69 2f       	mov	r22, r25
    2c88:	a9 01       	movw	r20, r18
    2c8a:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <M_DIO_void_getPinValue>
				_delay_ms(200);

				M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
				if (read==PRESSED_ACTIVE_LOW)
				{
					while(read==PRESSED_ACTIVE_LOW)
    2c8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c90:	88 23       	and	r24, r24
    2c92:	81 f3       	breq	.-32     	; 0x2c74 <H_PB_void_read+0x2cc>
					{
						M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
					}
					*pvalue=PRESSED_ACTIVE_LOW;
    2c94:	e8 a1       	ldd	r30, Y+32	; 0x20
    2c96:	f9 a1       	ldd	r31, Y+33	; 0x21
    2c98:	10 82       	st	Z, r1
				}

			}
		}
	}
}
    2c9a:	a1 96       	adiw	r28, 0x21	; 33
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	cd bf       	out	0x3d, r28	; 61
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	08 95       	ret

00002cac <H_Led_void_ledInit>:
#include "LED_priv.h"
#include"LED_config.h"
#include"LED_int.h"

void  H_Led_void_ledInit(u8 LedID)
{
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	00 d0       	rcall	.+0      	; 0x2cb2 <H_Led_void_ledInit+0x6>
    2cb2:	0f 92       	push	r0
    2cb4:	cd b7       	in	r28, 0x3d	; 61
    2cb6:	de b7       	in	r29, 0x3e	; 62
    2cb8:	89 83       	std	Y+1, r24	; 0x01
	switch (LedID)
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	28 2f       	mov	r18, r24
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	3b 83       	std	Y+3, r19	; 0x03
    2cc2:	2a 83       	std	Y+2, r18	; 0x02
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc8:	81 30       	cpi	r24, 0x01	; 1
    2cca:	91 05       	cpc	r25, r1
    2ccc:	79 f0       	breq	.+30     	; 0x2cec <H_Led_void_ledInit+0x40>
    2cce:	2a 81       	ldd	r18, Y+2	; 0x02
    2cd0:	3b 81       	ldd	r19, Y+3	; 0x03
    2cd2:	22 30       	cpi	r18, 0x02	; 2
    2cd4:	31 05       	cpc	r19, r1
    2cd6:	81 f0       	breq	.+32     	; 0x2cf8 <H_Led_void_ledInit+0x4c>
    2cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cda:	9b 81       	ldd	r25, Y+3	; 0x03
    2cdc:	00 97       	sbiw	r24, 0x00	; 0
    2cde:	89 f4       	brne	.+34     	; 0x2d02 <H_Led_void_ledInit+0x56>
	{
	case RED_LED :
			M_DIO_void_setPinDir(LED_RED_PORT,  LED_RED_PIN , OUT);
    2ce0:	82 e0       	ldi	r24, 0x02	; 2
    2ce2:	60 e0       	ldi	r22, 0x00	; 0
    2ce4:	41 e0       	ldi	r20, 0x01	; 1
    2ce6:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
    2cea:	0b c0       	rjmp	.+22     	; 0x2d02 <H_Led_void_ledInit+0x56>
		break;
	case GRN_LED :
			M_DIO_void_setPinDir(LED_GRN_PORT,  LED_GRN_PIN , OUT);
    2cec:	82 e0       	ldi	r24, 0x02	; 2
    2cee:	62 e0       	ldi	r22, 0x02	; 2
    2cf0:	41 e0       	ldi	r20, 0x01	; 1
    2cf2:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
    2cf6:	05 c0       	rjmp	.+10     	; 0x2d02 <H_Led_void_ledInit+0x56>
			break;
	case BLU_LED :
			M_DIO_void_setPinDir(LED_BLU_PORT,  LED_BLU_PIN , OUT);
    2cf8:	82 e0       	ldi	r24, 0x02	; 2
    2cfa:	61 e0       	ldi	r22, 0x01	; 1
    2cfc:	41 e0       	ldi	r20, 0x01	; 1
    2cfe:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
			break;
	}
}
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	cf 91       	pop	r28
    2d0a:	df 91       	pop	r29
    2d0c:	08 95       	ret

00002d0e <H_Led_void_setON>:


void  H_Led_void_setON(u8 LedID)
{
    2d0e:	df 93       	push	r29
    2d10:	cf 93       	push	r28
    2d12:	00 d0       	rcall	.+0      	; 0x2d14 <H_Led_void_setON+0x6>
    2d14:	0f 92       	push	r0
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
    2d1a:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	28 2f       	mov	r18, r24
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	3b 83       	std	Y+3, r19	; 0x03
    2d24:	2a 83       	std	Y+2, r18	; 0x02
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2a:	81 30       	cpi	r24, 0x01	; 1
    2d2c:	91 05       	cpc	r25, r1
    2d2e:	79 f0       	breq	.+30     	; 0x2d4e <H_Led_void_setON+0x40>
    2d30:	2a 81       	ldd	r18, Y+2	; 0x02
    2d32:	3b 81       	ldd	r19, Y+3	; 0x03
    2d34:	22 30       	cpi	r18, 0x02	; 2
    2d36:	31 05       	cpc	r19, r1
    2d38:	81 f0       	breq	.+32     	; 0x2d5a <H_Led_void_setON+0x4c>
    2d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3e:	00 97       	sbiw	r24, 0x00	; 0
    2d40:	89 f4       	brne	.+34     	; 0x2d64 <H_Led_void_setON+0x56>
	{
	case RED_LED :
#if (LED_RED_DIRECTION == LED_FORWARD )
		M_DIO_void_setPinValue(LED_RED_PORT,LED_RED_PIN,HIGH);
    2d42:	82 e0       	ldi	r24, 0x02	; 2
    2d44:	60 e0       	ldi	r22, 0x00	; 0
    2d46:	41 e0       	ldi	r20, 0x01	; 1
    2d48:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    2d4c:	0b c0       	rjmp	.+22     	; 0x2d64 <H_Led_void_setON+0x56>
#endif
		break;

	case GRN_LED :
#if (LED_GRN_DIRECTION == LED_FORWARD )
		M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
    2d4e:	82 e0       	ldi	r24, 0x02	; 2
    2d50:	62 e0       	ldi	r22, 0x02	; 2
    2d52:	41 e0       	ldi	r20, 0x01	; 1
    2d54:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    2d58:	05 c0       	rjmp	.+10     	; 0x2d64 <H_Led_void_setON+0x56>
		M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
#endif
		break;
	case BLU_LED :
	#if (LED_BLU_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
    2d5a:	82 e0       	ldi	r24, 0x02	; 2
    2d5c:	61 e0       	ldi	r22, 0x01	; 1
    2d5e:	41 e0       	ldi	r20, 0x01	; 1
    2d60:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
			break;



	}
}
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	0f 90       	pop	r0
    2d6a:	cf 91       	pop	r28
    2d6c:	df 91       	pop	r29
    2d6e:	08 95       	ret

00002d70 <H_Led_void_setOFF>:
void  H_Led_void_setOFF(u8 LedID)
{
    2d70:	df 93       	push	r29
    2d72:	cf 93       	push	r28
    2d74:	00 d0       	rcall	.+0      	; 0x2d76 <H_Led_void_setOFF+0x6>
    2d76:	0f 92       	push	r0
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	28 2f       	mov	r18, r24
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	3b 83       	std	Y+3, r19	; 0x03
    2d86:	2a 83       	std	Y+2, r18	; 0x02
    2d88:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8c:	81 30       	cpi	r24, 0x01	; 1
    2d8e:	91 05       	cpc	r25, r1
    2d90:	79 f0       	breq	.+30     	; 0x2db0 <H_Led_void_setOFF+0x40>
    2d92:	2a 81       	ldd	r18, Y+2	; 0x02
    2d94:	3b 81       	ldd	r19, Y+3	; 0x03
    2d96:	22 30       	cpi	r18, 0x02	; 2
    2d98:	31 05       	cpc	r19, r1
    2d9a:	81 f0       	breq	.+32     	; 0x2dbc <H_Led_void_setOFF+0x4c>
    2d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	89 f4       	brne	.+34     	; 0x2dc6 <H_Led_void_setOFF+0x56>
		{
		case RED_LED :
	#if (LED_RED_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_RED_PORT,LED_RED_PIN,LOW);
    2da4:	82 e0       	ldi	r24, 0x02	; 2
    2da6:	60 e0       	ldi	r22, 0x00	; 0
    2da8:	40 e0       	ldi	r20, 0x00	; 0
    2daa:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    2dae:	0b c0       	rjmp	.+22     	; 0x2dc6 <H_Led_void_setOFF+0x56>
	#endif
			break;

		case GRN_LED :
	#if (LED_GRN_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
    2db0:	82 e0       	ldi	r24, 0x02	; 2
    2db2:	62 e0       	ldi	r22, 0x02	; 2
    2db4:	40 e0       	ldi	r20, 0x00	; 0
    2db6:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    2dba:	05 c0       	rjmp	.+10     	; 0x2dc6 <H_Led_void_setOFF+0x56>
			M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
	#endif
			break;
		case BLU_LED :
		#if (LED_BLU_DIRECTION == LED_FORWARD )
				M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,LOW);
    2dbc:	82 e0       	ldi	r24, 0x02	; 2
    2dbe:	61 e0       	ldi	r22, 0x01	; 1
    2dc0:	40 e0       	ldi	r20, 0x00	; 0
    2dc2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
				M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
		#endif
				break;

		}
}
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <H_Led_void_toggle>:

void  H_Led_void_toggle(u8 LedID)
{
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	00 d0       	rcall	.+0      	; 0x2dd8 <H_Led_void_toggle+0x6>
    2dd8:	0f 92       	push	r0
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	89 83       	std	Y+1, r24	; 0x01
	switch (LedID)
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	28 2f       	mov	r18, r24
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	3b 83       	std	Y+3, r19	; 0x03
    2de8:	2a 83       	std	Y+2, r18	; 0x02
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	9b 81       	ldd	r25, Y+3	; 0x03
    2dee:	81 30       	cpi	r24, 0x01	; 1
    2df0:	91 05       	cpc	r25, r1
    2df2:	71 f0       	breq	.+28     	; 0x2e10 <H_Led_void_toggle+0x3e>
    2df4:	2a 81       	ldd	r18, Y+2	; 0x02
    2df6:	3b 81       	ldd	r19, Y+3	; 0x03
    2df8:	22 30       	cpi	r18, 0x02	; 2
    2dfa:	31 05       	cpc	r19, r1
    2dfc:	71 f0       	breq	.+28     	; 0x2e1a <H_Led_void_toggle+0x48>
    2dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2e00:	9b 81       	ldd	r25, Y+3	; 0x03
    2e02:	00 97       	sbiw	r24, 0x00	; 0
    2e04:	71 f4       	brne	.+28     	; 0x2e22 <H_Led_void_toggle+0x50>
		{
		case RED_LED :
			 M_DIO_void_TogPinValue(LED_RED_PORT,LED_RED_PIN);
    2e06:	82 e0       	ldi	r24, 0x02	; 2
    2e08:	60 e0       	ldi	r22, 0x00	; 0
    2e0a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <M_DIO_void_TogPinValue>
    2e0e:	09 c0       	rjmp	.+18     	; 0x2e22 <H_Led_void_toggle+0x50>

			break;
		case GRN_LED :
			 M_DIO_void_TogPinValue(LED_GRN_PORT, LED_GRN_PIN);
    2e10:	82 e0       	ldi	r24, 0x02	; 2
    2e12:	62 e0       	ldi	r22, 0x02	; 2
    2e14:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <M_DIO_void_TogPinValue>
    2e18:	04 c0       	rjmp	.+8      	; 0x2e22 <H_Led_void_toggle+0x50>

				break;
		case BLU_LED :
			 M_DIO_void_TogPinValue(LED_BLU_PORT,LED_BLU_PIN);
    2e1a:	82 e0       	ldi	r24, 0x02	; 2
    2e1c:	61 e0       	ldi	r22, 0x01	; 1
    2e1e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <M_DIO_void_TogPinValue>

				break;
		}
}
    2e22:	0f 90       	pop	r0
    2e24:	0f 90       	pop	r0
    2e26:	0f 90       	pop	r0
    2e28:	cf 91       	pop	r28
    2e2a:	df 91       	pop	r29
    2e2c:	08 95       	ret

00002e2e <Animation1>:

void Animation1()
{
    2e2e:	0f 93       	push	r16
    2e30:	1f 93       	push	r17
    2e32:	df 93       	push	r29
    2e34:	cf 93       	push	r28
    2e36:	cd b7       	in	r28, 0x3d	; 61
    2e38:	de b7       	in	r29, 0x3e	; 62
    2e3a:	c4 55       	subi	r28, 0x54	; 84
    2e3c:	d0 40       	sbci	r29, 0x00	; 0
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	f8 94       	cli
    2e42:	de bf       	out	0x3e, r29	; 62
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <H_Led_void_setON>
	H_Led_void_setON(BLU_LED);
    2e4e:	82 e0       	ldi	r24, 0x02	; 2
    2e50:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <H_Led_void_setON>
    2e54:	fe 01       	movw	r30, r28
    2e56:	ef 5a       	subi	r30, 0xAF	; 175
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	aa ef       	ldi	r26, 0xFA	; 250
    2e60:	b3 e4       	ldi	r27, 0x43	; 67
    2e62:	80 83       	st	Z, r24
    2e64:	91 83       	std	Z+1, r25	; 0x01
    2e66:	a2 83       	std	Z+2, r26	; 0x02
    2e68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6a:	8e 01       	movw	r16, r28
    2e6c:	03 5b       	subi	r16, 0xB3	; 179
    2e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e70:	fe 01       	movw	r30, r28
    2e72:	ef 5a       	subi	r30, 0xAF	; 175
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	60 81       	ld	r22, Z
    2e78:	71 81       	ldd	r23, Z+1	; 0x01
    2e7a:	82 81       	ldd	r24, Z+2	; 0x02
    2e7c:	93 81       	ldd	r25, Z+3	; 0x03
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	48 ec       	ldi	r20, 0xC8	; 200
    2e84:	53 e4       	ldi	r21, 0x43	; 67
    2e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	f8 01       	movw	r30, r16
    2e90:	80 83       	st	Z, r24
    2e92:	91 83       	std	Z+1, r25	; 0x01
    2e94:	a2 83       	std	Z+2, r26	; 0x02
    2e96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e98:	fe 01       	movw	r30, r28
    2e9a:	e3 5b       	subi	r30, 0xB3	; 179
    2e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9e:	60 81       	ld	r22, Z
    2ea0:	71 81       	ldd	r23, Z+1	; 0x01
    2ea2:	82 81       	ldd	r24, Z+2	; 0x02
    2ea4:	93 81       	ldd	r25, Z+3	; 0x03
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	40 e8       	ldi	r20, 0x80	; 128
    2eac:	5f e3       	ldi	r21, 0x3F	; 63
    2eae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eb2:	88 23       	and	r24, r24
    2eb4:	44 f4       	brge	.+16     	; 0x2ec6 <Animation1+0x98>
		__ticks = 1;
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	e5 5b       	subi	r30, 0xB5	; 181
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	91 83       	std	Z+1, r25	; 0x01
    2ec2:	80 83       	st	Z, r24
    2ec4:	64 c0       	rjmp	.+200    	; 0x2f8e <Animation1+0x160>
	else if (__tmp > 65535)
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	e3 5b       	subi	r30, 0xB3	; 179
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	60 81       	ld	r22, Z
    2ece:	71 81       	ldd	r23, Z+1	; 0x01
    2ed0:	82 81       	ldd	r24, Z+2	; 0x02
    2ed2:	93 81       	ldd	r25, Z+3	; 0x03
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	3f ef       	ldi	r19, 0xFF	; 255
    2ed8:	4f e7       	ldi	r20, 0x7F	; 127
    2eda:	57 e4       	ldi	r21, 0x47	; 71
    2edc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ee0:	18 16       	cp	r1, r24
    2ee2:	0c f0       	brlt	.+2      	; 0x2ee6 <Animation1+0xb8>
    2ee4:	43 c0       	rjmp	.+134    	; 0x2f6c <Animation1+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	ef 5a       	subi	r30, 0xAF	; 175
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	60 81       	ld	r22, Z
    2eee:	71 81       	ldd	r23, Z+1	; 0x01
    2ef0:	82 81       	ldd	r24, Z+2	; 0x02
    2ef2:	93 81       	ldd	r25, Z+3	; 0x03
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	40 e2       	ldi	r20, 0x20	; 32
    2efa:	51 e4       	ldi	r21, 0x41	; 65
    2efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	8e 01       	movw	r16, r28
    2f06:	05 5b       	subi	r16, 0xB5	; 181
    2f08:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0a:	bc 01       	movw	r22, r24
    2f0c:	cd 01       	movw	r24, r26
    2f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	f8 01       	movw	r30, r16
    2f18:	91 83       	std	Z+1, r25	; 0x01
    2f1a:	80 83       	st	Z, r24
    2f1c:	1f c0       	rjmp	.+62     	; 0x2f5c <Animation1+0x12e>
    2f1e:	fe 01       	movw	r30, r28
    2f20:	e7 5b       	subi	r30, 0xB7	; 183
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	88 e2       	ldi	r24, 0x28	; 40
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	91 83       	std	Z+1, r25	; 0x01
    2f2a:	80 83       	st	Z, r24
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	e7 5b       	subi	r30, 0xB7	; 183
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	80 81       	ld	r24, Z
    2f34:	91 81       	ldd	r25, Z+1	; 0x01
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	f1 f7       	brne	.-4      	; 0x2f36 <Animation1+0x108>
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	e7 5b       	subi	r30, 0xB7	; 183
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	91 83       	std	Z+1, r25	; 0x01
    2f42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f44:	de 01       	movw	r26, r28
    2f46:	a5 5b       	subi	r26, 0xB5	; 181
    2f48:	bf 4f       	sbci	r27, 0xFF	; 255
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	e5 5b       	subi	r30, 0xB5	; 181
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	80 81       	ld	r24, Z
    2f52:	91 81       	ldd	r25, Z+1	; 0x01
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	11 96       	adiw	r26, 0x01	; 1
    2f58:	9c 93       	st	X, r25
    2f5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	e5 5b       	subi	r30, 0xB5	; 181
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	80 81       	ld	r24, Z
    2f64:	91 81       	ldd	r25, Z+1	; 0x01
    2f66:	00 97       	sbiw	r24, 0x00	; 0
    2f68:	d1 f6       	brne	.-76     	; 0x2f1e <Animation1+0xf0>
    2f6a:	27 c0       	rjmp	.+78     	; 0x2fba <Animation1+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f6c:	8e 01       	movw	r16, r28
    2f6e:	05 5b       	subi	r16, 0xB5	; 181
    2f70:	1f 4f       	sbci	r17, 0xFF	; 255
    2f72:	fe 01       	movw	r30, r28
    2f74:	e3 5b       	subi	r30, 0xB3	; 179
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	60 81       	ld	r22, Z
    2f7a:	71 81       	ldd	r23, Z+1	; 0x01
    2f7c:	82 81       	ldd	r24, Z+2	; 0x02
    2f7e:	93 81       	ldd	r25, Z+3	; 0x03
    2f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	f8 01       	movw	r30, r16
    2f8a:	91 83       	std	Z+1, r25	; 0x01
    2f8c:	80 83       	st	Z, r24
    2f8e:	de 01       	movw	r26, r28
    2f90:	a9 5b       	subi	r26, 0xB9	; 185
    2f92:	bf 4f       	sbci	r27, 0xFF	; 255
    2f94:	fe 01       	movw	r30, r28
    2f96:	e5 5b       	subi	r30, 0xB5	; 181
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	80 81       	ld	r24, Z
    2f9c:	91 81       	ldd	r25, Z+1	; 0x01
    2f9e:	8d 93       	st	X+, r24
    2fa0:	9c 93       	st	X, r25
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e9 5b       	subi	r30, 0xB9	; 185
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	80 81       	ld	r24, Z
    2faa:	91 81       	ldd	r25, Z+1	; 0x01
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	f1 f7       	brne	.-4      	; 0x2fac <Animation1+0x17e>
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e9 5b       	subi	r30, 0xB9	; 185
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	91 83       	std	Z+1, r25	; 0x01
    2fb8:	80 83       	st	Z, r24
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <H_Led_void_setOFF>
	H_Led_void_setOFF(BLU_LED);
    2fc0:	82 e0       	ldi	r24, 0x02	; 2
    2fc2:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <H_Led_void_setOFF>
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	ed 5b       	subi	r30, 0xBD	; 189
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	aa ef       	ldi	r26, 0xFA	; 250
    2fd2:	b3 e4       	ldi	r27, 0x43	; 67
    2fd4:	80 83       	st	Z, r24
    2fd6:	91 83       	std	Z+1, r25	; 0x01
    2fd8:	a2 83       	std	Z+2, r26	; 0x02
    2fda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fdc:	8e 01       	movw	r16, r28
    2fde:	01 5c       	subi	r16, 0xC1	; 193
    2fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	ed 5b       	subi	r30, 0xBD	; 189
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	60 81       	ld	r22, Z
    2fea:	71 81       	ldd	r23, Z+1	; 0x01
    2fec:	82 81       	ldd	r24, Z+2	; 0x02
    2fee:	93 81       	ldd	r25, Z+3	; 0x03
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	48 ec       	ldi	r20, 0xC8	; 200
    2ff6:	53 e4       	ldi	r21, 0x43	; 67
    2ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	f8 01       	movw	r30, r16
    3002:	80 83       	st	Z, r24
    3004:	91 83       	std	Z+1, r25	; 0x01
    3006:	a2 83       	std	Z+2, r26	; 0x02
    3008:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    300a:	fe 01       	movw	r30, r28
    300c:	ff 96       	adiw	r30, 0x3f	; 63
    300e:	60 81       	ld	r22, Z
    3010:	71 81       	ldd	r23, Z+1	; 0x01
    3012:	82 81       	ldd	r24, Z+2	; 0x02
    3014:	93 81       	ldd	r25, Z+3	; 0x03
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	40 e8       	ldi	r20, 0x80	; 128
    301c:	5f e3       	ldi	r21, 0x3F	; 63
    301e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3022:	88 23       	and	r24, r24
    3024:	2c f4       	brge	.+10     	; 0x3030 <Animation1+0x202>
		__ticks = 1;
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	9e af       	std	Y+62, r25	; 0x3e
    302c:	8d af       	std	Y+61, r24	; 0x3d
    302e:	46 c0       	rjmp	.+140    	; 0x30bc <Animation1+0x28e>
	else if (__tmp > 65535)
    3030:	fe 01       	movw	r30, r28
    3032:	ff 96       	adiw	r30, 0x3f	; 63
    3034:	60 81       	ld	r22, Z
    3036:	71 81       	ldd	r23, Z+1	; 0x01
    3038:	82 81       	ldd	r24, Z+2	; 0x02
    303a:	93 81       	ldd	r25, Z+3	; 0x03
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	3f ef       	ldi	r19, 0xFF	; 255
    3040:	4f e7       	ldi	r20, 0x7F	; 127
    3042:	57 e4       	ldi	r21, 0x47	; 71
    3044:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3048:	18 16       	cp	r1, r24
    304a:	64 f5       	brge	.+88     	; 0x30a4 <Animation1+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304c:	fe 01       	movw	r30, r28
    304e:	ed 5b       	subi	r30, 0xBD	; 189
    3050:	ff 4f       	sbci	r31, 0xFF	; 255
    3052:	60 81       	ld	r22, Z
    3054:	71 81       	ldd	r23, Z+1	; 0x01
    3056:	82 81       	ldd	r24, Z+2	; 0x02
    3058:	93 81       	ldd	r25, Z+3	; 0x03
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e2       	ldi	r20, 0x20	; 32
    3060:	51 e4       	ldi	r21, 0x41	; 65
    3062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	bc 01       	movw	r22, r24
    306c:	cd 01       	movw	r24, r26
    306e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	9e af       	std	Y+62, r25	; 0x3e
    3078:	8d af       	std	Y+61, r24	; 0x3d
    307a:	0f c0       	rjmp	.+30     	; 0x309a <Animation1+0x26c>
    307c:	88 e2       	ldi	r24, 0x28	; 40
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	9c af       	std	Y+60, r25	; 0x3c
    3082:	8b af       	std	Y+59, r24	; 0x3b
    3084:	8b ad       	ldd	r24, Y+59	; 0x3b
    3086:	9c ad       	ldd	r25, Y+60	; 0x3c
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	f1 f7       	brne	.-4      	; 0x3088 <Animation1+0x25a>
    308c:	9c af       	std	Y+60, r25	; 0x3c
    308e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3090:	8d ad       	ldd	r24, Y+61	; 0x3d
    3092:	9e ad       	ldd	r25, Y+62	; 0x3e
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	9e af       	std	Y+62, r25	; 0x3e
    3098:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309a:	8d ad       	ldd	r24, Y+61	; 0x3d
    309c:	9e ad       	ldd	r25, Y+62	; 0x3e
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	69 f7       	brne	.-38     	; 0x307c <Animation1+0x24e>
    30a2:	16 c0       	rjmp	.+44     	; 0x30d0 <Animation1+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a4:	fe 01       	movw	r30, r28
    30a6:	ff 96       	adiw	r30, 0x3f	; 63
    30a8:	60 81       	ld	r22, Z
    30aa:	71 81       	ldd	r23, Z+1	; 0x01
    30ac:	82 81       	ldd	r24, Z+2	; 0x02
    30ae:	93 81       	ldd	r25, Z+3	; 0x03
    30b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	9e af       	std	Y+62, r25	; 0x3e
    30ba:	8d af       	std	Y+61, r24	; 0x3d
    30bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    30be:	9e ad       	ldd	r25, Y+62	; 0x3e
    30c0:	9a af       	std	Y+58, r25	; 0x3a
    30c2:	89 af       	std	Y+57, r24	; 0x39
    30c4:	89 ad       	ldd	r24, Y+57	; 0x39
    30c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    30c8:	01 97       	sbiw	r24, 0x01	; 1
    30ca:	f1 f7       	brne	.-4      	; 0x30c8 <Animation1+0x29a>
    30cc:	9a af       	std	Y+58, r25	; 0x3a
    30ce:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
    H_Led_void_setON(BLU_LED);
    30d0:	82 e0       	ldi	r24, 0x02	; 2
    30d2:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <H_Led_void_setON>
    H_Led_void_setON(GRN_LED);
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <H_Led_void_setON>
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	aa ef       	ldi	r26, 0xFA	; 250
    30e2:	b3 e4       	ldi	r27, 0x43	; 67
    30e4:	8d ab       	std	Y+53, r24	; 0x35
    30e6:	9e ab       	std	Y+54, r25	; 0x36
    30e8:	af ab       	std	Y+55, r26	; 0x37
    30ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ec:	6d a9       	ldd	r22, Y+53	; 0x35
    30ee:	7e a9       	ldd	r23, Y+54	; 0x36
    30f0:	8f a9       	ldd	r24, Y+55	; 0x37
    30f2:	98 ad       	ldd	r25, Y+56	; 0x38
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	48 ec       	ldi	r20, 0xC8	; 200
    30fa:	53 e4       	ldi	r21, 0x43	; 67
    30fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	89 ab       	std	Y+49, r24	; 0x31
    3106:	9a ab       	std	Y+50, r25	; 0x32
    3108:	ab ab       	std	Y+51, r26	; 0x33
    310a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    310c:	69 a9       	ldd	r22, Y+49	; 0x31
    310e:	7a a9       	ldd	r23, Y+50	; 0x32
    3110:	8b a9       	ldd	r24, Y+51	; 0x33
    3112:	9c a9       	ldd	r25, Y+52	; 0x34
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	40 e8       	ldi	r20, 0x80	; 128
    311a:	5f e3       	ldi	r21, 0x3F	; 63
    311c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3120:	88 23       	and	r24, r24
    3122:	2c f4       	brge	.+10     	; 0x312e <Animation1+0x300>
		__ticks = 1;
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	98 ab       	std	Y+48, r25	; 0x30
    312a:	8f a7       	std	Y+47, r24	; 0x2f
    312c:	3f c0       	rjmp	.+126    	; 0x31ac <Animation1+0x37e>
	else if (__tmp > 65535)
    312e:	69 a9       	ldd	r22, Y+49	; 0x31
    3130:	7a a9       	ldd	r23, Y+50	; 0x32
    3132:	8b a9       	ldd	r24, Y+51	; 0x33
    3134:	9c a9       	ldd	r25, Y+52	; 0x34
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	3f ef       	ldi	r19, 0xFF	; 255
    313a:	4f e7       	ldi	r20, 0x7F	; 127
    313c:	57 e4       	ldi	r21, 0x47	; 71
    313e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3142:	18 16       	cp	r1, r24
    3144:	4c f5       	brge	.+82     	; 0x3198 <Animation1+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3146:	6d a9       	ldd	r22, Y+53	; 0x35
    3148:	7e a9       	ldd	r23, Y+54	; 0x36
    314a:	8f a9       	ldd	r24, Y+55	; 0x37
    314c:	98 ad       	ldd	r25, Y+56	; 0x38
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e2       	ldi	r20, 0x20	; 32
    3154:	51 e4       	ldi	r21, 0x41	; 65
    3156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	bc 01       	movw	r22, r24
    3160:	cd 01       	movw	r24, r26
    3162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	98 ab       	std	Y+48, r25	; 0x30
    316c:	8f a7       	std	Y+47, r24	; 0x2f
    316e:	0f c0       	rjmp	.+30     	; 0x318e <Animation1+0x360>
    3170:	88 e2       	ldi	r24, 0x28	; 40
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	9e a7       	std	Y+46, r25	; 0x2e
    3176:	8d a7       	std	Y+45, r24	; 0x2d
    3178:	8d a5       	ldd	r24, Y+45	; 0x2d
    317a:	9e a5       	ldd	r25, Y+46	; 0x2e
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	f1 f7       	brne	.-4      	; 0x317c <Animation1+0x34e>
    3180:	9e a7       	std	Y+46, r25	; 0x2e
    3182:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3184:	8f a5       	ldd	r24, Y+47	; 0x2f
    3186:	98 a9       	ldd	r25, Y+48	; 0x30
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	98 ab       	std	Y+48, r25	; 0x30
    318c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3190:	98 a9       	ldd	r25, Y+48	; 0x30
    3192:	00 97       	sbiw	r24, 0x00	; 0
    3194:	69 f7       	brne	.-38     	; 0x3170 <Animation1+0x342>
    3196:	14 c0       	rjmp	.+40     	; 0x31c0 <Animation1+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3198:	69 a9       	ldd	r22, Y+49	; 0x31
    319a:	7a a9       	ldd	r23, Y+50	; 0x32
    319c:	8b a9       	ldd	r24, Y+51	; 0x33
    319e:	9c a9       	ldd	r25, Y+52	; 0x34
    31a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	98 ab       	std	Y+48, r25	; 0x30
    31aa:	8f a7       	std	Y+47, r24	; 0x2f
    31ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    31ae:	98 a9       	ldd	r25, Y+48	; 0x30
    31b0:	9c a7       	std	Y+44, r25	; 0x2c
    31b2:	8b a7       	std	Y+43, r24	; 0x2b
    31b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    31b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    31b8:	01 97       	sbiw	r24, 0x01	; 1
    31ba:	f1 f7       	brne	.-4      	; 0x31b8 <Animation1+0x38a>
    31bc:	9c a7       	std	Y+44, r25	; 0x2c
    31be:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(500);
    H_Led_void_setOFF(BLU_LED);
    31c0:	82 e0       	ldi	r24, 0x02	; 2
    31c2:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <H_Led_void_setOFF>
    H_Led_void_setOFF(GRN_LED);
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <H_Led_void_setOFF>
    31cc:	80 e0       	ldi	r24, 0x00	; 0
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	aa ef       	ldi	r26, 0xFA	; 250
    31d2:	b3 e4       	ldi	r27, 0x43	; 67
    31d4:	8f a3       	std	Y+39, r24	; 0x27
    31d6:	98 a7       	std	Y+40, r25	; 0x28
    31d8:	a9 a7       	std	Y+41, r26	; 0x29
    31da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31dc:	6f a1       	ldd	r22, Y+39	; 0x27
    31de:	78 a5       	ldd	r23, Y+40	; 0x28
    31e0:	89 a5       	ldd	r24, Y+41	; 0x29
    31e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	48 ec       	ldi	r20, 0xC8	; 200
    31ea:	53 e4       	ldi	r21, 0x43	; 67
    31ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	8b a3       	std	Y+35, r24	; 0x23
    31f6:	9c a3       	std	Y+36, r25	; 0x24
    31f8:	ad a3       	std	Y+37, r26	; 0x25
    31fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31fc:	6b a1       	ldd	r22, Y+35	; 0x23
    31fe:	7c a1       	ldd	r23, Y+36	; 0x24
    3200:	8d a1       	ldd	r24, Y+37	; 0x25
    3202:	9e a1       	ldd	r25, Y+38	; 0x26
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	40 e8       	ldi	r20, 0x80	; 128
    320a:	5f e3       	ldi	r21, 0x3F	; 63
    320c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3210:	88 23       	and	r24, r24
    3212:	2c f4       	brge	.+10     	; 0x321e <Animation1+0x3f0>
		__ticks = 1;
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	9a a3       	std	Y+34, r25	; 0x22
    321a:	89 a3       	std	Y+33, r24	; 0x21
    321c:	3f c0       	rjmp	.+126    	; 0x329c <Animation1+0x46e>
	else if (__tmp > 65535)
    321e:	6b a1       	ldd	r22, Y+35	; 0x23
    3220:	7c a1       	ldd	r23, Y+36	; 0x24
    3222:	8d a1       	ldd	r24, Y+37	; 0x25
    3224:	9e a1       	ldd	r25, Y+38	; 0x26
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	3f ef       	ldi	r19, 0xFF	; 255
    322a:	4f e7       	ldi	r20, 0x7F	; 127
    322c:	57 e4       	ldi	r21, 0x47	; 71
    322e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3232:	18 16       	cp	r1, r24
    3234:	4c f5       	brge	.+82     	; 0x3288 <Animation1+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3236:	6f a1       	ldd	r22, Y+39	; 0x27
    3238:	78 a5       	ldd	r23, Y+40	; 0x28
    323a:	89 a5       	ldd	r24, Y+41	; 0x29
    323c:	9a a5       	ldd	r25, Y+42	; 0x2a
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	40 e2       	ldi	r20, 0x20	; 32
    3244:	51 e4       	ldi	r21, 0x41	; 65
    3246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	bc 01       	movw	r22, r24
    3250:	cd 01       	movw	r24, r26
    3252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	9a a3       	std	Y+34, r25	; 0x22
    325c:	89 a3       	std	Y+33, r24	; 0x21
    325e:	0f c0       	rjmp	.+30     	; 0x327e <Animation1+0x450>
    3260:	88 e2       	ldi	r24, 0x28	; 40
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	98 a3       	std	Y+32, r25	; 0x20
    3266:	8f 8f       	std	Y+31, r24	; 0x1f
    3268:	8f 8d       	ldd	r24, Y+31	; 0x1f
    326a:	98 a1       	ldd	r25, Y+32	; 0x20
    326c:	01 97       	sbiw	r24, 0x01	; 1
    326e:	f1 f7       	brne	.-4      	; 0x326c <Animation1+0x43e>
    3270:	98 a3       	std	Y+32, r25	; 0x20
    3272:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3274:	89 a1       	ldd	r24, Y+33	; 0x21
    3276:	9a a1       	ldd	r25, Y+34	; 0x22
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	9a a3       	std	Y+34, r25	; 0x22
    327c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327e:	89 a1       	ldd	r24, Y+33	; 0x21
    3280:	9a a1       	ldd	r25, Y+34	; 0x22
    3282:	00 97       	sbiw	r24, 0x00	; 0
    3284:	69 f7       	brne	.-38     	; 0x3260 <Animation1+0x432>
    3286:	14 c0       	rjmp	.+40     	; 0x32b0 <Animation1+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3288:	6b a1       	ldd	r22, Y+35	; 0x23
    328a:	7c a1       	ldd	r23, Y+36	; 0x24
    328c:	8d a1       	ldd	r24, Y+37	; 0x25
    328e:	9e a1       	ldd	r25, Y+38	; 0x26
    3290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	9a a3       	std	Y+34, r25	; 0x22
    329a:	89 a3       	std	Y+33, r24	; 0x21
    329c:	89 a1       	ldd	r24, Y+33	; 0x21
    329e:	9a a1       	ldd	r25, Y+34	; 0x22
    32a0:	9e 8f       	std	Y+30, r25	; 0x1e
    32a2:	8d 8f       	std	Y+29, r24	; 0x1d
    32a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	f1 f7       	brne	.-4      	; 0x32a8 <Animation1+0x47a>
    32ac:	9e 8f       	std	Y+30, r25	; 0x1e
    32ae:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(500);
    H_Led_void_setON(RED_LED);
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <H_Led_void_setON>
    H_Led_void_setON(GRN_LED);
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <H_Led_void_setON>
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	aa ef       	ldi	r26, 0xFA	; 250
    32c2:	b3 e4       	ldi	r27, 0x43	; 67
    32c4:	89 8f       	std	Y+25, r24	; 0x19
    32c6:	9a 8f       	std	Y+26, r25	; 0x1a
    32c8:	ab 8f       	std	Y+27, r26	; 0x1b
    32ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32cc:	69 8d       	ldd	r22, Y+25	; 0x19
    32ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	48 ec       	ldi	r20, 0xC8	; 200
    32da:	53 e4       	ldi	r21, 0x43	; 67
    32dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	8d 8b       	std	Y+21, r24	; 0x15
    32e6:	9e 8b       	std	Y+22, r25	; 0x16
    32e8:	af 8b       	std	Y+23, r26	; 0x17
    32ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32ec:	6d 89       	ldd	r22, Y+21	; 0x15
    32ee:	7e 89       	ldd	r23, Y+22	; 0x16
    32f0:	8f 89       	ldd	r24, Y+23	; 0x17
    32f2:	98 8d       	ldd	r25, Y+24	; 0x18
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	40 e8       	ldi	r20, 0x80	; 128
    32fa:	5f e3       	ldi	r21, 0x3F	; 63
    32fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3300:	88 23       	and	r24, r24
    3302:	2c f4       	brge	.+10     	; 0x330e <Animation1+0x4e0>
		__ticks = 1;
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	9c 8b       	std	Y+20, r25	; 0x14
    330a:	8b 8b       	std	Y+19, r24	; 0x13
    330c:	3f c0       	rjmp	.+126    	; 0x338c <Animation1+0x55e>
	else if (__tmp > 65535)
    330e:	6d 89       	ldd	r22, Y+21	; 0x15
    3310:	7e 89       	ldd	r23, Y+22	; 0x16
    3312:	8f 89       	ldd	r24, Y+23	; 0x17
    3314:	98 8d       	ldd	r25, Y+24	; 0x18
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	3f ef       	ldi	r19, 0xFF	; 255
    331a:	4f e7       	ldi	r20, 0x7F	; 127
    331c:	57 e4       	ldi	r21, 0x47	; 71
    331e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3322:	18 16       	cp	r1, r24
    3324:	4c f5       	brge	.+82     	; 0x3378 <Animation1+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3326:	69 8d       	ldd	r22, Y+25	; 0x19
    3328:	7a 8d       	ldd	r23, Y+26	; 0x1a
    332a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    332c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	40 e2       	ldi	r20, 0x20	; 32
    3334:	51 e4       	ldi	r21, 0x41	; 65
    3336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	bc 01       	movw	r22, r24
    3340:	cd 01       	movw	r24, r26
    3342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	9c 8b       	std	Y+20, r25	; 0x14
    334c:	8b 8b       	std	Y+19, r24	; 0x13
    334e:	0f c0       	rjmp	.+30     	; 0x336e <Animation1+0x540>
    3350:	88 e2       	ldi	r24, 0x28	; 40
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	9a 8b       	std	Y+18, r25	; 0x12
    3356:	89 8b       	std	Y+17, r24	; 0x11
    3358:	89 89       	ldd	r24, Y+17	; 0x11
    335a:	9a 89       	ldd	r25, Y+18	; 0x12
    335c:	01 97       	sbiw	r24, 0x01	; 1
    335e:	f1 f7       	brne	.-4      	; 0x335c <Animation1+0x52e>
    3360:	9a 8b       	std	Y+18, r25	; 0x12
    3362:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3364:	8b 89       	ldd	r24, Y+19	; 0x13
    3366:	9c 89       	ldd	r25, Y+20	; 0x14
    3368:	01 97       	sbiw	r24, 0x01	; 1
    336a:	9c 8b       	std	Y+20, r25	; 0x14
    336c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    336e:	8b 89       	ldd	r24, Y+19	; 0x13
    3370:	9c 89       	ldd	r25, Y+20	; 0x14
    3372:	00 97       	sbiw	r24, 0x00	; 0
    3374:	69 f7       	brne	.-38     	; 0x3350 <Animation1+0x522>
    3376:	14 c0       	rjmp	.+40     	; 0x33a0 <Animation1+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3378:	6d 89       	ldd	r22, Y+21	; 0x15
    337a:	7e 89       	ldd	r23, Y+22	; 0x16
    337c:	8f 89       	ldd	r24, Y+23	; 0x17
    337e:	98 8d       	ldd	r25, Y+24	; 0x18
    3380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	9c 8b       	std	Y+20, r25	; 0x14
    338a:	8b 8b       	std	Y+19, r24	; 0x13
    338c:	8b 89       	ldd	r24, Y+19	; 0x13
    338e:	9c 89       	ldd	r25, Y+20	; 0x14
    3390:	98 8b       	std	Y+16, r25	; 0x10
    3392:	8f 87       	std	Y+15, r24	; 0x0f
    3394:	8f 85       	ldd	r24, Y+15	; 0x0f
    3396:	98 89       	ldd	r25, Y+16	; 0x10
    3398:	01 97       	sbiw	r24, 0x01	; 1
    339a:	f1 f7       	brne	.-4      	; 0x3398 <Animation1+0x56a>
    339c:	98 8b       	std	Y+16, r25	; 0x10
    339e:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(500);
     H_Led_void_setOFF(RED_LED);
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <H_Led_void_setOFF>
     H_Led_void_setOFF(GRN_LED);
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <H_Led_void_setOFF>
    33ac:	80 e0       	ldi	r24, 0x00	; 0
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	aa ef       	ldi	r26, 0xFA	; 250
    33b2:	b3 e4       	ldi	r27, 0x43	; 67
    33b4:	8b 87       	std	Y+11, r24	; 0x0b
    33b6:	9c 87       	std	Y+12, r25	; 0x0c
    33b8:	ad 87       	std	Y+13, r26	; 0x0d
    33ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    33be:	7c 85       	ldd	r23, Y+12	; 0x0c
    33c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	48 ec       	ldi	r20, 0xC8	; 200
    33ca:	53 e4       	ldi	r21, 0x43	; 67
    33cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	8f 83       	std	Y+7, r24	; 0x07
    33d6:	98 87       	std	Y+8, r25	; 0x08
    33d8:	a9 87       	std	Y+9, r26	; 0x09
    33da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33dc:	6f 81       	ldd	r22, Y+7	; 0x07
    33de:	78 85       	ldd	r23, Y+8	; 0x08
    33e0:	89 85       	ldd	r24, Y+9	; 0x09
    33e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	40 e8       	ldi	r20, 0x80	; 128
    33ea:	5f e3       	ldi	r21, 0x3F	; 63
    33ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33f0:	88 23       	and	r24, r24
    33f2:	2c f4       	brge	.+10     	; 0x33fe <Animation1+0x5d0>
		__ticks = 1;
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	9e 83       	std	Y+6, r25	; 0x06
    33fa:	8d 83       	std	Y+5, r24	; 0x05
    33fc:	3f c0       	rjmp	.+126    	; 0x347c <Animation1+0x64e>
	else if (__tmp > 65535)
    33fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3400:	78 85       	ldd	r23, Y+8	; 0x08
    3402:	89 85       	ldd	r24, Y+9	; 0x09
    3404:	9a 85       	ldd	r25, Y+10	; 0x0a
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	3f ef       	ldi	r19, 0xFF	; 255
    340a:	4f e7       	ldi	r20, 0x7F	; 127
    340c:	57 e4       	ldi	r21, 0x47	; 71
    340e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3412:	18 16       	cp	r1, r24
    3414:	4c f5       	brge	.+82     	; 0x3468 <Animation1+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3416:	6b 85       	ldd	r22, Y+11	; 0x0b
    3418:	7c 85       	ldd	r23, Y+12	; 0x0c
    341a:	8d 85       	ldd	r24, Y+13	; 0x0d
    341c:	9e 85       	ldd	r25, Y+14	; 0x0e
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	40 e2       	ldi	r20, 0x20	; 32
    3424:	51 e4       	ldi	r21, 0x41	; 65
    3426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	bc 01       	movw	r22, r24
    3430:	cd 01       	movw	r24, r26
    3432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	9e 83       	std	Y+6, r25	; 0x06
    343c:	8d 83       	std	Y+5, r24	; 0x05
    343e:	0f c0       	rjmp	.+30     	; 0x345e <Animation1+0x630>
    3440:	88 e2       	ldi	r24, 0x28	; 40
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	9c 83       	std	Y+4, r25	; 0x04
    3446:	8b 83       	std	Y+3, r24	; 0x03
    3448:	8b 81       	ldd	r24, Y+3	; 0x03
    344a:	9c 81       	ldd	r25, Y+4	; 0x04
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	f1 f7       	brne	.-4      	; 0x344c <Animation1+0x61e>
    3450:	9c 83       	std	Y+4, r25	; 0x04
    3452:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3454:	8d 81       	ldd	r24, Y+5	; 0x05
    3456:	9e 81       	ldd	r25, Y+6	; 0x06
    3458:	01 97       	sbiw	r24, 0x01	; 1
    345a:	9e 83       	std	Y+6, r25	; 0x06
    345c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    345e:	8d 81       	ldd	r24, Y+5	; 0x05
    3460:	9e 81       	ldd	r25, Y+6	; 0x06
    3462:	00 97       	sbiw	r24, 0x00	; 0
    3464:	69 f7       	brne	.-38     	; 0x3440 <Animation1+0x612>
    3466:	14 c0       	rjmp	.+40     	; 0x3490 <Animation1+0x662>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3468:	6f 81       	ldd	r22, Y+7	; 0x07
    346a:	78 85       	ldd	r23, Y+8	; 0x08
    346c:	89 85       	ldd	r24, Y+9	; 0x09
    346e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	9e 83       	std	Y+6, r25	; 0x06
    347a:	8d 83       	std	Y+5, r24	; 0x05
    347c:	8d 81       	ldd	r24, Y+5	; 0x05
    347e:	9e 81       	ldd	r25, Y+6	; 0x06
    3480:	9a 83       	std	Y+2, r25	; 0x02
    3482:	89 83       	std	Y+1, r24	; 0x01
    3484:	89 81       	ldd	r24, Y+1	; 0x01
    3486:	9a 81       	ldd	r25, Y+2	; 0x02
    3488:	01 97       	sbiw	r24, 0x01	; 1
    348a:	f1 f7       	brne	.-4      	; 0x3488 <Animation1+0x65a>
    348c:	9a 83       	std	Y+2, r25	; 0x02
    348e:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(500);

}
    3490:	cc 5a       	subi	r28, 0xAC	; 172
    3492:	df 4f       	sbci	r29, 0xFF	; 255
    3494:	0f b6       	in	r0, 0x3f	; 63
    3496:	f8 94       	cli
    3498:	de bf       	out	0x3e, r29	; 62
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	cd bf       	out	0x3d, r28	; 61
    349e:	cf 91       	pop	r28
    34a0:	df 91       	pop	r29
    34a2:	1f 91       	pop	r17
    34a4:	0f 91       	pop	r16
    34a6:	08 95       	ret

000034a8 <Animation2>:
void Animation2()
{
    34a8:	0f 93       	push	r16
    34aa:	1f 93       	push	r17
    34ac:	df 93       	push	r29
    34ae:	cf 93       	push	r28
    34b0:	cd b7       	in	r28, 0x3d	; 61
    34b2:	de b7       	in	r29, 0x3e	; 62
    34b4:	c4 55       	subi	r28, 0x54	; 84
    34b6:	d0 40       	sbci	r29, 0x00	; 0
    34b8:	0f b6       	in	r0, 0x3f	; 63
    34ba:	f8 94       	cli
    34bc:	de bf       	out	0x3e, r29	; 62
    34be:	0f be       	out	0x3f, r0	; 63
    34c0:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    34c2:	80 e0       	ldi	r24, 0x00	; 0
    34c4:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <H_Led_void_setON>
    34c8:	fe 01       	movw	r30, r28
    34ca:	ef 5a       	subi	r30, 0xAF	; 175
    34cc:	ff 4f       	sbci	r31, 0xFF	; 255
    34ce:	80 e0       	ldi	r24, 0x00	; 0
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	aa ef       	ldi	r26, 0xFA	; 250
    34d4:	b3 e4       	ldi	r27, 0x43	; 67
    34d6:	80 83       	st	Z, r24
    34d8:	91 83       	std	Z+1, r25	; 0x01
    34da:	a2 83       	std	Z+2, r26	; 0x02
    34dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34de:	8e 01       	movw	r16, r28
    34e0:	03 5b       	subi	r16, 0xB3	; 179
    34e2:	1f 4f       	sbci	r17, 0xFF	; 255
    34e4:	fe 01       	movw	r30, r28
    34e6:	ef 5a       	subi	r30, 0xAF	; 175
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	60 81       	ld	r22, Z
    34ec:	71 81       	ldd	r23, Z+1	; 0x01
    34ee:	82 81       	ldd	r24, Z+2	; 0x02
    34f0:	93 81       	ldd	r25, Z+3	; 0x03
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	48 ec       	ldi	r20, 0xC8	; 200
    34f8:	53 e4       	ldi	r21, 0x43	; 67
    34fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	f8 01       	movw	r30, r16
    3504:	80 83       	st	Z, r24
    3506:	91 83       	std	Z+1, r25	; 0x01
    3508:	a2 83       	std	Z+2, r26	; 0x02
    350a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    350c:	fe 01       	movw	r30, r28
    350e:	e3 5b       	subi	r30, 0xB3	; 179
    3510:	ff 4f       	sbci	r31, 0xFF	; 255
    3512:	60 81       	ld	r22, Z
    3514:	71 81       	ldd	r23, Z+1	; 0x01
    3516:	82 81       	ldd	r24, Z+2	; 0x02
    3518:	93 81       	ldd	r25, Z+3	; 0x03
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	40 e8       	ldi	r20, 0x80	; 128
    3520:	5f e3       	ldi	r21, 0x3F	; 63
    3522:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3526:	88 23       	and	r24, r24
    3528:	44 f4       	brge	.+16     	; 0x353a <Animation2+0x92>
		__ticks = 1;
    352a:	fe 01       	movw	r30, r28
    352c:	e5 5b       	subi	r30, 0xB5	; 181
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	81 e0       	ldi	r24, 0x01	; 1
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	91 83       	std	Z+1, r25	; 0x01
    3536:	80 83       	st	Z, r24
    3538:	64 c0       	rjmp	.+200    	; 0x3602 <Animation2+0x15a>
	else if (__tmp > 65535)
    353a:	fe 01       	movw	r30, r28
    353c:	e3 5b       	subi	r30, 0xB3	; 179
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	60 81       	ld	r22, Z
    3542:	71 81       	ldd	r23, Z+1	; 0x01
    3544:	82 81       	ldd	r24, Z+2	; 0x02
    3546:	93 81       	ldd	r25, Z+3	; 0x03
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	3f ef       	ldi	r19, 0xFF	; 255
    354c:	4f e7       	ldi	r20, 0x7F	; 127
    354e:	57 e4       	ldi	r21, 0x47	; 71
    3550:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3554:	18 16       	cp	r1, r24
    3556:	0c f0       	brlt	.+2      	; 0x355a <Animation2+0xb2>
    3558:	43 c0       	rjmp	.+134    	; 0x35e0 <Animation2+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355a:	fe 01       	movw	r30, r28
    355c:	ef 5a       	subi	r30, 0xAF	; 175
    355e:	ff 4f       	sbci	r31, 0xFF	; 255
    3560:	60 81       	ld	r22, Z
    3562:	71 81       	ldd	r23, Z+1	; 0x01
    3564:	82 81       	ldd	r24, Z+2	; 0x02
    3566:	93 81       	ldd	r25, Z+3	; 0x03
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	40 e2       	ldi	r20, 0x20	; 32
    356e:	51 e4       	ldi	r21, 0x41	; 65
    3570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3574:	dc 01       	movw	r26, r24
    3576:	cb 01       	movw	r24, r22
    3578:	8e 01       	movw	r16, r28
    357a:	05 5b       	subi	r16, 0xB5	; 181
    357c:	1f 4f       	sbci	r17, 0xFF	; 255
    357e:	bc 01       	movw	r22, r24
    3580:	cd 01       	movw	r24, r26
    3582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	f8 01       	movw	r30, r16
    358c:	91 83       	std	Z+1, r25	; 0x01
    358e:	80 83       	st	Z, r24
    3590:	1f c0       	rjmp	.+62     	; 0x35d0 <Animation2+0x128>
    3592:	fe 01       	movw	r30, r28
    3594:	e7 5b       	subi	r30, 0xB7	; 183
    3596:	ff 4f       	sbci	r31, 0xFF	; 255
    3598:	88 e2       	ldi	r24, 0x28	; 40
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	91 83       	std	Z+1, r25	; 0x01
    359e:	80 83       	st	Z, r24
    35a0:	fe 01       	movw	r30, r28
    35a2:	e7 5b       	subi	r30, 0xB7	; 183
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	80 81       	ld	r24, Z
    35a8:	91 81       	ldd	r25, Z+1	; 0x01
    35aa:	01 97       	sbiw	r24, 0x01	; 1
    35ac:	f1 f7       	brne	.-4      	; 0x35aa <Animation2+0x102>
    35ae:	fe 01       	movw	r30, r28
    35b0:	e7 5b       	subi	r30, 0xB7	; 183
    35b2:	ff 4f       	sbci	r31, 0xFF	; 255
    35b4:	91 83       	std	Z+1, r25	; 0x01
    35b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35b8:	de 01       	movw	r26, r28
    35ba:	a5 5b       	subi	r26, 0xB5	; 181
    35bc:	bf 4f       	sbci	r27, 0xFF	; 255
    35be:	fe 01       	movw	r30, r28
    35c0:	e5 5b       	subi	r30, 0xB5	; 181
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	80 81       	ld	r24, Z
    35c6:	91 81       	ldd	r25, Z+1	; 0x01
    35c8:	01 97       	sbiw	r24, 0x01	; 1
    35ca:	11 96       	adiw	r26, 0x01	; 1
    35cc:	9c 93       	st	X, r25
    35ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d0:	fe 01       	movw	r30, r28
    35d2:	e5 5b       	subi	r30, 0xB5	; 181
    35d4:	ff 4f       	sbci	r31, 0xFF	; 255
    35d6:	80 81       	ld	r24, Z
    35d8:	91 81       	ldd	r25, Z+1	; 0x01
    35da:	00 97       	sbiw	r24, 0x00	; 0
    35dc:	d1 f6       	brne	.-76     	; 0x3592 <Animation2+0xea>
    35de:	27 c0       	rjmp	.+78     	; 0x362e <Animation2+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e0:	8e 01       	movw	r16, r28
    35e2:	05 5b       	subi	r16, 0xB5	; 181
    35e4:	1f 4f       	sbci	r17, 0xFF	; 255
    35e6:	fe 01       	movw	r30, r28
    35e8:	e3 5b       	subi	r30, 0xB3	; 179
    35ea:	ff 4f       	sbci	r31, 0xFF	; 255
    35ec:	60 81       	ld	r22, Z
    35ee:	71 81       	ldd	r23, Z+1	; 0x01
    35f0:	82 81       	ldd	r24, Z+2	; 0x02
    35f2:	93 81       	ldd	r25, Z+3	; 0x03
    35f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	f8 01       	movw	r30, r16
    35fe:	91 83       	std	Z+1, r25	; 0x01
    3600:	80 83       	st	Z, r24
    3602:	de 01       	movw	r26, r28
    3604:	a9 5b       	subi	r26, 0xB9	; 185
    3606:	bf 4f       	sbci	r27, 0xFF	; 255
    3608:	fe 01       	movw	r30, r28
    360a:	e5 5b       	subi	r30, 0xB5	; 181
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	80 81       	ld	r24, Z
    3610:	91 81       	ldd	r25, Z+1	; 0x01
    3612:	8d 93       	st	X+, r24
    3614:	9c 93       	st	X, r25
    3616:	fe 01       	movw	r30, r28
    3618:	e9 5b       	subi	r30, 0xB9	; 185
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	80 81       	ld	r24, Z
    361e:	91 81       	ldd	r25, Z+1	; 0x01
    3620:	01 97       	sbiw	r24, 0x01	; 1
    3622:	f1 f7       	brne	.-4      	; 0x3620 <Animation2+0x178>
    3624:	fe 01       	movw	r30, r28
    3626:	e9 5b       	subi	r30, 0xB9	; 185
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	91 83       	std	Z+1, r25	; 0x01
    362c:	80 83       	st	Z, r24
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <H_Led_void_setOFF>
    3634:	fe 01       	movw	r30, r28
    3636:	ed 5b       	subi	r30, 0xBD	; 189
    3638:	ff 4f       	sbci	r31, 0xFF	; 255
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	aa ef       	ldi	r26, 0xFA	; 250
    3640:	b3 e4       	ldi	r27, 0x43	; 67
    3642:	80 83       	st	Z, r24
    3644:	91 83       	std	Z+1, r25	; 0x01
    3646:	a2 83       	std	Z+2, r26	; 0x02
    3648:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    364a:	8e 01       	movw	r16, r28
    364c:	01 5c       	subi	r16, 0xC1	; 193
    364e:	1f 4f       	sbci	r17, 0xFF	; 255
    3650:	fe 01       	movw	r30, r28
    3652:	ed 5b       	subi	r30, 0xBD	; 189
    3654:	ff 4f       	sbci	r31, 0xFF	; 255
    3656:	60 81       	ld	r22, Z
    3658:	71 81       	ldd	r23, Z+1	; 0x01
    365a:	82 81       	ldd	r24, Z+2	; 0x02
    365c:	93 81       	ldd	r25, Z+3	; 0x03
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	48 ec       	ldi	r20, 0xC8	; 200
    3664:	53 e4       	ldi	r21, 0x43	; 67
    3666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	f8 01       	movw	r30, r16
    3670:	80 83       	st	Z, r24
    3672:	91 83       	std	Z+1, r25	; 0x01
    3674:	a2 83       	std	Z+2, r26	; 0x02
    3676:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3678:	fe 01       	movw	r30, r28
    367a:	ff 96       	adiw	r30, 0x3f	; 63
    367c:	60 81       	ld	r22, Z
    367e:	71 81       	ldd	r23, Z+1	; 0x01
    3680:	82 81       	ldd	r24, Z+2	; 0x02
    3682:	93 81       	ldd	r25, Z+3	; 0x03
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	40 e8       	ldi	r20, 0x80	; 128
    368a:	5f e3       	ldi	r21, 0x3F	; 63
    368c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3690:	88 23       	and	r24, r24
    3692:	2c f4       	brge	.+10     	; 0x369e <Animation2+0x1f6>
		__ticks = 1;
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	9e af       	std	Y+62, r25	; 0x3e
    369a:	8d af       	std	Y+61, r24	; 0x3d
    369c:	46 c0       	rjmp	.+140    	; 0x372a <Animation2+0x282>
	else if (__tmp > 65535)
    369e:	fe 01       	movw	r30, r28
    36a0:	ff 96       	adiw	r30, 0x3f	; 63
    36a2:	60 81       	ld	r22, Z
    36a4:	71 81       	ldd	r23, Z+1	; 0x01
    36a6:	82 81       	ldd	r24, Z+2	; 0x02
    36a8:	93 81       	ldd	r25, Z+3	; 0x03
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	3f ef       	ldi	r19, 0xFF	; 255
    36ae:	4f e7       	ldi	r20, 0x7F	; 127
    36b0:	57 e4       	ldi	r21, 0x47	; 71
    36b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36b6:	18 16       	cp	r1, r24
    36b8:	64 f5       	brge	.+88     	; 0x3712 <Animation2+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ba:	fe 01       	movw	r30, r28
    36bc:	ed 5b       	subi	r30, 0xBD	; 189
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	60 81       	ld	r22, Z
    36c2:	71 81       	ldd	r23, Z+1	; 0x01
    36c4:	82 81       	ldd	r24, Z+2	; 0x02
    36c6:	93 81       	ldd	r25, Z+3	; 0x03
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	40 e2       	ldi	r20, 0x20	; 32
    36ce:	51 e4       	ldi	r21, 0x41	; 65
    36d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	bc 01       	movw	r22, r24
    36da:	cd 01       	movw	r24, r26
    36dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	9e af       	std	Y+62, r25	; 0x3e
    36e6:	8d af       	std	Y+61, r24	; 0x3d
    36e8:	0f c0       	rjmp	.+30     	; 0x3708 <Animation2+0x260>
    36ea:	88 e2       	ldi	r24, 0x28	; 40
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	9c af       	std	Y+60, r25	; 0x3c
    36f0:	8b af       	std	Y+59, r24	; 0x3b
    36f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    36f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    36f6:	01 97       	sbiw	r24, 0x01	; 1
    36f8:	f1 f7       	brne	.-4      	; 0x36f6 <Animation2+0x24e>
    36fa:	9c af       	std	Y+60, r25	; 0x3c
    36fc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3700:	9e ad       	ldd	r25, Y+62	; 0x3e
    3702:	01 97       	sbiw	r24, 0x01	; 1
    3704:	9e af       	std	Y+62, r25	; 0x3e
    3706:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3708:	8d ad       	ldd	r24, Y+61	; 0x3d
    370a:	9e ad       	ldd	r25, Y+62	; 0x3e
    370c:	00 97       	sbiw	r24, 0x00	; 0
    370e:	69 f7       	brne	.-38     	; 0x36ea <Animation2+0x242>
    3710:	16 c0       	rjmp	.+44     	; 0x373e <Animation2+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3712:	fe 01       	movw	r30, r28
    3714:	ff 96       	adiw	r30, 0x3f	; 63
    3716:	60 81       	ld	r22, Z
    3718:	71 81       	ldd	r23, Z+1	; 0x01
    371a:	82 81       	ldd	r24, Z+2	; 0x02
    371c:	93 81       	ldd	r25, Z+3	; 0x03
    371e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3722:	dc 01       	movw	r26, r24
    3724:	cb 01       	movw	r24, r22
    3726:	9e af       	std	Y+62, r25	; 0x3e
    3728:	8d af       	std	Y+61, r24	; 0x3d
    372a:	8d ad       	ldd	r24, Y+61	; 0x3d
    372c:	9e ad       	ldd	r25, Y+62	; 0x3e
    372e:	9a af       	std	Y+58, r25	; 0x3a
    3730:	89 af       	std	Y+57, r24	; 0x39
    3732:	89 ad       	ldd	r24, Y+57	; 0x39
    3734:	9a ad       	ldd	r25, Y+58	; 0x3a
    3736:	01 97       	sbiw	r24, 0x01	; 1
    3738:	f1 f7       	brne	.-4      	; 0x3736 <Animation2+0x28e>
    373a:	9a af       	std	Y+58, r25	; 0x3a
    373c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
    H_Led_void_setON(BLU_LED);
    373e:	82 e0       	ldi	r24, 0x02	; 2
    3740:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <H_Led_void_setON>
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	aa ef       	ldi	r26, 0xFA	; 250
    374a:	b3 e4       	ldi	r27, 0x43	; 67
    374c:	8d ab       	std	Y+53, r24	; 0x35
    374e:	9e ab       	std	Y+54, r25	; 0x36
    3750:	af ab       	std	Y+55, r26	; 0x37
    3752:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3754:	6d a9       	ldd	r22, Y+53	; 0x35
    3756:	7e a9       	ldd	r23, Y+54	; 0x36
    3758:	8f a9       	ldd	r24, Y+55	; 0x37
    375a:	98 ad       	ldd	r25, Y+56	; 0x38
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	48 ec       	ldi	r20, 0xC8	; 200
    3762:	53 e4       	ldi	r21, 0x43	; 67
    3764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	89 ab       	std	Y+49, r24	; 0x31
    376e:	9a ab       	std	Y+50, r25	; 0x32
    3770:	ab ab       	std	Y+51, r26	; 0x33
    3772:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3774:	69 a9       	ldd	r22, Y+49	; 0x31
    3776:	7a a9       	ldd	r23, Y+50	; 0x32
    3778:	8b a9       	ldd	r24, Y+51	; 0x33
    377a:	9c a9       	ldd	r25, Y+52	; 0x34
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	40 e8       	ldi	r20, 0x80	; 128
    3782:	5f e3       	ldi	r21, 0x3F	; 63
    3784:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3788:	88 23       	and	r24, r24
    378a:	2c f4       	brge	.+10     	; 0x3796 <Animation2+0x2ee>
		__ticks = 1;
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	98 ab       	std	Y+48, r25	; 0x30
    3792:	8f a7       	std	Y+47, r24	; 0x2f
    3794:	3f c0       	rjmp	.+126    	; 0x3814 <Animation2+0x36c>
	else if (__tmp > 65535)
    3796:	69 a9       	ldd	r22, Y+49	; 0x31
    3798:	7a a9       	ldd	r23, Y+50	; 0x32
    379a:	8b a9       	ldd	r24, Y+51	; 0x33
    379c:	9c a9       	ldd	r25, Y+52	; 0x34
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	3f ef       	ldi	r19, 0xFF	; 255
    37a2:	4f e7       	ldi	r20, 0x7F	; 127
    37a4:	57 e4       	ldi	r21, 0x47	; 71
    37a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37aa:	18 16       	cp	r1, r24
    37ac:	4c f5       	brge	.+82     	; 0x3800 <Animation2+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ae:	6d a9       	ldd	r22, Y+53	; 0x35
    37b0:	7e a9       	ldd	r23, Y+54	; 0x36
    37b2:	8f a9       	ldd	r24, Y+55	; 0x37
    37b4:	98 ad       	ldd	r25, Y+56	; 0x38
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	40 e2       	ldi	r20, 0x20	; 32
    37bc:	51 e4       	ldi	r21, 0x41	; 65
    37be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	bc 01       	movw	r22, r24
    37c8:	cd 01       	movw	r24, r26
    37ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	98 ab       	std	Y+48, r25	; 0x30
    37d4:	8f a7       	std	Y+47, r24	; 0x2f
    37d6:	0f c0       	rjmp	.+30     	; 0x37f6 <Animation2+0x34e>
    37d8:	88 e2       	ldi	r24, 0x28	; 40
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	9e a7       	std	Y+46, r25	; 0x2e
    37de:	8d a7       	std	Y+45, r24	; 0x2d
    37e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    37e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    37e4:	01 97       	sbiw	r24, 0x01	; 1
    37e6:	f1 f7       	brne	.-4      	; 0x37e4 <Animation2+0x33c>
    37e8:	9e a7       	std	Y+46, r25	; 0x2e
    37ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    37ee:	98 a9       	ldd	r25, Y+48	; 0x30
    37f0:	01 97       	sbiw	r24, 0x01	; 1
    37f2:	98 ab       	std	Y+48, r25	; 0x30
    37f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    37f8:	98 a9       	ldd	r25, Y+48	; 0x30
    37fa:	00 97       	sbiw	r24, 0x00	; 0
    37fc:	69 f7       	brne	.-38     	; 0x37d8 <Animation2+0x330>
    37fe:	14 c0       	rjmp	.+40     	; 0x3828 <Animation2+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3800:	69 a9       	ldd	r22, Y+49	; 0x31
    3802:	7a a9       	ldd	r23, Y+50	; 0x32
    3804:	8b a9       	ldd	r24, Y+51	; 0x33
    3806:	9c a9       	ldd	r25, Y+52	; 0x34
    3808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380c:	dc 01       	movw	r26, r24
    380e:	cb 01       	movw	r24, r22
    3810:	98 ab       	std	Y+48, r25	; 0x30
    3812:	8f a7       	std	Y+47, r24	; 0x2f
    3814:	8f a5       	ldd	r24, Y+47	; 0x2f
    3816:	98 a9       	ldd	r25, Y+48	; 0x30
    3818:	9c a7       	std	Y+44, r25	; 0x2c
    381a:	8b a7       	std	Y+43, r24	; 0x2b
    381c:	8b a5       	ldd	r24, Y+43	; 0x2b
    381e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3820:	01 97       	sbiw	r24, 0x01	; 1
    3822:	f1 f7       	brne	.-4      	; 0x3820 <Animation2+0x378>
    3824:	9c a7       	std	Y+44, r25	; 0x2c
    3826:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(500);
    H_Led_void_setOFF(BLU_LED);
    3828:	82 e0       	ldi	r24, 0x02	; 2
    382a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <H_Led_void_setOFF>
    382e:	80 e0       	ldi	r24, 0x00	; 0
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	aa ef       	ldi	r26, 0xFA	; 250
    3834:	b3 e4       	ldi	r27, 0x43	; 67
    3836:	8f a3       	std	Y+39, r24	; 0x27
    3838:	98 a7       	std	Y+40, r25	; 0x28
    383a:	a9 a7       	std	Y+41, r26	; 0x29
    383c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    383e:	6f a1       	ldd	r22, Y+39	; 0x27
    3840:	78 a5       	ldd	r23, Y+40	; 0x28
    3842:	89 a5       	ldd	r24, Y+41	; 0x29
    3844:	9a a5       	ldd	r25, Y+42	; 0x2a
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	48 ec       	ldi	r20, 0xC8	; 200
    384c:	53 e4       	ldi	r21, 0x43	; 67
    384e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	8b a3       	std	Y+35, r24	; 0x23
    3858:	9c a3       	std	Y+36, r25	; 0x24
    385a:	ad a3       	std	Y+37, r26	; 0x25
    385c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    385e:	6b a1       	ldd	r22, Y+35	; 0x23
    3860:	7c a1       	ldd	r23, Y+36	; 0x24
    3862:	8d a1       	ldd	r24, Y+37	; 0x25
    3864:	9e a1       	ldd	r25, Y+38	; 0x26
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	40 e8       	ldi	r20, 0x80	; 128
    386c:	5f e3       	ldi	r21, 0x3F	; 63
    386e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3872:	88 23       	and	r24, r24
    3874:	2c f4       	brge	.+10     	; 0x3880 <Animation2+0x3d8>
		__ticks = 1;
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	9a a3       	std	Y+34, r25	; 0x22
    387c:	89 a3       	std	Y+33, r24	; 0x21
    387e:	3f c0       	rjmp	.+126    	; 0x38fe <Animation2+0x456>
	else if (__tmp > 65535)
    3880:	6b a1       	ldd	r22, Y+35	; 0x23
    3882:	7c a1       	ldd	r23, Y+36	; 0x24
    3884:	8d a1       	ldd	r24, Y+37	; 0x25
    3886:	9e a1       	ldd	r25, Y+38	; 0x26
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	3f ef       	ldi	r19, 0xFF	; 255
    388c:	4f e7       	ldi	r20, 0x7F	; 127
    388e:	57 e4       	ldi	r21, 0x47	; 71
    3890:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3894:	18 16       	cp	r1, r24
    3896:	4c f5       	brge	.+82     	; 0x38ea <Animation2+0x442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3898:	6f a1       	ldd	r22, Y+39	; 0x27
    389a:	78 a5       	ldd	r23, Y+40	; 0x28
    389c:	89 a5       	ldd	r24, Y+41	; 0x29
    389e:	9a a5       	ldd	r25, Y+42	; 0x2a
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	40 e2       	ldi	r20, 0x20	; 32
    38a6:	51 e4       	ldi	r21, 0x41	; 65
    38a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ac:	dc 01       	movw	r26, r24
    38ae:	cb 01       	movw	r24, r22
    38b0:	bc 01       	movw	r22, r24
    38b2:	cd 01       	movw	r24, r26
    38b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	9a a3       	std	Y+34, r25	; 0x22
    38be:	89 a3       	std	Y+33, r24	; 0x21
    38c0:	0f c0       	rjmp	.+30     	; 0x38e0 <Animation2+0x438>
    38c2:	88 e2       	ldi	r24, 0x28	; 40
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	98 a3       	std	Y+32, r25	; 0x20
    38c8:	8f 8f       	std	Y+31, r24	; 0x1f
    38ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38cc:	98 a1       	ldd	r25, Y+32	; 0x20
    38ce:	01 97       	sbiw	r24, 0x01	; 1
    38d0:	f1 f7       	brne	.-4      	; 0x38ce <Animation2+0x426>
    38d2:	98 a3       	std	Y+32, r25	; 0x20
    38d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38d6:	89 a1       	ldd	r24, Y+33	; 0x21
    38d8:	9a a1       	ldd	r25, Y+34	; 0x22
    38da:	01 97       	sbiw	r24, 0x01	; 1
    38dc:	9a a3       	std	Y+34, r25	; 0x22
    38de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38e0:	89 a1       	ldd	r24, Y+33	; 0x21
    38e2:	9a a1       	ldd	r25, Y+34	; 0x22
    38e4:	00 97       	sbiw	r24, 0x00	; 0
    38e6:	69 f7       	brne	.-38     	; 0x38c2 <Animation2+0x41a>
    38e8:	14 c0       	rjmp	.+40     	; 0x3912 <Animation2+0x46a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ea:	6b a1       	ldd	r22, Y+35	; 0x23
    38ec:	7c a1       	ldd	r23, Y+36	; 0x24
    38ee:	8d a1       	ldd	r24, Y+37	; 0x25
    38f0:	9e a1       	ldd	r25, Y+38	; 0x26
    38f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f6:	dc 01       	movw	r26, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	9a a3       	std	Y+34, r25	; 0x22
    38fc:	89 a3       	std	Y+33, r24	; 0x21
    38fe:	89 a1       	ldd	r24, Y+33	; 0x21
    3900:	9a a1       	ldd	r25, Y+34	; 0x22
    3902:	9e 8f       	std	Y+30, r25	; 0x1e
    3904:	8d 8f       	std	Y+29, r24	; 0x1d
    3906:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3908:	9e 8d       	ldd	r25, Y+30	; 0x1e
    390a:	01 97       	sbiw	r24, 0x01	; 1
    390c:	f1 f7       	brne	.-4      	; 0x390a <Animation2+0x462>
    390e:	9e 8f       	std	Y+30, r25	; 0x1e
    3910:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(500);
    H_Led_void_setON(GRN_LED);
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <H_Led_void_setON>
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	aa ef       	ldi	r26, 0xFA	; 250
    391e:	b3 e4       	ldi	r27, 0x43	; 67
    3920:	89 8f       	std	Y+25, r24	; 0x19
    3922:	9a 8f       	std	Y+26, r25	; 0x1a
    3924:	ab 8f       	std	Y+27, r26	; 0x1b
    3926:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3928:	69 8d       	ldd	r22, Y+25	; 0x19
    392a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    392c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    392e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	48 ec       	ldi	r20, 0xC8	; 200
    3936:	53 e4       	ldi	r21, 0x43	; 67
    3938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	8d 8b       	std	Y+21, r24	; 0x15
    3942:	9e 8b       	std	Y+22, r25	; 0x16
    3944:	af 8b       	std	Y+23, r26	; 0x17
    3946:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3948:	6d 89       	ldd	r22, Y+21	; 0x15
    394a:	7e 89       	ldd	r23, Y+22	; 0x16
    394c:	8f 89       	ldd	r24, Y+23	; 0x17
    394e:	98 8d       	ldd	r25, Y+24	; 0x18
    3950:	20 e0       	ldi	r18, 0x00	; 0
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	40 e8       	ldi	r20, 0x80	; 128
    3956:	5f e3       	ldi	r21, 0x3F	; 63
    3958:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    395c:	88 23       	and	r24, r24
    395e:	2c f4       	brge	.+10     	; 0x396a <Animation2+0x4c2>
		__ticks = 1;
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	9c 8b       	std	Y+20, r25	; 0x14
    3966:	8b 8b       	std	Y+19, r24	; 0x13
    3968:	3f c0       	rjmp	.+126    	; 0x39e8 <Animation2+0x540>
	else if (__tmp > 65535)
    396a:	6d 89       	ldd	r22, Y+21	; 0x15
    396c:	7e 89       	ldd	r23, Y+22	; 0x16
    396e:	8f 89       	ldd	r24, Y+23	; 0x17
    3970:	98 8d       	ldd	r25, Y+24	; 0x18
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	3f ef       	ldi	r19, 0xFF	; 255
    3976:	4f e7       	ldi	r20, 0x7F	; 127
    3978:	57 e4       	ldi	r21, 0x47	; 71
    397a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    397e:	18 16       	cp	r1, r24
    3980:	4c f5       	brge	.+82     	; 0x39d4 <Animation2+0x52c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3982:	69 8d       	ldd	r22, Y+25	; 0x19
    3984:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3986:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3988:	9c 8d       	ldd	r25, Y+28	; 0x1c
    398a:	20 e0       	ldi	r18, 0x00	; 0
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	40 e2       	ldi	r20, 0x20	; 32
    3990:	51 e4       	ldi	r21, 0x41	; 65
    3992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	bc 01       	movw	r22, r24
    399c:	cd 01       	movw	r24, r26
    399e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a2:	dc 01       	movw	r26, r24
    39a4:	cb 01       	movw	r24, r22
    39a6:	9c 8b       	std	Y+20, r25	; 0x14
    39a8:	8b 8b       	std	Y+19, r24	; 0x13
    39aa:	0f c0       	rjmp	.+30     	; 0x39ca <Animation2+0x522>
    39ac:	88 e2       	ldi	r24, 0x28	; 40
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	9a 8b       	std	Y+18, r25	; 0x12
    39b2:	89 8b       	std	Y+17, r24	; 0x11
    39b4:	89 89       	ldd	r24, Y+17	; 0x11
    39b6:	9a 89       	ldd	r25, Y+18	; 0x12
    39b8:	01 97       	sbiw	r24, 0x01	; 1
    39ba:	f1 f7       	brne	.-4      	; 0x39b8 <Animation2+0x510>
    39bc:	9a 8b       	std	Y+18, r25	; 0x12
    39be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39c0:	8b 89       	ldd	r24, Y+19	; 0x13
    39c2:	9c 89       	ldd	r25, Y+20	; 0x14
    39c4:	01 97       	sbiw	r24, 0x01	; 1
    39c6:	9c 8b       	std	Y+20, r25	; 0x14
    39c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ca:	8b 89       	ldd	r24, Y+19	; 0x13
    39cc:	9c 89       	ldd	r25, Y+20	; 0x14
    39ce:	00 97       	sbiw	r24, 0x00	; 0
    39d0:	69 f7       	brne	.-38     	; 0x39ac <Animation2+0x504>
    39d2:	14 c0       	rjmp	.+40     	; 0x39fc <Animation2+0x554>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39d4:	6d 89       	ldd	r22, Y+21	; 0x15
    39d6:	7e 89       	ldd	r23, Y+22	; 0x16
    39d8:	8f 89       	ldd	r24, Y+23	; 0x17
    39da:	98 8d       	ldd	r25, Y+24	; 0x18
    39dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	9c 8b       	std	Y+20, r25	; 0x14
    39e6:	8b 8b       	std	Y+19, r24	; 0x13
    39e8:	8b 89       	ldd	r24, Y+19	; 0x13
    39ea:	9c 89       	ldd	r25, Y+20	; 0x14
    39ec:	98 8b       	std	Y+16, r25	; 0x10
    39ee:	8f 87       	std	Y+15, r24	; 0x0f
    39f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    39f2:	98 89       	ldd	r25, Y+16	; 0x10
    39f4:	01 97       	sbiw	r24, 0x01	; 1
    39f6:	f1 f7       	brne	.-4      	; 0x39f4 <Animation2+0x54c>
    39f8:	98 8b       	std	Y+16, r25	; 0x10
    39fa:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(500);
    H_Led_void_setOFF(GRN_LED);
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <H_Led_void_setOFF>
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	aa ef       	ldi	r26, 0xFA	; 250
    3a08:	b3 e4       	ldi	r27, 0x43	; 67
    3a0a:	8b 87       	std	Y+11, r24	; 0x0b
    3a0c:	9c 87       	std	Y+12, r25	; 0x0c
    3a0e:	ad 87       	std	Y+13, r26	; 0x0d
    3a10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a12:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a14:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a16:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a18:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	48 ec       	ldi	r20, 0xC8	; 200
    3a20:	53 e4       	ldi	r21, 0x43	; 67
    3a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a26:	dc 01       	movw	r26, r24
    3a28:	cb 01       	movw	r24, r22
    3a2a:	8f 83       	std	Y+7, r24	; 0x07
    3a2c:	98 87       	std	Y+8, r25	; 0x08
    3a2e:	a9 87       	std	Y+9, r26	; 0x09
    3a30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a32:	6f 81       	ldd	r22, Y+7	; 0x07
    3a34:	78 85       	ldd	r23, Y+8	; 0x08
    3a36:	89 85       	ldd	r24, Y+9	; 0x09
    3a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	40 e8       	ldi	r20, 0x80	; 128
    3a40:	5f e3       	ldi	r21, 0x3F	; 63
    3a42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a46:	88 23       	and	r24, r24
    3a48:	2c f4       	brge	.+10     	; 0x3a54 <Animation2+0x5ac>
		__ticks = 1;
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	9e 83       	std	Y+6, r25	; 0x06
    3a50:	8d 83       	std	Y+5, r24	; 0x05
    3a52:	3f c0       	rjmp	.+126    	; 0x3ad2 <Animation2+0x62a>
	else if (__tmp > 65535)
    3a54:	6f 81       	ldd	r22, Y+7	; 0x07
    3a56:	78 85       	ldd	r23, Y+8	; 0x08
    3a58:	89 85       	ldd	r24, Y+9	; 0x09
    3a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	3f ef       	ldi	r19, 0xFF	; 255
    3a60:	4f e7       	ldi	r20, 0x7F	; 127
    3a62:	57 e4       	ldi	r21, 0x47	; 71
    3a64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a68:	18 16       	cp	r1, r24
    3a6a:	4c f5       	brge	.+82     	; 0x3abe <Animation2+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a70:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a72:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	40 e2       	ldi	r20, 0x20	; 32
    3a7a:	51 e4       	ldi	r21, 0x41	; 65
    3a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a80:	dc 01       	movw	r26, r24
    3a82:	cb 01       	movw	r24, r22
    3a84:	bc 01       	movw	r22, r24
    3a86:	cd 01       	movw	r24, r26
    3a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	9e 83       	std	Y+6, r25	; 0x06
    3a92:	8d 83       	std	Y+5, r24	; 0x05
    3a94:	0f c0       	rjmp	.+30     	; 0x3ab4 <Animation2+0x60c>
    3a96:	88 e2       	ldi	r24, 0x28	; 40
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	9c 83       	std	Y+4, r25	; 0x04
    3a9c:	8b 83       	std	Y+3, r24	; 0x03
    3a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa2:	01 97       	sbiw	r24, 0x01	; 1
    3aa4:	f1 f7       	brne	.-4      	; 0x3aa2 <Animation2+0x5fa>
    3aa6:	9c 83       	std	Y+4, r25	; 0x04
    3aa8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    3aac:	9e 81       	ldd	r25, Y+6	; 0x06
    3aae:	01 97       	sbiw	r24, 0x01	; 1
    3ab0:	9e 83       	std	Y+6, r25	; 0x06
    3ab2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab8:	00 97       	sbiw	r24, 0x00	; 0
    3aba:	69 f7       	brne	.-38     	; 0x3a96 <Animation2+0x5ee>
    3abc:	14 c0       	rjmp	.+40     	; 0x3ae6 <Animation2+0x63e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3abe:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac0:	78 85       	ldd	r23, Y+8	; 0x08
    3ac2:	89 85       	ldd	r24, Y+9	; 0x09
    3ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aca:	dc 01       	movw	r26, r24
    3acc:	cb 01       	movw	r24, r22
    3ace:	9e 83       	std	Y+6, r25	; 0x06
    3ad0:	8d 83       	std	Y+5, r24	; 0x05
    3ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad6:	9a 83       	std	Y+2, r25	; 0x02
    3ad8:	89 83       	std	Y+1, r24	; 0x01
    3ada:	89 81       	ldd	r24, Y+1	; 0x01
    3adc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ade:	01 97       	sbiw	r24, 0x01	; 1
    3ae0:	f1 f7       	brne	.-4      	; 0x3ade <Animation2+0x636>
    3ae2:	9a 83       	std	Y+2, r25	; 0x02
    3ae4:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(500);

}
    3ae6:	cc 5a       	subi	r28, 0xAC	; 172
    3ae8:	df 4f       	sbci	r29, 0xFF	; 255
    3aea:	0f b6       	in	r0, 0x3f	; 63
    3aec:	f8 94       	cli
    3aee:	de bf       	out	0x3e, r29	; 62
    3af0:	0f be       	out	0x3f, r0	; 63
    3af2:	cd bf       	out	0x3d, r28	; 61
    3af4:	cf 91       	pop	r28
    3af6:	df 91       	pop	r29
    3af8:	1f 91       	pop	r17
    3afa:	0f 91       	pop	r16
    3afc:	08 95       	ret

00003afe <Animation3>:
void Animation3()
{
    3afe:	df 93       	push	r29
    3b00:	cf 93       	push	r28
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
    3b06:	6c 97       	sbiw	r28, 0x1c	; 28
    3b08:	0f b6       	in	r0, 0x3f	; 63
    3b0a:	f8 94       	cli
    3b0c:	de bf       	out	0x3e, r29	; 62
    3b0e:	0f be       	out	0x3f, r0	; 63
    3b10:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <H_Led_void_setON>
	H_Led_void_setON(BLU_LED);
    3b18:	82 e0       	ldi	r24, 0x02	; 2
    3b1a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <H_Led_void_setON>
	H_Led_void_setON(GRN_LED);
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <H_Led_void_setON>
    3b24:	80 e0       	ldi	r24, 0x00	; 0
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	aa ef       	ldi	r26, 0xFA	; 250
    3b2a:	b3 e4       	ldi	r27, 0x43	; 67
    3b2c:	89 8f       	std	Y+25, r24	; 0x19
    3b2e:	9a 8f       	std	Y+26, r25	; 0x1a
    3b30:	ab 8f       	std	Y+27, r26	; 0x1b
    3b32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b34:	69 8d       	ldd	r22, Y+25	; 0x19
    3b36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	48 ec       	ldi	r20, 0xC8	; 200
    3b42:	53 e4       	ldi	r21, 0x43	; 67
    3b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	8d 8b       	std	Y+21, r24	; 0x15
    3b4e:	9e 8b       	std	Y+22, r25	; 0x16
    3b50:	af 8b       	std	Y+23, r26	; 0x17
    3b52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b54:	6d 89       	ldd	r22, Y+21	; 0x15
    3b56:	7e 89       	ldd	r23, Y+22	; 0x16
    3b58:	8f 89       	ldd	r24, Y+23	; 0x17
    3b5a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	40 e8       	ldi	r20, 0x80	; 128
    3b62:	5f e3       	ldi	r21, 0x3F	; 63
    3b64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b68:	88 23       	and	r24, r24
    3b6a:	2c f4       	brge	.+10     	; 0x3b76 <Animation3+0x78>
		__ticks = 1;
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	9c 8b       	std	Y+20, r25	; 0x14
    3b72:	8b 8b       	std	Y+19, r24	; 0x13
    3b74:	3f c0       	rjmp	.+126    	; 0x3bf4 <Animation3+0xf6>
	else if (__tmp > 65535)
    3b76:	6d 89       	ldd	r22, Y+21	; 0x15
    3b78:	7e 89       	ldd	r23, Y+22	; 0x16
    3b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    3b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	3f ef       	ldi	r19, 0xFF	; 255
    3b82:	4f e7       	ldi	r20, 0x7F	; 127
    3b84:	57 e4       	ldi	r21, 0x47	; 71
    3b86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b8a:	18 16       	cp	r1, r24
    3b8c:	4c f5       	brge	.+82     	; 0x3be0 <Animation3+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b8e:	69 8d       	ldd	r22, Y+25	; 0x19
    3b90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	40 e2       	ldi	r20, 0x20	; 32
    3b9c:	51 e4       	ldi	r21, 0x41	; 65
    3b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	bc 01       	movw	r22, r24
    3ba8:	cd 01       	movw	r24, r26
    3baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bae:	dc 01       	movw	r26, r24
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	9c 8b       	std	Y+20, r25	; 0x14
    3bb4:	8b 8b       	std	Y+19, r24	; 0x13
    3bb6:	0f c0       	rjmp	.+30     	; 0x3bd6 <Animation3+0xd8>
    3bb8:	88 e2       	ldi	r24, 0x28	; 40
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	9a 8b       	std	Y+18, r25	; 0x12
    3bbe:	89 8b       	std	Y+17, r24	; 0x11
    3bc0:	89 89       	ldd	r24, Y+17	; 0x11
    3bc2:	9a 89       	ldd	r25, Y+18	; 0x12
    3bc4:	01 97       	sbiw	r24, 0x01	; 1
    3bc6:	f1 f7       	brne	.-4      	; 0x3bc4 <Animation3+0xc6>
    3bc8:	9a 8b       	std	Y+18, r25	; 0x12
    3bca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    3bce:	9c 89       	ldd	r25, Y+20	; 0x14
    3bd0:	01 97       	sbiw	r24, 0x01	; 1
    3bd2:	9c 8b       	std	Y+20, r25	; 0x14
    3bd4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd6:	8b 89       	ldd	r24, Y+19	; 0x13
    3bd8:	9c 89       	ldd	r25, Y+20	; 0x14
    3bda:	00 97       	sbiw	r24, 0x00	; 0
    3bdc:	69 f7       	brne	.-38     	; 0x3bb8 <Animation3+0xba>
    3bde:	14 c0       	rjmp	.+40     	; 0x3c08 <Animation3+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be0:	6d 89       	ldd	r22, Y+21	; 0x15
    3be2:	7e 89       	ldd	r23, Y+22	; 0x16
    3be4:	8f 89       	ldd	r24, Y+23	; 0x17
    3be6:	98 8d       	ldd	r25, Y+24	; 0x18
    3be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bec:	dc 01       	movw	r26, r24
    3bee:	cb 01       	movw	r24, r22
    3bf0:	9c 8b       	std	Y+20, r25	; 0x14
    3bf2:	8b 8b       	std	Y+19, r24	; 0x13
    3bf4:	8b 89       	ldd	r24, Y+19	; 0x13
    3bf6:	9c 89       	ldd	r25, Y+20	; 0x14
    3bf8:	98 8b       	std	Y+16, r25	; 0x10
    3bfa:	8f 87       	std	Y+15, r24	; 0x0f
    3bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bfe:	98 89       	ldd	r25, Y+16	; 0x10
    3c00:	01 97       	sbiw	r24, 0x01	; 1
    3c02:	f1 f7       	brne	.-4      	; 0x3c00 <Animation3+0x102>
    3c04:	98 8b       	std	Y+16, r25	; 0x10
    3c06:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <H_Led_void_setOFF>
	H_Led_void_setOFF(BLU_LED);
    3c0e:	82 e0       	ldi	r24, 0x02	; 2
    3c10:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <H_Led_void_setOFF>
	H_Led_void_setOFF(GRN_LED);
    3c14:	81 e0       	ldi	r24, 0x01	; 1
    3c16:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <H_Led_void_setOFF>
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	aa ef       	ldi	r26, 0xFA	; 250
    3c20:	b3 e4       	ldi	r27, 0x43	; 67
    3c22:	8b 87       	std	Y+11, r24	; 0x0b
    3c24:	9c 87       	std	Y+12, r25	; 0x0c
    3c26:	ad 87       	std	Y+13, r26	; 0x0d
    3c28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	48 ec       	ldi	r20, 0xC8	; 200
    3c38:	53 e4       	ldi	r21, 0x43	; 67
    3c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	8f 83       	std	Y+7, r24	; 0x07
    3c44:	98 87       	std	Y+8, r25	; 0x08
    3c46:	a9 87       	std	Y+9, r26	; 0x09
    3c48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c4c:	78 85       	ldd	r23, Y+8	; 0x08
    3c4e:	89 85       	ldd	r24, Y+9	; 0x09
    3c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	30 e0       	ldi	r19, 0x00	; 0
    3c56:	40 e8       	ldi	r20, 0x80	; 128
    3c58:	5f e3       	ldi	r21, 0x3F	; 63
    3c5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c5e:	88 23       	and	r24, r24
    3c60:	2c f4       	brge	.+10     	; 0x3c6c <Animation3+0x16e>
		__ticks = 1;
    3c62:	81 e0       	ldi	r24, 0x01	; 1
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	9e 83       	std	Y+6, r25	; 0x06
    3c68:	8d 83       	std	Y+5, r24	; 0x05
    3c6a:	3f c0       	rjmp	.+126    	; 0x3cea <Animation3+0x1ec>
	else if (__tmp > 65535)
    3c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c6e:	78 85       	ldd	r23, Y+8	; 0x08
    3c70:	89 85       	ldd	r24, Y+9	; 0x09
    3c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c74:	20 e0       	ldi	r18, 0x00	; 0
    3c76:	3f ef       	ldi	r19, 0xFF	; 255
    3c78:	4f e7       	ldi	r20, 0x7F	; 127
    3c7a:	57 e4       	ldi	r21, 0x47	; 71
    3c7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c80:	18 16       	cp	r1, r24
    3c82:	4c f5       	brge	.+82     	; 0x3cd6 <Animation3+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	40 e2       	ldi	r20, 0x20	; 32
    3c92:	51 e4       	ldi	r21, 0x41	; 65
    3c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c98:	dc 01       	movw	r26, r24
    3c9a:	cb 01       	movw	r24, r22
    3c9c:	bc 01       	movw	r22, r24
    3c9e:	cd 01       	movw	r24, r26
    3ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	9e 83       	std	Y+6, r25	; 0x06
    3caa:	8d 83       	std	Y+5, r24	; 0x05
    3cac:	0f c0       	rjmp	.+30     	; 0x3ccc <Animation3+0x1ce>
    3cae:	88 e2       	ldi	r24, 0x28	; 40
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	9c 83       	std	Y+4, r25	; 0x04
    3cb4:	8b 83       	std	Y+3, r24	; 0x03
    3cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cba:	01 97       	sbiw	r24, 0x01	; 1
    3cbc:	f1 f7       	brne	.-4      	; 0x3cba <Animation3+0x1bc>
    3cbe:	9c 83       	std	Y+4, r25	; 0x04
    3cc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cc6:	01 97       	sbiw	r24, 0x01	; 1
    3cc8:	9e 83       	std	Y+6, r25	; 0x06
    3cca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cce:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd0:	00 97       	sbiw	r24, 0x00	; 0
    3cd2:	69 f7       	brne	.-38     	; 0x3cae <Animation3+0x1b0>
    3cd4:	14 c0       	rjmp	.+40     	; 0x3cfe <Animation3+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    3cd8:	78 85       	ldd	r23, Y+8	; 0x08
    3cda:	89 85       	ldd	r24, Y+9	; 0x09
    3cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce2:	dc 01       	movw	r26, r24
    3ce4:	cb 01       	movw	r24, r22
    3ce6:	9e 83       	std	Y+6, r25	; 0x06
    3ce8:	8d 83       	std	Y+5, r24	; 0x05
    3cea:	8d 81       	ldd	r24, Y+5	; 0x05
    3cec:	9e 81       	ldd	r25, Y+6	; 0x06
    3cee:	9a 83       	std	Y+2, r25	; 0x02
    3cf0:	89 83       	std	Y+1, r24	; 0x01
    3cf2:	89 81       	ldd	r24, Y+1	; 0x01
    3cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf6:	01 97       	sbiw	r24, 0x01	; 1
    3cf8:	f1 f7       	brne	.-4      	; 0x3cf6 <Animation3+0x1f8>
    3cfa:	9a 83       	std	Y+2, r25	; 0x02
    3cfc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

}
    3cfe:	6c 96       	adiw	r28, 0x1c	; 28
    3d00:	0f b6       	in	r0, 0x3f	; 63
    3d02:	f8 94       	cli
    3d04:	de bf       	out	0x3e, r29	; 62
    3d06:	0f be       	out	0x3f, r0	; 63
    3d08:	cd bf       	out	0x3d, r28	; 61
    3d0a:	cf 91       	pop	r28
    3d0c:	df 91       	pop	r29
    3d0e:	08 95       	ret

00003d10 <H_LCD_void_Init>:
#include "LCD_int.h"
#include<util/delay.h>


void H_LCD_void_Init(void)
{
    3d10:	df 93       	push	r29
    3d12:	cf 93       	push	r28
    3d14:	cd b7       	in	r28, 0x3d	; 61
    3d16:	de b7       	in	r29, 0x3e	; 62
    3d18:	aa 97       	sbiw	r28, 0x2a	; 42
    3d1a:	0f b6       	in	r0, 0x3f	; 63
    3d1c:	f8 94       	cli
    3d1e:	de bf       	out	0x3e, r29	; 62
    3d20:	0f be       	out	0x3f, r0	; 63
    3d22:	cd bf       	out	0x3d, r28	; 61
	//set direction
	//set direction RS,EN
	M_DIO_void_setPinDir(LCD_RS_PORT,LCD_RS_PIN, OUT);
    3d24:	80 e0       	ldi	r24, 0x00	; 0
    3d26:	61 e0       	ldi	r22, 0x01	; 1
    3d28:	41 e0       	ldi	r20, 0x01	; 1
    3d2a:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_EN_PORT,LCD_EN_PORT, OUT);
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
    3d30:	60 e0       	ldi	r22, 0x00	; 0
    3d32:	41 e0       	ldi	r20, 0x01	; 1
    3d34:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	//set direction D4....D7
	M_DIO_void_setPinDir(LCD_D7_PORT,LCD_D7_PIN,OUT);
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	66 e0       	ldi	r22, 0x06	; 6
    3d3c:	41 e0       	ldi	r20, 0x01	; 1
    3d3e:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D6_PORT,LCD_D6_PIN,OUT);
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	65 e0       	ldi	r22, 0x05	; 5
    3d46:	41 e0       	ldi	r20, 0x01	; 1
    3d48:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D5_PORT,LCD_D5_PIN,OUT);
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
    3d4e:	64 e0       	ldi	r22, 0x04	; 4
    3d50:	41 e0       	ldi	r20, 0x01	; 1
    3d52:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D4_PORT,LCD_D4_PIN,OUT);
    3d56:	80 e0       	ldi	r24, 0x00	; 0
    3d58:	63 e0       	ldi	r22, 0x03	; 3
    3d5a:	41 e0       	ldi	r20, 0x01	; 1
    3d5c:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
    3d60:	80 e0       	ldi	r24, 0x00	; 0
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	ac e0       	ldi	r26, 0x0C	; 12
    3d66:	b2 e4       	ldi	r27, 0x42	; 66
    3d68:	8f a3       	std	Y+39, r24	; 0x27
    3d6a:	98 a7       	std	Y+40, r25	; 0x28
    3d6c:	a9 a7       	std	Y+41, r26	; 0x29
    3d6e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d70:	6f a1       	ldd	r22, Y+39	; 0x27
    3d72:	78 a5       	ldd	r23, Y+40	; 0x28
    3d74:	89 a5       	ldd	r24, Y+41	; 0x29
    3d76:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	48 ec       	ldi	r20, 0xC8	; 200
    3d7e:	53 e4       	ldi	r21, 0x43	; 67
    3d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	8b a3       	std	Y+35, r24	; 0x23
    3d8a:	9c a3       	std	Y+36, r25	; 0x24
    3d8c:	ad a3       	std	Y+37, r26	; 0x25
    3d8e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d90:	6b a1       	ldd	r22, Y+35	; 0x23
    3d92:	7c a1       	ldd	r23, Y+36	; 0x24
    3d94:	8d a1       	ldd	r24, Y+37	; 0x25
    3d96:	9e a1       	ldd	r25, Y+38	; 0x26
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	40 e8       	ldi	r20, 0x80	; 128
    3d9e:	5f e3       	ldi	r21, 0x3F	; 63
    3da0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3da4:	88 23       	and	r24, r24
    3da6:	2c f4       	brge	.+10     	; 0x3db2 <H_LCD_void_Init+0xa2>
		__ticks = 1;
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	9a a3       	std	Y+34, r25	; 0x22
    3dae:	89 a3       	std	Y+33, r24	; 0x21
    3db0:	3f c0       	rjmp	.+126    	; 0x3e30 <H_LCD_void_Init+0x120>
	else if (__tmp > 65535)
    3db2:	6b a1       	ldd	r22, Y+35	; 0x23
    3db4:	7c a1       	ldd	r23, Y+36	; 0x24
    3db6:	8d a1       	ldd	r24, Y+37	; 0x25
    3db8:	9e a1       	ldd	r25, Y+38	; 0x26
    3dba:	20 e0       	ldi	r18, 0x00	; 0
    3dbc:	3f ef       	ldi	r19, 0xFF	; 255
    3dbe:	4f e7       	ldi	r20, 0x7F	; 127
    3dc0:	57 e4       	ldi	r21, 0x47	; 71
    3dc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dc6:	18 16       	cp	r1, r24
    3dc8:	4c f5       	brge	.+82     	; 0x3e1c <H_LCD_void_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dca:	6f a1       	ldd	r22, Y+39	; 0x27
    3dcc:	78 a5       	ldd	r23, Y+40	; 0x28
    3dce:	89 a5       	ldd	r24, Y+41	; 0x29
    3dd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    3dd2:	20 e0       	ldi	r18, 0x00	; 0
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
    3dd6:	40 e2       	ldi	r20, 0x20	; 32
    3dd8:	51 e4       	ldi	r21, 0x41	; 65
    3dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dde:	dc 01       	movw	r26, r24
    3de0:	cb 01       	movw	r24, r22
    3de2:	bc 01       	movw	r22, r24
    3de4:	cd 01       	movw	r24, r26
    3de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dea:	dc 01       	movw	r26, r24
    3dec:	cb 01       	movw	r24, r22
    3dee:	9a a3       	std	Y+34, r25	; 0x22
    3df0:	89 a3       	std	Y+33, r24	; 0x21
    3df2:	0f c0       	rjmp	.+30     	; 0x3e12 <H_LCD_void_Init+0x102>
    3df4:	88 e2       	ldi	r24, 0x28	; 40
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	98 a3       	std	Y+32, r25	; 0x20
    3dfa:	8f 8f       	std	Y+31, r24	; 0x1f
    3dfc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3dfe:	98 a1       	ldd	r25, Y+32	; 0x20
    3e00:	01 97       	sbiw	r24, 0x01	; 1
    3e02:	f1 f7       	brne	.-4      	; 0x3e00 <H_LCD_void_Init+0xf0>
    3e04:	98 a3       	std	Y+32, r25	; 0x20
    3e06:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e08:	89 a1       	ldd	r24, Y+33	; 0x21
    3e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    3e0c:	01 97       	sbiw	r24, 0x01	; 1
    3e0e:	9a a3       	std	Y+34, r25	; 0x22
    3e10:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e12:	89 a1       	ldd	r24, Y+33	; 0x21
    3e14:	9a a1       	ldd	r25, Y+34	; 0x22
    3e16:	00 97       	sbiw	r24, 0x00	; 0
    3e18:	69 f7       	brne	.-38     	; 0x3df4 <H_LCD_void_Init+0xe4>
    3e1a:	14 c0       	rjmp	.+40     	; 0x3e44 <H_LCD_void_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e1c:	6b a1       	ldd	r22, Y+35	; 0x23
    3e1e:	7c a1       	ldd	r23, Y+36	; 0x24
    3e20:	8d a1       	ldd	r24, Y+37	; 0x25
    3e22:	9e a1       	ldd	r25, Y+38	; 0x26
    3e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	9a a3       	std	Y+34, r25	; 0x22
    3e2e:	89 a3       	std	Y+33, r24	; 0x21
    3e30:	89 a1       	ldd	r24, Y+33	; 0x21
    3e32:	9a a1       	ldd	r25, Y+34	; 0x22
    3e34:	9e 8f       	std	Y+30, r25	; 0x1e
    3e36:	8d 8f       	std	Y+29, r24	; 0x1d
    3e38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e3c:	01 97       	sbiw	r24, 0x01	; 1
    3e3e:	f1 f7       	brne	.-4      	; 0x3e3c <H_LCD_void_Init+0x12c>
    3e40:	9e 8f       	std	Y+30, r25	; 0x1e
    3e42:	8d 8f       	std	Y+29, r24	; 0x1d


#elif(LCD_MODE== LCD_4BIT_MODE)
	_delay_ms(35);
	//rs=command=0
	M_DIO_void_setPinValue(LCD_RS_PORT, LCD_RS_PIN,HIGH);
    3e44:	80 e0       	ldi	r24, 0x00	; 0
    3e46:	61 e0       	ldi	r22, 0x01	; 1
    3e48:	41 e0       	ldi	r20, 0x01	; 1
    3e4a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
//EN=0, disabled
	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	62 e0       	ldi	r22, 0x02	; 2
    3e52:	40 e0       	ldi	r20, 0x00	; 0
    3e54:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
	//Prepare data
	M_DIO_void_setPinValue(LCD_D7_PORT,LCD_D7_PIN,0);
    3e58:	80 e0       	ldi	r24, 0x00	; 0
    3e5a:	66 e0       	ldi	r22, 0x06	; 6
    3e5c:	40 e0       	ldi	r20, 0x00	; 0
    3e5e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D6_PORT,LCD_D6_PIN,0);
    3e62:	80 e0       	ldi	r24, 0x00	; 0
    3e64:	65 e0       	ldi	r22, 0x05	; 5
    3e66:	40 e0       	ldi	r20, 0x00	; 0
    3e68:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D5_PORT,LCD_D5_PIN,1);
    3e6c:	80 e0       	ldi	r24, 0x00	; 0
    3e6e:	64 e0       	ldi	r22, 0x04	; 4
    3e70:	41 e0       	ldi	r20, 0x01	; 1
    3e72:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D4_PORT,LCD_D4_PIN,0);
    3e76:	80 e0       	ldi	r24, 0x00	; 0
    3e78:	63 e0       	ldi	r22, 0x03	; 3
    3e7a:	40 e0       	ldi	r20, 0x00	; 0
    3e7c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
	//EN=1
	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,HIGH);
    3e80:	80 e0       	ldi	r24, 0x00	; 0
    3e82:	62 e0       	ldi	r22, 0x02	; 2
    3e84:	41 e0       	ldi	r20, 0x01	; 1
    3e86:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    3e8a:	80 e0       	ldi	r24, 0x00	; 0
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	ac e0       	ldi	r26, 0x0C	; 12
    3e90:	b2 e4       	ldi	r27, 0x42	; 66
    3e92:	89 8f       	std	Y+25, r24	; 0x19
    3e94:	9a 8f       	std	Y+26, r25	; 0x1a
    3e96:	ab 8f       	std	Y+27, r26	; 0x1b
    3e98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e9a:	69 8d       	ldd	r22, Y+25	; 0x19
    3e9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ea0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	48 ec       	ldi	r20, 0xC8	; 200
    3ea8:	53 e4       	ldi	r21, 0x43	; 67
    3eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eae:	dc 01       	movw	r26, r24
    3eb0:	cb 01       	movw	r24, r22
    3eb2:	8d 8b       	std	Y+21, r24	; 0x15
    3eb4:	9e 8b       	std	Y+22, r25	; 0x16
    3eb6:	af 8b       	std	Y+23, r26	; 0x17
    3eb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3eba:	6d 89       	ldd	r22, Y+21	; 0x15
    3ebc:	7e 89       	ldd	r23, Y+22	; 0x16
    3ebe:	8f 89       	ldd	r24, Y+23	; 0x17
    3ec0:	98 8d       	ldd	r25, Y+24	; 0x18
    3ec2:	20 e0       	ldi	r18, 0x00	; 0
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	40 e8       	ldi	r20, 0x80	; 128
    3ec8:	5f e3       	ldi	r21, 0x3F	; 63
    3eca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ece:	88 23       	and	r24, r24
    3ed0:	2c f4       	brge	.+10     	; 0x3edc <H_LCD_void_Init+0x1cc>
		__ticks = 1;
    3ed2:	81 e0       	ldi	r24, 0x01	; 1
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	9c 8b       	std	Y+20, r25	; 0x14
    3ed8:	8b 8b       	std	Y+19, r24	; 0x13
    3eda:	3f c0       	rjmp	.+126    	; 0x3f5a <H_LCD_void_Init+0x24a>
	else if (__tmp > 65535)
    3edc:	6d 89       	ldd	r22, Y+21	; 0x15
    3ede:	7e 89       	ldd	r23, Y+22	; 0x16
    3ee0:	8f 89       	ldd	r24, Y+23	; 0x17
    3ee2:	98 8d       	ldd	r25, Y+24	; 0x18
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	3f ef       	ldi	r19, 0xFF	; 255
    3ee8:	4f e7       	ldi	r20, 0x7F	; 127
    3eea:	57 e4       	ldi	r21, 0x47	; 71
    3eec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ef0:	18 16       	cp	r1, r24
    3ef2:	4c f5       	brge	.+82     	; 0x3f46 <H_LCD_void_Init+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef4:	69 8d       	ldd	r22, Y+25	; 0x19
    3ef6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ef8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3efa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3efc:	20 e0       	ldi	r18, 0x00	; 0
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	40 e2       	ldi	r20, 0x20	; 32
    3f02:	51 e4       	ldi	r21, 0x41	; 65
    3f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f08:	dc 01       	movw	r26, r24
    3f0a:	cb 01       	movw	r24, r22
    3f0c:	bc 01       	movw	r22, r24
    3f0e:	cd 01       	movw	r24, r26
    3f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f14:	dc 01       	movw	r26, r24
    3f16:	cb 01       	movw	r24, r22
    3f18:	9c 8b       	std	Y+20, r25	; 0x14
    3f1a:	8b 8b       	std	Y+19, r24	; 0x13
    3f1c:	0f c0       	rjmp	.+30     	; 0x3f3c <H_LCD_void_Init+0x22c>
    3f1e:	88 e2       	ldi	r24, 0x28	; 40
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	9a 8b       	std	Y+18, r25	; 0x12
    3f24:	89 8b       	std	Y+17, r24	; 0x11
    3f26:	89 89       	ldd	r24, Y+17	; 0x11
    3f28:	9a 89       	ldd	r25, Y+18	; 0x12
    3f2a:	01 97       	sbiw	r24, 0x01	; 1
    3f2c:	f1 f7       	brne	.-4      	; 0x3f2a <H_LCD_void_Init+0x21a>
    3f2e:	9a 8b       	std	Y+18, r25	; 0x12
    3f30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f32:	8b 89       	ldd	r24, Y+19	; 0x13
    3f34:	9c 89       	ldd	r25, Y+20	; 0x14
    3f36:	01 97       	sbiw	r24, 0x01	; 1
    3f38:	9c 8b       	std	Y+20, r25	; 0x14
    3f3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f3c:	8b 89       	ldd	r24, Y+19	; 0x13
    3f3e:	9c 89       	ldd	r25, Y+20	; 0x14
    3f40:	00 97       	sbiw	r24, 0x00	; 0
    3f42:	69 f7       	brne	.-38     	; 0x3f1e <H_LCD_void_Init+0x20e>
    3f44:	14 c0       	rjmp	.+40     	; 0x3f6e <H_LCD_void_Init+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f46:	6d 89       	ldd	r22, Y+21	; 0x15
    3f48:	7e 89       	ldd	r23, Y+22	; 0x16
    3f4a:	8f 89       	ldd	r24, Y+23	; 0x17
    3f4c:	98 8d       	ldd	r25, Y+24	; 0x18
    3f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f52:	dc 01       	movw	r26, r24
    3f54:	cb 01       	movw	r24, r22
    3f56:	9c 8b       	std	Y+20, r25	; 0x14
    3f58:	8b 8b       	std	Y+19, r24	; 0x13
    3f5a:	8b 89       	ldd	r24, Y+19	; 0x13
    3f5c:	9c 89       	ldd	r25, Y+20	; 0x14
    3f5e:	98 8b       	std	Y+16, r25	; 0x10
    3f60:	8f 87       	std	Y+15, r24	; 0x0f
    3f62:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f64:	98 89       	ldd	r25, Y+16	; 0x10
    3f66:	01 97       	sbiw	r24, 0x01	; 1
    3f68:	f1 f7       	brne	.-4      	; 0x3f66 <H_LCD_void_Init+0x256>
    3f6a:	98 8b       	std	Y+16, r25	; 0x10
    3f6c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(35);
	//EN=0;
	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    3f6e:	80 e0       	ldi	r24, 0x00	; 0
    3f70:	62 e0       	ldi	r22, 0x02	; 2
    3f72:	40 e0       	ldi	r20, 0x00	; 0
    3f74:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    3f78:	80 e0       	ldi	r24, 0x00	; 0
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	ac e0       	ldi	r26, 0x0C	; 12
    3f7e:	b2 e4       	ldi	r27, 0x42	; 66
    3f80:	8b 87       	std	Y+11, r24	; 0x0b
    3f82:	9c 87       	std	Y+12, r25	; 0x0c
    3f84:	ad 87       	std	Y+13, r26	; 0x0d
    3f86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	48 ec       	ldi	r20, 0xC8	; 200
    3f96:	53 e4       	ldi	r21, 0x43	; 67
    3f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	8f 83       	std	Y+7, r24	; 0x07
    3fa2:	98 87       	std	Y+8, r25	; 0x08
    3fa4:	a9 87       	std	Y+9, r26	; 0x09
    3fa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    3faa:	78 85       	ldd	r23, Y+8	; 0x08
    3fac:	89 85       	ldd	r24, Y+9	; 0x09
    3fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	40 e8       	ldi	r20, 0x80	; 128
    3fb6:	5f e3       	ldi	r21, 0x3F	; 63
    3fb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fbc:	88 23       	and	r24, r24
    3fbe:	2c f4       	brge	.+10     	; 0x3fca <H_LCD_void_Init+0x2ba>
		__ticks = 1;
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	9e 83       	std	Y+6, r25	; 0x06
    3fc6:	8d 83       	std	Y+5, r24	; 0x05
    3fc8:	3f c0       	rjmp	.+126    	; 0x4048 <H_LCD_void_Init+0x338>
	else if (__tmp > 65535)
    3fca:	6f 81       	ldd	r22, Y+7	; 0x07
    3fcc:	78 85       	ldd	r23, Y+8	; 0x08
    3fce:	89 85       	ldd	r24, Y+9	; 0x09
    3fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	3f ef       	ldi	r19, 0xFF	; 255
    3fd6:	4f e7       	ldi	r20, 0x7F	; 127
    3fd8:	57 e4       	ldi	r21, 0x47	; 71
    3fda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fde:	18 16       	cp	r1, r24
    3fe0:	4c f5       	brge	.+82     	; 0x4034 <H_LCD_void_Init+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fea:	20 e0       	ldi	r18, 0x00	; 0
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	40 e2       	ldi	r20, 0x20	; 32
    3ff0:	51 e4       	ldi	r21, 0x41	; 65
    3ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	cb 01       	movw	r24, r22
    3ffa:	bc 01       	movw	r22, r24
    3ffc:	cd 01       	movw	r24, r26
    3ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	9e 83       	std	Y+6, r25	; 0x06
    4008:	8d 83       	std	Y+5, r24	; 0x05
    400a:	0f c0       	rjmp	.+30     	; 0x402a <H_LCD_void_Init+0x31a>
    400c:	88 e2       	ldi	r24, 0x28	; 40
    400e:	90 e0       	ldi	r25, 0x00	; 0
    4010:	9c 83       	std	Y+4, r25	; 0x04
    4012:	8b 83       	std	Y+3, r24	; 0x03
    4014:	8b 81       	ldd	r24, Y+3	; 0x03
    4016:	9c 81       	ldd	r25, Y+4	; 0x04
    4018:	01 97       	sbiw	r24, 0x01	; 1
    401a:	f1 f7       	brne	.-4      	; 0x4018 <H_LCD_void_Init+0x308>
    401c:	9c 83       	std	Y+4, r25	; 0x04
    401e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4020:	8d 81       	ldd	r24, Y+5	; 0x05
    4022:	9e 81       	ldd	r25, Y+6	; 0x06
    4024:	01 97       	sbiw	r24, 0x01	; 1
    4026:	9e 83       	std	Y+6, r25	; 0x06
    4028:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    402a:	8d 81       	ldd	r24, Y+5	; 0x05
    402c:	9e 81       	ldd	r25, Y+6	; 0x06
    402e:	00 97       	sbiw	r24, 0x00	; 0
    4030:	69 f7       	brne	.-38     	; 0x400c <H_LCD_void_Init+0x2fc>
    4032:	14 c0       	rjmp	.+40     	; 0x405c <H_LCD_void_Init+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4034:	6f 81       	ldd	r22, Y+7	; 0x07
    4036:	78 85       	ldd	r23, Y+8	; 0x08
    4038:	89 85       	ldd	r24, Y+9	; 0x09
    403a:	9a 85       	ldd	r25, Y+10	; 0x0a
    403c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4040:	dc 01       	movw	r26, r24
    4042:	cb 01       	movw	r24, r22
    4044:	9e 83       	std	Y+6, r25	; 0x06
    4046:	8d 83       	std	Y+5, r24	; 0x05
    4048:	8d 81       	ldd	r24, Y+5	; 0x05
    404a:	9e 81       	ldd	r25, Y+6	; 0x06
    404c:	9a 83       	std	Y+2, r25	; 0x02
    404e:	89 83       	std	Y+1, r24	; 0x01
    4050:	89 81       	ldd	r24, Y+1	; 0x01
    4052:	9a 81       	ldd	r25, Y+2	; 0x02
    4054:	01 97       	sbiw	r24, 0x01	; 1
    4056:	f1 f7       	brne	.-4      	; 0x4054 <H_LCD_void_Init+0x344>
    4058:	9a 83       	std	Y+2, r25	; 0x02
    405a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(35);
	H_LCD_void_sendCommand(LCD_4BIT_MODE_2LINES_5X7);
    405c:	88 e2       	ldi	r24, 0x28	; 40
    405e:	0e 94 55 20 	call	0x40aa	; 0x40aa <H_LCD_void_sendCommand>

#else
#error("wrong lcd mood")
#endif
	//display ON ,OFF
	H_LCD_void_sendCommand(LCD_DISPON_CURS0N_BLINKOFF);
    4062:	8e e0       	ldi	r24, 0x0E	; 14
    4064:	0e 94 55 20 	call	0x40aa	; 0x40aa <H_LCD_void_sendCommand>
	//display clear
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY);
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	0e 94 55 20 	call	0x40aa	; 0x40aa <H_LCD_void_sendCommand>
	//entry mode set
	H_LCD_void_sendCommand(LCD_ENTRY_MODE_SET);
    406e:	86 e0       	ldi	r24, 0x06	; 6
    4070:	0e 94 55 20 	call	0x40aa	; 0x40aa <H_LCD_void_sendCommand>
}
    4074:	aa 96       	adiw	r28, 0x2a	; 42
    4076:	0f b6       	in	r0, 0x3f	; 63
    4078:	f8 94       	cli
    407a:	de bf       	out	0x3e, r29	; 62
    407c:	0f be       	out	0x3f, r0	; 63
    407e:	cd bf       	out	0x3d, r28	; 61
    4080:	cf 91       	pop	r28
    4082:	df 91       	pop	r29
    4084:	08 95       	ret

00004086 <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
    4086:	df 93       	push	r29
    4088:	cf 93       	push	r28
    408a:	0f 92       	push	r0
    408c:	cd b7       	in	r28, 0x3d	; 61
    408e:	de b7       	in	r29, 0x3e	; 62
    4090:	89 83       	std	Y+1, r24	; 0x01
	//step 1 RS=1;
	M_DIO_void_setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    4092:	80 e0       	ldi	r24, 0x00	; 0
    4094:	61 e0       	ldi	r22, 0x01	; 1
    4096:	41 e0       	ldi	r20, 0x01	; 1
    4098:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>

	//step 2   write data
	H_LCD_void_writeNLatch( copy_u8data);
    409c:	89 81       	ldd	r24, Y+1	; 0x01
    409e:	0e 94 f6 21 	call	0x43ec	; 0x43ec <H_LCD_void_writeNLatch>
}
    40a2:	0f 90       	pop	r0
    40a4:	cf 91       	pop	r28
    40a6:	df 91       	pop	r29
    40a8:	08 95       	ret

000040aa <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    40aa:	df 93       	push	r29
    40ac:	cf 93       	push	r28
    40ae:	0f 92       	push	r0
    40b0:	cd b7       	in	r28, 0x3d	; 61
    40b2:	de b7       	in	r29, 0x3e	; 62
    40b4:	89 83       	std	Y+1, r24	; 0x01
	//step 1 RS=0
	M_DIO_void_setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    40b6:	80 e0       	ldi	r24, 0x00	; 0
    40b8:	61 e0       	ldi	r22, 0x01	; 1
    40ba:	40 e0       	ldi	r20, 0x00	; 0
    40bc:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
	//step 2 write command
	H_LCD_void_writeNLatch( copy_u8command)	;
    40c0:	89 81       	ldd	r24, Y+1	; 0x01
    40c2:	0e 94 f6 21 	call	0x43ec	; 0x43ec <H_LCD_void_writeNLatch>
}
    40c6:	0f 90       	pop	r0
    40c8:	cf 91       	pop	r28
    40ca:	df 91       	pop	r29
    40cc:	08 95       	ret

000040ce <H_LCD_void_sendString>:
void H_LCD_void_sendString(const u8 *pstr)
{
    40ce:	df 93       	push	r29
    40d0:	cf 93       	push	r28
    40d2:	00 d0       	rcall	.+0      	; 0x40d4 <H_LCD_void_sendString+0x6>
    40d4:	cd b7       	in	r28, 0x3d	; 61
    40d6:	de b7       	in	r29, 0x3e	; 62
    40d8:	9a 83       	std	Y+2, r25	; 0x02
    40da:	89 83       	std	Y+1, r24	; 0x01
    40dc:	0a c0       	rjmp	.+20     	; 0x40f2 <H_LCD_void_sendString+0x24>
	while(*pstr)
	{
		H_LCD_void_sendData(*pstr);
    40de:	e9 81       	ldd	r30, Y+1	; 0x01
    40e0:	fa 81       	ldd	r31, Y+2	; 0x02
    40e2:	80 81       	ld	r24, Z
    40e4:	0e 94 43 20 	call	0x4086	; 0x4086 <H_LCD_void_sendData>
		pstr++;
    40e8:	89 81       	ldd	r24, Y+1	; 0x01
    40ea:	9a 81       	ldd	r25, Y+2	; 0x02
    40ec:	01 96       	adiw	r24, 0x01	; 1
    40ee:	9a 83       	std	Y+2, r25	; 0x02
    40f0:	89 83       	std	Y+1, r24	; 0x01
	//step 2 write command
	H_LCD_void_writeNLatch( copy_u8command)	;
}
void H_LCD_void_sendString(const u8 *pstr)
{
	while(*pstr)
    40f2:	e9 81       	ldd	r30, Y+1	; 0x01
    40f4:	fa 81       	ldd	r31, Y+2	; 0x02
    40f6:	80 81       	ld	r24, Z
    40f8:	88 23       	and	r24, r24
    40fa:	89 f7       	brne	.-30     	; 0x40de <H_LCD_void_sendString+0x10>
		H_LCD_void_sendData(*pstr);
		pstr++;

	}

}
    40fc:	0f 90       	pop	r0
    40fe:	0f 90       	pop	r0
    4100:	cf 91       	pop	r28
    4102:	df 91       	pop	r29
    4104:	08 95       	ret

00004106 <H_LCD_void_clear>:
void H_LCD_void_clear(void)
{
    4106:	df 93       	push	r29
    4108:	cf 93       	push	r28
    410a:	cd b7       	in	r28, 0x3d	; 61
    410c:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY);
    410e:	81 e0       	ldi	r24, 0x01	; 1
    4110:	0e 94 55 20 	call	0x40aa	; 0x40aa <H_LCD_void_sendCommand>
}
    4114:	cf 91       	pop	r28
    4116:	df 91       	pop	r29
    4118:	08 95       	ret

0000411a <H_LCD_void_sendIntNum>:
void H_LCD_void_sendIntNum(s32 copy_s32_Num)
{
    411a:	0f 93       	push	r16
    411c:	1f 93       	push	r17
    411e:	df 93       	push	r29
    4120:	cf 93       	push	r28
    4122:	cd b7       	in	r28, 0x3d	; 61
    4124:	de b7       	in	r29, 0x3e	; 62
    4126:	2f 97       	sbiw	r28, 0x0f	; 15
    4128:	0f b6       	in	r0, 0x3f	; 63
    412a:	f8 94       	cli
    412c:	de bf       	out	0x3e, r29	; 62
    412e:	0f be       	out	0x3f, r0	; 63
    4130:	cd bf       	out	0x3d, r28	; 61
    4132:	6c 87       	std	Y+12, r22	; 0x0c
    4134:	7d 87       	std	Y+13, r23	; 0x0d
    4136:	8e 87       	std	Y+14, r24	; 0x0e
    4138:	9f 87       	std	Y+15, r25	; 0x0f
  u8 loc_Arr[10]={0};
    413a:	8a e0       	ldi	r24, 0x0A	; 10
    413c:	fe 01       	movw	r30, r28
    413e:	32 96       	adiw	r30, 0x02	; 2
    4140:	df 01       	movw	r26, r30
    4142:	98 2f       	mov	r25, r24
    4144:	1d 92       	st	X+, r1
    4146:	9a 95       	dec	r25
    4148:	e9 f7       	brne	.-6      	; 0x4144 <H_LCD_void_sendIntNum+0x2a>
  s8 i;
  if(copy_s32_Num==0)
    414a:	8c 85       	ldd	r24, Y+12	; 0x0c
    414c:	9d 85       	ldd	r25, Y+13	; 0x0d
    414e:	ae 85       	ldd	r26, Y+14	; 0x0e
    4150:	bf 85       	ldd	r27, Y+15	; 0x0f
    4152:	00 97       	sbiw	r24, 0x00	; 0
    4154:	a1 05       	cpc	r26, r1
    4156:	b1 05       	cpc	r27, r1
    4158:	21 f4       	brne	.+8      	; 0x4162 <H_LCD_void_sendIntNum+0x48>
  {
	  H_LCD_void_sendData('0');
    415a:	80 e3       	ldi	r24, 0x30	; 48
    415c:	0e 94 43 20 	call	0x4086	; 0x4086 <H_LCD_void_sendData>
    4160:	4a c0       	rjmp	.+148    	; 0x41f6 <H_LCD_void_sendIntNum+0xdc>

  }
  else if (copy_s32_Num<0)
    4162:	8c 85       	ldd	r24, Y+12	; 0x0c
    4164:	9d 85       	ldd	r25, Y+13	; 0x0d
    4166:	ae 85       	ldd	r26, Y+14	; 0x0e
    4168:	bf 85       	ldd	r27, Y+15	; 0x0f
    416a:	bb 23       	and	r27, r27
    416c:	0c f0       	brlt	.+2      	; 0x4170 <H_LCD_void_sendIntNum+0x56>
    416e:	43 c0       	rjmp	.+134    	; 0x41f6 <H_LCD_void_sendIntNum+0xdc>
  {
	  H_LCD_void_sendData('-');
    4170:	8d e2       	ldi	r24, 0x2D	; 45
    4172:	0e 94 43 20 	call	0x4086	; 0x4086 <H_LCD_void_sendData>
	  copy_s32_Num*=-1;
    4176:	8c 85       	ldd	r24, Y+12	; 0x0c
    4178:	9d 85       	ldd	r25, Y+13	; 0x0d
    417a:	ae 85       	ldd	r26, Y+14	; 0x0e
    417c:	bf 85       	ldd	r27, Y+15	; 0x0f
    417e:	b0 95       	com	r27
    4180:	a0 95       	com	r26
    4182:	90 95       	com	r25
    4184:	81 95       	neg	r24
    4186:	9f 4f       	sbci	r25, 0xFF	; 255
    4188:	af 4f       	sbci	r26, 0xFF	; 255
    418a:	bf 4f       	sbci	r27, 0xFF	; 255
    418c:	8c 87       	std	Y+12, r24	; 0x0c
    418e:	9d 87       	std	Y+13, r25	; 0x0d
    4190:	ae 87       	std	Y+14, r26	; 0x0e
    4192:	bf 87       	std	Y+15, r27	; 0x0f
    4194:	30 c0       	rjmp	.+96     	; 0x41f6 <H_LCD_void_sendIntNum+0xdc>
  }
  while (copy_s32_Num!=0)
  {
	  loc_Arr[i]=(copy_s32_Num%10)+48;
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	08 2f       	mov	r16, r24
    419a:	11 27       	eor	r17, r17
    419c:	07 fd       	sbrc	r16, 7
    419e:	10 95       	com	r17
    41a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    41a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    41a4:	ae 85       	ldd	r26, Y+14	; 0x0e
    41a6:	bf 85       	ldd	r27, Y+15	; 0x0f
    41a8:	2a e0       	ldi	r18, 0x0A	; 10
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	40 e0       	ldi	r20, 0x00	; 0
    41ae:	50 e0       	ldi	r21, 0x00	; 0
    41b0:	bc 01       	movw	r22, r24
    41b2:	cd 01       	movw	r24, r26
    41b4:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__divmodsi4>
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	28 2f       	mov	r18, r24
    41be:	20 5d       	subi	r18, 0xD0	; 208
    41c0:	ce 01       	movw	r24, r28
    41c2:	02 96       	adiw	r24, 0x02	; 2
    41c4:	fc 01       	movw	r30, r24
    41c6:	e0 0f       	add	r30, r16
    41c8:	f1 1f       	adc	r31, r17
    41ca:	20 83       	st	Z, r18
	  copy_s32_Num=copy_s32_Num/10;
    41cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    41ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    41d0:	ae 85       	ldd	r26, Y+14	; 0x0e
    41d2:	bf 85       	ldd	r27, Y+15	; 0x0f
    41d4:	2a e0       	ldi	r18, 0x0A	; 10
    41d6:	30 e0       	ldi	r19, 0x00	; 0
    41d8:	40 e0       	ldi	r20, 0x00	; 0
    41da:	50 e0       	ldi	r21, 0x00	; 0
    41dc:	bc 01       	movw	r22, r24
    41de:	cd 01       	movw	r24, r26
    41e0:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__divmodsi4>
    41e4:	da 01       	movw	r26, r20
    41e6:	c9 01       	movw	r24, r18
    41e8:	8c 87       	std	Y+12, r24	; 0x0c
    41ea:	9d 87       	std	Y+13, r25	; 0x0d
    41ec:	ae 87       	std	Y+14, r26	; 0x0e
    41ee:	bf 87       	std	Y+15, r27	; 0x0f
	  i++;
    41f0:	89 81       	ldd	r24, Y+1	; 0x01
    41f2:	8f 5f       	subi	r24, 0xFF	; 255
    41f4:	89 83       	std	Y+1, r24	; 0x01
  else if (copy_s32_Num<0)
  {
	  H_LCD_void_sendData('-');
	  copy_s32_Num*=-1;
  }
  while (copy_s32_Num!=0)
    41f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    41f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    41fa:	ae 85       	ldd	r26, Y+14	; 0x0e
    41fc:	bf 85       	ldd	r27, Y+15	; 0x0f
    41fe:	00 97       	sbiw	r24, 0x00	; 0
    4200:	a1 05       	cpc	r26, r1
    4202:	b1 05       	cpc	r27, r1
    4204:	41 f6       	brne	.-112    	; 0x4196 <H_LCD_void_sendIntNum+0x7c>
  {
	  loc_Arr[i]=(copy_s32_Num%10)+48;
	  copy_s32_Num=copy_s32_Num/10;
	  i++;
  }
  i--;
    4206:	89 81       	ldd	r24, Y+1	; 0x01
    4208:	81 50       	subi	r24, 0x01	; 1
    420a:	89 83       	std	Y+1, r24	; 0x01
    420c:	11 c0       	rjmp	.+34     	; 0x4230 <H_LCD_void_sendIntNum+0x116>
  while(i>=0)
  {
	  H_LCD_void_sendData(loc_Arr[i]+'0');
    420e:	89 81       	ldd	r24, Y+1	; 0x01
    4210:	28 2f       	mov	r18, r24
    4212:	33 27       	eor	r19, r19
    4214:	27 fd       	sbrc	r18, 7
    4216:	30 95       	com	r19
    4218:	ce 01       	movw	r24, r28
    421a:	02 96       	adiw	r24, 0x02	; 2
    421c:	fc 01       	movw	r30, r24
    421e:	e2 0f       	add	r30, r18
    4220:	f3 1f       	adc	r31, r19
    4222:	80 81       	ld	r24, Z
    4224:	80 5d       	subi	r24, 0xD0	; 208
    4226:	0e 94 43 20 	call	0x4086	; 0x4086 <H_LCD_void_sendData>
	  i--;
    422a:	89 81       	ldd	r24, Y+1	; 0x01
    422c:	81 50       	subi	r24, 0x01	; 1
    422e:	89 83       	std	Y+1, r24	; 0x01
	  loc_Arr[i]=(copy_s32_Num%10)+48;
	  copy_s32_Num=copy_s32_Num/10;
	  i++;
  }
  i--;
  while(i>=0)
    4230:	89 81       	ldd	r24, Y+1	; 0x01
    4232:	88 23       	and	r24, r24
    4234:	64 f7       	brge	.-40     	; 0x420e <H_LCD_void_sendIntNum+0xf4>
  {
	  H_LCD_void_sendData(loc_Arr[i]+'0');
	  i--;
  }
}
    4236:	2f 96       	adiw	r28, 0x0f	; 15
    4238:	0f b6       	in	r0, 0x3f	; 63
    423a:	f8 94       	cli
    423c:	de bf       	out	0x3e, r29	; 62
    423e:	0f be       	out	0x3f, r0	; 63
    4240:	cd bf       	out	0x3d, r28	; 61
    4242:	cf 91       	pop	r28
    4244:	df 91       	pop	r29
    4246:	1f 91       	pop	r17
    4248:	0f 91       	pop	r16
    424a:	08 95       	ret

0000424c <H_LCD_void_gotXY>:
void H_LCD_void_gotXY(u8 copy_u8Row,u8 copy_u8Col)
{
    424c:	df 93       	push	r29
    424e:	cf 93       	push	r28
    4250:	00 d0       	rcall	.+0      	; 0x4252 <H_LCD_void_gotXY+0x6>
    4252:	00 d0       	rcall	.+0      	; 0x4254 <H_LCD_void_gotXY+0x8>
    4254:	cd b7       	in	r28, 0x3d	; 61
    4256:	de b7       	in	r29, 0x3e	; 62
    4258:	89 83       	std	Y+1, r24	; 0x01
    425a:	6a 83       	std	Y+2, r22	; 0x02
 if (copy_u8Row==0||copy_u8Row==1)
    425c:	89 81       	ldd	r24, Y+1	; 0x01
    425e:	88 23       	and	r24, r24
    4260:	19 f0       	breq	.+6      	; 0x4268 <H_LCD_void_gotXY+0x1c>
    4262:	89 81       	ldd	r24, Y+1	; 0x01
    4264:	81 30       	cpi	r24, 0x01	; 1
    4266:	d9 f4       	brne	.+54     	; 0x429e <H_LCD_void_gotXY+0x52>
 {
	 if(copy_u8Col >= 0 &&copy_u8Col <=15)
    4268:	8a 81       	ldd	r24, Y+2	; 0x02
    426a:	80 31       	cpi	r24, 0x10	; 16
    426c:	c0 f4       	brcc	.+48     	; 0x429e <H_LCD_void_gotXY+0x52>
	 {
		 switch(copy_u8Row)
    426e:	89 81       	ldd	r24, Y+1	; 0x01
    4270:	28 2f       	mov	r18, r24
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	3c 83       	std	Y+4, r19	; 0x04
    4276:	2b 83       	std	Y+3, r18	; 0x03
    4278:	8b 81       	ldd	r24, Y+3	; 0x03
    427a:	9c 81       	ldd	r25, Y+4	; 0x04
    427c:	00 97       	sbiw	r24, 0x00	; 0
    427e:	31 f0       	breq	.+12     	; 0x428c <H_LCD_void_gotXY+0x40>
    4280:	2b 81       	ldd	r18, Y+3	; 0x03
    4282:	3c 81       	ldd	r19, Y+4	; 0x04
    4284:	21 30       	cpi	r18, 0x01	; 1
    4286:	31 05       	cpc	r19, r1
    4288:	31 f0       	breq	.+12     	; 0x4296 <H_LCD_void_gotXY+0x4a>
    428a:	09 c0       	rjmp	.+18     	; 0x429e <H_LCD_void_gotXY+0x52>
		 {
		 case 0 :
			 H_LCD_void_sendCommand(LCD_R0C0+copy_u8Col);
    428c:	8a 81       	ldd	r24, Y+2	; 0x02
    428e:	80 58       	subi	r24, 0x80	; 128
    4290:	0e 94 55 20 	call	0x40aa	; 0x40aa <H_LCD_void_sendCommand>
    4294:	04 c0       	rjmp	.+8      	; 0x429e <H_LCD_void_gotXY+0x52>
			 break;

		 case 1:
			 H_LCD_void_sendCommand(LCD_R1C0+copy_u8Col);
    4296:	8a 81       	ldd	r24, Y+2	; 0x02
    4298:	80 54       	subi	r24, 0x40	; 64
    429a:	0e 94 55 20 	call	0x40aa	; 0x40aa <H_LCD_void_sendCommand>
			 break;

		 }
	 }
 }
}
    429e:	0f 90       	pop	r0
    42a0:	0f 90       	pop	r0
    42a2:	0f 90       	pop	r0
    42a4:	0f 90       	pop	r0
    42a6:	cf 91       	pop	r28
    42a8:	df 91       	pop	r29
    42aa:	08 95       	ret

000042ac <H_LCD_void_creatCustomChar>:
void H_LCD_void_creatCustomChar(const u8 *ArrPattern,u8 copy_u8char)
{
    42ac:	df 93       	push	r29
    42ae:	cf 93       	push	r28
    42b0:	00 d0       	rcall	.+0      	; 0x42b2 <H_LCD_void_creatCustomChar+0x6>
    42b2:	0f 92       	push	r0
    42b4:	cd b7       	in	r28, 0x3d	; 61
    42b6:	de b7       	in	r29, 0x3e	; 62
    42b8:	9a 83       	std	Y+2, r25	; 0x02
    42ba:	89 83       	std	Y+1, r24	; 0x01
    42bc:	6b 83       	std	Y+3, r22	; 0x03

}
    42be:	0f 90       	pop	r0
    42c0:	0f 90       	pop	r0
    42c2:	0f 90       	pop	r0
    42c4:	cf 91       	pop	r28
    42c6:	df 91       	pop	r29
    42c8:	08 95       	ret

000042ca <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8char)
{
    42ca:	df 93       	push	r29
    42cc:	cf 93       	push	r28
    42ce:	0f 92       	push	r0
    42d0:	cd b7       	in	r28, 0x3d	; 61
    42d2:	de b7       	in	r29, 0x3e	; 62
    42d4:	89 83       	std	Y+1, r24	; 0x01

}
    42d6:	0f 90       	pop	r0
    42d8:	cf 91       	pop	r28
    42da:	df 91       	pop	r29
    42dc:	08 95       	ret

000042de <calculator_App>:
f32  calculator_App(f32 a,f32 b,u8 operator)
{
    42de:	0f 93       	push	r16
    42e0:	df 93       	push	r29
    42e2:	cf 93       	push	r28
    42e4:	cd b7       	in	r28, 0x3d	; 61
    42e6:	de b7       	in	r29, 0x3e	; 62
    42e8:	2f 97       	sbiw	r28, 0x0f	; 15
    42ea:	0f b6       	in	r0, 0x3f	; 63
    42ec:	f8 94       	cli
    42ee:	de bf       	out	0x3e, r29	; 62
    42f0:	0f be       	out	0x3f, r0	; 63
    42f2:	cd bf       	out	0x3d, r28	; 61
    42f4:	6d 83       	std	Y+5, r22	; 0x05
    42f6:	7e 83       	std	Y+6, r23	; 0x06
    42f8:	8f 83       	std	Y+7, r24	; 0x07
    42fa:	98 87       	std	Y+8, r25	; 0x08
    42fc:	29 87       	std	Y+9, r18	; 0x09
    42fe:	3a 87       	std	Y+10, r19	; 0x0a
    4300:	4b 87       	std	Y+11, r20	; 0x0b
    4302:	5c 87       	std	Y+12, r21	; 0x0c
    4304:	0d 87       	std	Y+13, r16	; 0x0d
	f32 result;
	switch(operator)
    4306:	8d 85       	ldd	r24, Y+13	; 0x0d
    4308:	28 2f       	mov	r18, r24
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	3f 87       	std	Y+15, r19	; 0x0f
    430e:	2e 87       	std	Y+14, r18	; 0x0e
    4310:	8e 85       	ldd	r24, Y+14	; 0x0e
    4312:	9f 85       	ldd	r25, Y+15	; 0x0f
    4314:	8b 32       	cpi	r24, 0x2B	; 43
    4316:	91 05       	cpc	r25, r1
    4318:	b1 f0       	breq	.+44     	; 0x4346 <calculator_App+0x68>
    431a:	2e 85       	ldd	r18, Y+14	; 0x0e
    431c:	3f 85       	ldd	r19, Y+15	; 0x0f
    431e:	2c 32       	cpi	r18, 0x2C	; 44
    4320:	31 05       	cpc	r19, r1
    4322:	34 f4       	brge	.+12     	; 0x4330 <calculator_App+0x52>
    4324:	8e 85       	ldd	r24, Y+14	; 0x0e
    4326:	9f 85       	ldd	r25, Y+15	; 0x0f
    4328:	8a 32       	cpi	r24, 0x2A	; 42
    432a:	91 05       	cpc	r25, r1
    432c:	71 f1       	breq	.+92     	; 0x438a <calculator_App+0xac>
    432e:	4e c0       	rjmp	.+156    	; 0x43cc <calculator_App+0xee>
    4330:	2e 85       	ldd	r18, Y+14	; 0x0e
    4332:	3f 85       	ldd	r19, Y+15	; 0x0f
    4334:	2d 32       	cpi	r18, 0x2D	; 45
    4336:	31 05       	cpc	r19, r1
    4338:	b9 f0       	breq	.+46     	; 0x4368 <calculator_App+0x8a>
    433a:	8e 85       	ldd	r24, Y+14	; 0x0e
    433c:	9f 85       	ldd	r25, Y+15	; 0x0f
    433e:	8f 32       	cpi	r24, 0x2F	; 47
    4340:	91 05       	cpc	r25, r1
    4342:	a1 f1       	breq	.+104    	; 0x43ac <calculator_App+0xce>
    4344:	43 c0       	rjmp	.+134    	; 0x43cc <calculator_App+0xee>
	{
	case('+'):
			result=a+b;
    4346:	6d 81       	ldd	r22, Y+5	; 0x05
    4348:	7e 81       	ldd	r23, Y+6	; 0x06
    434a:	8f 81       	ldd	r24, Y+7	; 0x07
    434c:	98 85       	ldd	r25, Y+8	; 0x08
    434e:	29 85       	ldd	r18, Y+9	; 0x09
    4350:	3a 85       	ldd	r19, Y+10	; 0x0a
    4352:	4b 85       	ldd	r20, Y+11	; 0x0b
    4354:	5c 85       	ldd	r21, Y+12	; 0x0c
    4356:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    435a:	dc 01       	movw	r26, r24
    435c:	cb 01       	movw	r24, r22
    435e:	89 83       	std	Y+1, r24	; 0x01
    4360:	9a 83       	std	Y+2, r25	; 0x02
    4362:	ab 83       	std	Y+3, r26	; 0x03
    4364:	bc 83       	std	Y+4, r27	; 0x04
    4366:	32 c0       	rjmp	.+100    	; 0x43cc <calculator_App+0xee>
	        break;
	case('-'):
			result=a-b;
    4368:	6d 81       	ldd	r22, Y+5	; 0x05
    436a:	7e 81       	ldd	r23, Y+6	; 0x06
    436c:	8f 81       	ldd	r24, Y+7	; 0x07
    436e:	98 85       	ldd	r25, Y+8	; 0x08
    4370:	29 85       	ldd	r18, Y+9	; 0x09
    4372:	3a 85       	ldd	r19, Y+10	; 0x0a
    4374:	4b 85       	ldd	r20, Y+11	; 0x0b
    4376:	5c 85       	ldd	r21, Y+12	; 0x0c
    4378:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    437c:	dc 01       	movw	r26, r24
    437e:	cb 01       	movw	r24, r22
    4380:	89 83       	std	Y+1, r24	; 0x01
    4382:	9a 83       	std	Y+2, r25	; 0x02
    4384:	ab 83       	std	Y+3, r26	; 0x03
    4386:	bc 83       	std	Y+4, r27	; 0x04
    4388:	21 c0       	rjmp	.+66     	; 0x43cc <calculator_App+0xee>
		     break;
	case('*'):
			result=a*b;
    438a:	6d 81       	ldd	r22, Y+5	; 0x05
    438c:	7e 81       	ldd	r23, Y+6	; 0x06
    438e:	8f 81       	ldd	r24, Y+7	; 0x07
    4390:	98 85       	ldd	r25, Y+8	; 0x08
    4392:	29 85       	ldd	r18, Y+9	; 0x09
    4394:	3a 85       	ldd	r19, Y+10	; 0x0a
    4396:	4b 85       	ldd	r20, Y+11	; 0x0b
    4398:	5c 85       	ldd	r21, Y+12	; 0x0c
    439a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    439e:	dc 01       	movw	r26, r24
    43a0:	cb 01       	movw	r24, r22
    43a2:	89 83       	std	Y+1, r24	; 0x01
    43a4:	9a 83       	std	Y+2, r25	; 0x02
    43a6:	ab 83       	std	Y+3, r26	; 0x03
    43a8:	bc 83       	std	Y+4, r27	; 0x04
    43aa:	10 c0       	rjmp	.+32     	; 0x43cc <calculator_App+0xee>
		     break;
	case('/'):
			result=a/b;
    43ac:	6d 81       	ldd	r22, Y+5	; 0x05
    43ae:	7e 81       	ldd	r23, Y+6	; 0x06
    43b0:	8f 81       	ldd	r24, Y+7	; 0x07
    43b2:	98 85       	ldd	r25, Y+8	; 0x08
    43b4:	29 85       	ldd	r18, Y+9	; 0x09
    43b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    43b8:	4b 85       	ldd	r20, Y+11	; 0x0b
    43ba:	5c 85       	ldd	r21, Y+12	; 0x0c
    43bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    43c0:	dc 01       	movw	r26, r24
    43c2:	cb 01       	movw	r24, r22
    43c4:	89 83       	std	Y+1, r24	; 0x01
    43c6:	9a 83       	std	Y+2, r25	; 0x02
    43c8:	ab 83       	std	Y+3, r26	; 0x03
    43ca:	bc 83       	std	Y+4, r27	; 0x04
		      break;

	}
	return result;
    43cc:	89 81       	ldd	r24, Y+1	; 0x01
    43ce:	9a 81       	ldd	r25, Y+2	; 0x02
    43d0:	ab 81       	ldd	r26, Y+3	; 0x03
    43d2:	bc 81       	ldd	r27, Y+4	; 0x04

}
    43d4:	bc 01       	movw	r22, r24
    43d6:	cd 01       	movw	r24, r26
    43d8:	2f 96       	adiw	r28, 0x0f	; 15
    43da:	0f b6       	in	r0, 0x3f	; 63
    43dc:	f8 94       	cli
    43de:	de bf       	out	0x3e, r29	; 62
    43e0:	0f be       	out	0x3f, r0	; 63
    43e2:	cd bf       	out	0x3d, r28	; 61
    43e4:	cf 91       	pop	r28
    43e6:	df 91       	pop	r29
    43e8:	0f 91       	pop	r16
    43ea:	08 95       	ret

000043ec <H_LCD_void_writeNLatch>:
static void H_LCD_void_writeNLatch(u8 copy_u8Byte)
{
    43ec:	df 93       	push	r29
    43ee:	cf 93       	push	r28
    43f0:	cd b7       	in	r28, 0x3d	; 61
    43f2:	de b7       	in	r29, 0x3e	; 62
    43f4:	e9 97       	sbiw	r28, 0x39	; 57
    43f6:	0f b6       	in	r0, 0x3f	; 63
    43f8:	f8 94       	cli
    43fa:	de bf       	out	0x3e, r29	; 62
    43fc:	0f be       	out	0x3f, r0	; 63
    43fe:	cd bf       	out	0x3d, r28	; 61
    4400:	89 af       	std	Y+57, r24	; 0x39
	//step4 :deactivate enable (E=10)
	M_DIO_void_setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
	_delay_ms(5);
#elif(LCD_MODE== LCD_4BIT_MODE)
	//EN=0, disabled
	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	62 e0       	ldi	r22, 0x02	; 2
    4406:	40 e0       	ldi	r20, 0x00	; 0
    4408:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
	//devide bte to 2
	//step1  send high order bit on pins (DB7...DB4)
	M_DIO_void_setPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(copy_u8Byte,7));
    440c:	89 ad       	ldd	r24, Y+57	; 0x39
    440e:	98 2f       	mov	r25, r24
    4410:	99 1f       	adc	r25, r25
    4412:	99 27       	eor	r25, r25
    4414:	99 1f       	adc	r25, r25
    4416:	80 e0       	ldi	r24, 0x00	; 0
    4418:	66 e0       	ldi	r22, 0x06	; 6
    441a:	49 2f       	mov	r20, r25
    441c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(copy_u8Byte,6));
    4420:	89 ad       	ldd	r24, Y+57	; 0x39
    4422:	82 95       	swap	r24
    4424:	86 95       	lsr	r24
    4426:	86 95       	lsr	r24
    4428:	83 70       	andi	r24, 0x03	; 3
    442a:	98 2f       	mov	r25, r24
    442c:	91 70       	andi	r25, 0x01	; 1
    442e:	80 e0       	ldi	r24, 0x00	; 0
    4430:	65 e0       	ldi	r22, 0x05	; 5
    4432:	49 2f       	mov	r20, r25
    4434:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(copy_u8Byte,5));
    4438:	89 ad       	ldd	r24, Y+57	; 0x39
    443a:	82 95       	swap	r24
    443c:	86 95       	lsr	r24
    443e:	87 70       	andi	r24, 0x07	; 7
    4440:	98 2f       	mov	r25, r24
    4442:	91 70       	andi	r25, 0x01	; 1
    4444:	80 e0       	ldi	r24, 0x00	; 0
    4446:	64 e0       	ldi	r22, 0x04	; 4
    4448:	49 2f       	mov	r20, r25
    444a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(copy_u8Byte,4));
    444e:	89 ad       	ldd	r24, Y+57	; 0x39
    4450:	82 95       	swap	r24
    4452:	8f 70       	andi	r24, 0x0F	; 15
    4454:	98 2f       	mov	r25, r24
    4456:	91 70       	andi	r25, 0x01	; 1
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	63 e0       	ldi	r22, 0x03	; 3
    445c:	49 2f       	mov	r20, r25
    445e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
		//step2 activate enable ,(E=1)
		M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    4462:	80 e0       	ldi	r24, 0x00	; 0
    4464:	62 e0       	ldi	r22, 0x02	; 2
    4466:	41 e0       	ldi	r20, 0x01	; 1
    4468:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    446c:	80 e0       	ldi	r24, 0x00	; 0
    446e:	90 e0       	ldi	r25, 0x00	; 0
    4470:	a0 e8       	ldi	r26, 0x80	; 128
    4472:	bf e3       	ldi	r27, 0x3F	; 63
    4474:	8d ab       	std	Y+53, r24	; 0x35
    4476:	9e ab       	std	Y+54, r25	; 0x36
    4478:	af ab       	std	Y+55, r26	; 0x37
    447a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    447c:	6d a9       	ldd	r22, Y+53	; 0x35
    447e:	7e a9       	ldd	r23, Y+54	; 0x36
    4480:	8f a9       	ldd	r24, Y+55	; 0x37
    4482:	98 ad       	ldd	r25, Y+56	; 0x38
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	48 ec       	ldi	r20, 0xC8	; 200
    448a:	53 e4       	ldi	r21, 0x43	; 67
    448c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4490:	dc 01       	movw	r26, r24
    4492:	cb 01       	movw	r24, r22
    4494:	89 ab       	std	Y+49, r24	; 0x31
    4496:	9a ab       	std	Y+50, r25	; 0x32
    4498:	ab ab       	std	Y+51, r26	; 0x33
    449a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    449c:	69 a9       	ldd	r22, Y+49	; 0x31
    449e:	7a a9       	ldd	r23, Y+50	; 0x32
    44a0:	8b a9       	ldd	r24, Y+51	; 0x33
    44a2:	9c a9       	ldd	r25, Y+52	; 0x34
    44a4:	20 e0       	ldi	r18, 0x00	; 0
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	40 e8       	ldi	r20, 0x80	; 128
    44aa:	5f e3       	ldi	r21, 0x3F	; 63
    44ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44b0:	88 23       	and	r24, r24
    44b2:	2c f4       	brge	.+10     	; 0x44be <H_LCD_void_writeNLatch+0xd2>
		__ticks = 1;
    44b4:	81 e0       	ldi	r24, 0x01	; 1
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	98 ab       	std	Y+48, r25	; 0x30
    44ba:	8f a7       	std	Y+47, r24	; 0x2f
    44bc:	3f c0       	rjmp	.+126    	; 0x453c <H_LCD_void_writeNLatch+0x150>
	else if (__tmp > 65535)
    44be:	69 a9       	ldd	r22, Y+49	; 0x31
    44c0:	7a a9       	ldd	r23, Y+50	; 0x32
    44c2:	8b a9       	ldd	r24, Y+51	; 0x33
    44c4:	9c a9       	ldd	r25, Y+52	; 0x34
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	3f ef       	ldi	r19, 0xFF	; 255
    44ca:	4f e7       	ldi	r20, 0x7F	; 127
    44cc:	57 e4       	ldi	r21, 0x47	; 71
    44ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44d2:	18 16       	cp	r1, r24
    44d4:	4c f5       	brge	.+82     	; 0x4528 <H_LCD_void_writeNLatch+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44d6:	6d a9       	ldd	r22, Y+53	; 0x35
    44d8:	7e a9       	ldd	r23, Y+54	; 0x36
    44da:	8f a9       	ldd	r24, Y+55	; 0x37
    44dc:	98 ad       	ldd	r25, Y+56	; 0x38
    44de:	20 e0       	ldi	r18, 0x00	; 0
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	40 e2       	ldi	r20, 0x20	; 32
    44e4:	51 e4       	ldi	r21, 0x41	; 65
    44e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ea:	dc 01       	movw	r26, r24
    44ec:	cb 01       	movw	r24, r22
    44ee:	bc 01       	movw	r22, r24
    44f0:	cd 01       	movw	r24, r26
    44f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f6:	dc 01       	movw	r26, r24
    44f8:	cb 01       	movw	r24, r22
    44fa:	98 ab       	std	Y+48, r25	; 0x30
    44fc:	8f a7       	std	Y+47, r24	; 0x2f
    44fe:	0f c0       	rjmp	.+30     	; 0x451e <H_LCD_void_writeNLatch+0x132>
    4500:	88 e2       	ldi	r24, 0x28	; 40
    4502:	90 e0       	ldi	r25, 0x00	; 0
    4504:	9e a7       	std	Y+46, r25	; 0x2e
    4506:	8d a7       	std	Y+45, r24	; 0x2d
    4508:	8d a5       	ldd	r24, Y+45	; 0x2d
    450a:	9e a5       	ldd	r25, Y+46	; 0x2e
    450c:	01 97       	sbiw	r24, 0x01	; 1
    450e:	f1 f7       	brne	.-4      	; 0x450c <H_LCD_void_writeNLatch+0x120>
    4510:	9e a7       	std	Y+46, r25	; 0x2e
    4512:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4514:	8f a5       	ldd	r24, Y+47	; 0x2f
    4516:	98 a9       	ldd	r25, Y+48	; 0x30
    4518:	01 97       	sbiw	r24, 0x01	; 1
    451a:	98 ab       	std	Y+48, r25	; 0x30
    451c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    451e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4520:	98 a9       	ldd	r25, Y+48	; 0x30
    4522:	00 97       	sbiw	r24, 0x00	; 0
    4524:	69 f7       	brne	.-38     	; 0x4500 <H_LCD_void_writeNLatch+0x114>
    4526:	14 c0       	rjmp	.+40     	; 0x4550 <H_LCD_void_writeNLatch+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4528:	69 a9       	ldd	r22, Y+49	; 0x31
    452a:	7a a9       	ldd	r23, Y+50	; 0x32
    452c:	8b a9       	ldd	r24, Y+51	; 0x33
    452e:	9c a9       	ldd	r25, Y+52	; 0x34
    4530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4534:	dc 01       	movw	r26, r24
    4536:	cb 01       	movw	r24, r22
    4538:	98 ab       	std	Y+48, r25	; 0x30
    453a:	8f a7       	std	Y+47, r24	; 0x2f
    453c:	8f a5       	ldd	r24, Y+47	; 0x2f
    453e:	98 a9       	ldd	r25, Y+48	; 0x30
    4540:	9c a7       	std	Y+44, r25	; 0x2c
    4542:	8b a7       	std	Y+43, r24	; 0x2b
    4544:	8b a5       	ldd	r24, Y+43	; 0x2b
    4546:	9c a5       	ldd	r25, Y+44	; 0x2c
    4548:	01 97       	sbiw	r24, 0x01	; 1
    454a:	f1 f7       	brne	.-4      	; 0x4548 <H_LCD_void_writeNLatch+0x15c>
    454c:	9c a7       	std	Y+44, r25	; 0x2c
    454e:	8b a7       	std	Y+43, r24	; 0x2b

		//step3 : delay for 1msec
		_delay_ms(1);

		//step4 :deactivate enable (E=10)
		M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    4550:	80 e0       	ldi	r24, 0x00	; 0
    4552:	62 e0       	ldi	r22, 0x02	; 2
    4554:	40 e0       	ldi	r20, 0x00	; 0
    4556:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    455a:	80 e0       	ldi	r24, 0x00	; 0
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	a0 ea       	ldi	r26, 0xA0	; 160
    4560:	b0 e4       	ldi	r27, 0x40	; 64
    4562:	8f a3       	std	Y+39, r24	; 0x27
    4564:	98 a7       	std	Y+40, r25	; 0x28
    4566:	a9 a7       	std	Y+41, r26	; 0x29
    4568:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    456a:	6f a1       	ldd	r22, Y+39	; 0x27
    456c:	78 a5       	ldd	r23, Y+40	; 0x28
    456e:	89 a5       	ldd	r24, Y+41	; 0x29
    4570:	9a a5       	ldd	r25, Y+42	; 0x2a
    4572:	20 e0       	ldi	r18, 0x00	; 0
    4574:	30 e0       	ldi	r19, 0x00	; 0
    4576:	48 ec       	ldi	r20, 0xC8	; 200
    4578:	53 e4       	ldi	r21, 0x43	; 67
    457a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    457e:	dc 01       	movw	r26, r24
    4580:	cb 01       	movw	r24, r22
    4582:	8b a3       	std	Y+35, r24	; 0x23
    4584:	9c a3       	std	Y+36, r25	; 0x24
    4586:	ad a3       	std	Y+37, r26	; 0x25
    4588:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    458a:	6b a1       	ldd	r22, Y+35	; 0x23
    458c:	7c a1       	ldd	r23, Y+36	; 0x24
    458e:	8d a1       	ldd	r24, Y+37	; 0x25
    4590:	9e a1       	ldd	r25, Y+38	; 0x26
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	30 e0       	ldi	r19, 0x00	; 0
    4596:	40 e8       	ldi	r20, 0x80	; 128
    4598:	5f e3       	ldi	r21, 0x3F	; 63
    459a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    459e:	88 23       	and	r24, r24
    45a0:	2c f4       	brge	.+10     	; 0x45ac <H_LCD_void_writeNLatch+0x1c0>
		__ticks = 1;
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	9a a3       	std	Y+34, r25	; 0x22
    45a8:	89 a3       	std	Y+33, r24	; 0x21
    45aa:	3f c0       	rjmp	.+126    	; 0x462a <H_LCD_void_writeNLatch+0x23e>
	else if (__tmp > 65535)
    45ac:	6b a1       	ldd	r22, Y+35	; 0x23
    45ae:	7c a1       	ldd	r23, Y+36	; 0x24
    45b0:	8d a1       	ldd	r24, Y+37	; 0x25
    45b2:	9e a1       	ldd	r25, Y+38	; 0x26
    45b4:	20 e0       	ldi	r18, 0x00	; 0
    45b6:	3f ef       	ldi	r19, 0xFF	; 255
    45b8:	4f e7       	ldi	r20, 0x7F	; 127
    45ba:	57 e4       	ldi	r21, 0x47	; 71
    45bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45c0:	18 16       	cp	r1, r24
    45c2:	4c f5       	brge	.+82     	; 0x4616 <H_LCD_void_writeNLatch+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45c4:	6f a1       	ldd	r22, Y+39	; 0x27
    45c6:	78 a5       	ldd	r23, Y+40	; 0x28
    45c8:	89 a5       	ldd	r24, Y+41	; 0x29
    45ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    45cc:	20 e0       	ldi	r18, 0x00	; 0
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	40 e2       	ldi	r20, 0x20	; 32
    45d2:	51 e4       	ldi	r21, 0x41	; 65
    45d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45d8:	dc 01       	movw	r26, r24
    45da:	cb 01       	movw	r24, r22
    45dc:	bc 01       	movw	r22, r24
    45de:	cd 01       	movw	r24, r26
    45e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e4:	dc 01       	movw	r26, r24
    45e6:	cb 01       	movw	r24, r22
    45e8:	9a a3       	std	Y+34, r25	; 0x22
    45ea:	89 a3       	std	Y+33, r24	; 0x21
    45ec:	0f c0       	rjmp	.+30     	; 0x460c <H_LCD_void_writeNLatch+0x220>
    45ee:	88 e2       	ldi	r24, 0x28	; 40
    45f0:	90 e0       	ldi	r25, 0x00	; 0
    45f2:	98 a3       	std	Y+32, r25	; 0x20
    45f4:	8f 8f       	std	Y+31, r24	; 0x1f
    45f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    45f8:	98 a1       	ldd	r25, Y+32	; 0x20
    45fa:	01 97       	sbiw	r24, 0x01	; 1
    45fc:	f1 f7       	brne	.-4      	; 0x45fa <H_LCD_void_writeNLatch+0x20e>
    45fe:	98 a3       	std	Y+32, r25	; 0x20
    4600:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4602:	89 a1       	ldd	r24, Y+33	; 0x21
    4604:	9a a1       	ldd	r25, Y+34	; 0x22
    4606:	01 97       	sbiw	r24, 0x01	; 1
    4608:	9a a3       	std	Y+34, r25	; 0x22
    460a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    460c:	89 a1       	ldd	r24, Y+33	; 0x21
    460e:	9a a1       	ldd	r25, Y+34	; 0x22
    4610:	00 97       	sbiw	r24, 0x00	; 0
    4612:	69 f7       	brne	.-38     	; 0x45ee <H_LCD_void_writeNLatch+0x202>
    4614:	14 c0       	rjmp	.+40     	; 0x463e <H_LCD_void_writeNLatch+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4616:	6b a1       	ldd	r22, Y+35	; 0x23
    4618:	7c a1       	ldd	r23, Y+36	; 0x24
    461a:	8d a1       	ldd	r24, Y+37	; 0x25
    461c:	9e a1       	ldd	r25, Y+38	; 0x26
    461e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4622:	dc 01       	movw	r26, r24
    4624:	cb 01       	movw	r24, r22
    4626:	9a a3       	std	Y+34, r25	; 0x22
    4628:	89 a3       	std	Y+33, r24	; 0x21
    462a:	89 a1       	ldd	r24, Y+33	; 0x21
    462c:	9a a1       	ldd	r25, Y+34	; 0x22
    462e:	9e 8f       	std	Y+30, r25	; 0x1e
    4630:	8d 8f       	std	Y+29, r24	; 0x1d
    4632:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4634:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4636:	01 97       	sbiw	r24, 0x01	; 1
    4638:	f1 f7       	brne	.-4      	; 0x4636 <H_LCD_void_writeNLatch+0x24a>
    463a:	9e 8f       	std	Y+30, r25	; 0x1e
    463c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);
		//step 6 send lower order bits on pins (D7...D4)
		M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    463e:	80 e0       	ldi	r24, 0x00	; 0
    4640:	62 e0       	ldi	r22, 0x02	; 2
    4642:	40 e0       	ldi	r20, 0x00	; 0
    4644:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(copy_u8Byte,3));
    4648:	89 ad       	ldd	r24, Y+57	; 0x39
    464a:	86 95       	lsr	r24
    464c:	86 95       	lsr	r24
    464e:	86 95       	lsr	r24
    4650:	98 2f       	mov	r25, r24
    4652:	91 70       	andi	r25, 0x01	; 1
    4654:	80 e0       	ldi	r24, 0x00	; 0
    4656:	66 e0       	ldi	r22, 0x06	; 6
    4658:	49 2f       	mov	r20, r25
    465a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(copy_u8Byte,2));
    465e:	89 ad       	ldd	r24, Y+57	; 0x39
    4660:	86 95       	lsr	r24
    4662:	86 95       	lsr	r24
    4664:	98 2f       	mov	r25, r24
    4666:	91 70       	andi	r25, 0x01	; 1
    4668:	80 e0       	ldi	r24, 0x00	; 0
    466a:	65 e0       	ldi	r22, 0x05	; 5
    466c:	49 2f       	mov	r20, r25
    466e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(copy_u8Byte,1));
    4672:	89 ad       	ldd	r24, Y+57	; 0x39
    4674:	86 95       	lsr	r24
    4676:	98 2f       	mov	r25, r24
    4678:	91 70       	andi	r25, 0x01	; 1
    467a:	80 e0       	ldi	r24, 0x00	; 0
    467c:	64 e0       	ldi	r22, 0x04	; 4
    467e:	49 2f       	mov	r20, r25
    4680:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(copy_u8Byte,0));
    4684:	89 ad       	ldd	r24, Y+57	; 0x39
    4686:	98 2f       	mov	r25, r24
    4688:	91 70       	andi	r25, 0x01	; 1
    468a:	80 e0       	ldi	r24, 0x00	; 0
    468c:	63 e0       	ldi	r22, 0x03	; 3
    468e:	49 2f       	mov	r20, r25
    4690:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
		//activate enable
		M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	62 e0       	ldi	r22, 0x02	; 2
    4698:	41 e0       	ldi	r20, 0x01	; 1
    469a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	a0 e8       	ldi	r26, 0x80	; 128
    46a4:	bf e3       	ldi	r27, 0x3F	; 63
    46a6:	89 8f       	std	Y+25, r24	; 0x19
    46a8:	9a 8f       	std	Y+26, r25	; 0x1a
    46aa:	ab 8f       	std	Y+27, r26	; 0x1b
    46ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46ae:	69 8d       	ldd	r22, Y+25	; 0x19
    46b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46b6:	20 e0       	ldi	r18, 0x00	; 0
    46b8:	30 e0       	ldi	r19, 0x00	; 0
    46ba:	48 ec       	ldi	r20, 0xC8	; 200
    46bc:	53 e4       	ldi	r21, 0x43	; 67
    46be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c2:	dc 01       	movw	r26, r24
    46c4:	cb 01       	movw	r24, r22
    46c6:	8d 8b       	std	Y+21, r24	; 0x15
    46c8:	9e 8b       	std	Y+22, r25	; 0x16
    46ca:	af 8b       	std	Y+23, r26	; 0x17
    46cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    46ce:	6d 89       	ldd	r22, Y+21	; 0x15
    46d0:	7e 89       	ldd	r23, Y+22	; 0x16
    46d2:	8f 89       	ldd	r24, Y+23	; 0x17
    46d4:	98 8d       	ldd	r25, Y+24	; 0x18
    46d6:	20 e0       	ldi	r18, 0x00	; 0
    46d8:	30 e0       	ldi	r19, 0x00	; 0
    46da:	40 e8       	ldi	r20, 0x80	; 128
    46dc:	5f e3       	ldi	r21, 0x3F	; 63
    46de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46e2:	88 23       	and	r24, r24
    46e4:	2c f4       	brge	.+10     	; 0x46f0 <H_LCD_void_writeNLatch+0x304>
		__ticks = 1;
    46e6:	81 e0       	ldi	r24, 0x01	; 1
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	9c 8b       	std	Y+20, r25	; 0x14
    46ec:	8b 8b       	std	Y+19, r24	; 0x13
    46ee:	3f c0       	rjmp	.+126    	; 0x476e <H_LCD_void_writeNLatch+0x382>
	else if (__tmp > 65535)
    46f0:	6d 89       	ldd	r22, Y+21	; 0x15
    46f2:	7e 89       	ldd	r23, Y+22	; 0x16
    46f4:	8f 89       	ldd	r24, Y+23	; 0x17
    46f6:	98 8d       	ldd	r25, Y+24	; 0x18
    46f8:	20 e0       	ldi	r18, 0x00	; 0
    46fa:	3f ef       	ldi	r19, 0xFF	; 255
    46fc:	4f e7       	ldi	r20, 0x7F	; 127
    46fe:	57 e4       	ldi	r21, 0x47	; 71
    4700:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4704:	18 16       	cp	r1, r24
    4706:	4c f5       	brge	.+82     	; 0x475a <H_LCD_void_writeNLatch+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4708:	69 8d       	ldd	r22, Y+25	; 0x19
    470a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    470c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    470e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4710:	20 e0       	ldi	r18, 0x00	; 0
    4712:	30 e0       	ldi	r19, 0x00	; 0
    4714:	40 e2       	ldi	r20, 0x20	; 32
    4716:	51 e4       	ldi	r21, 0x41	; 65
    4718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    471c:	dc 01       	movw	r26, r24
    471e:	cb 01       	movw	r24, r22
    4720:	bc 01       	movw	r22, r24
    4722:	cd 01       	movw	r24, r26
    4724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4728:	dc 01       	movw	r26, r24
    472a:	cb 01       	movw	r24, r22
    472c:	9c 8b       	std	Y+20, r25	; 0x14
    472e:	8b 8b       	std	Y+19, r24	; 0x13
    4730:	0f c0       	rjmp	.+30     	; 0x4750 <H_LCD_void_writeNLatch+0x364>
    4732:	88 e2       	ldi	r24, 0x28	; 40
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	9a 8b       	std	Y+18, r25	; 0x12
    4738:	89 8b       	std	Y+17, r24	; 0x11
    473a:	89 89       	ldd	r24, Y+17	; 0x11
    473c:	9a 89       	ldd	r25, Y+18	; 0x12
    473e:	01 97       	sbiw	r24, 0x01	; 1
    4740:	f1 f7       	brne	.-4      	; 0x473e <H_LCD_void_writeNLatch+0x352>
    4742:	9a 8b       	std	Y+18, r25	; 0x12
    4744:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4746:	8b 89       	ldd	r24, Y+19	; 0x13
    4748:	9c 89       	ldd	r25, Y+20	; 0x14
    474a:	01 97       	sbiw	r24, 0x01	; 1
    474c:	9c 8b       	std	Y+20, r25	; 0x14
    474e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4750:	8b 89       	ldd	r24, Y+19	; 0x13
    4752:	9c 89       	ldd	r25, Y+20	; 0x14
    4754:	00 97       	sbiw	r24, 0x00	; 0
    4756:	69 f7       	brne	.-38     	; 0x4732 <H_LCD_void_writeNLatch+0x346>
    4758:	14 c0       	rjmp	.+40     	; 0x4782 <H_LCD_void_writeNLatch+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    475a:	6d 89       	ldd	r22, Y+21	; 0x15
    475c:	7e 89       	ldd	r23, Y+22	; 0x16
    475e:	8f 89       	ldd	r24, Y+23	; 0x17
    4760:	98 8d       	ldd	r25, Y+24	; 0x18
    4762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4766:	dc 01       	movw	r26, r24
    4768:	cb 01       	movw	r24, r22
    476a:	9c 8b       	std	Y+20, r25	; 0x14
    476c:	8b 8b       	std	Y+19, r24	; 0x13
    476e:	8b 89       	ldd	r24, Y+19	; 0x13
    4770:	9c 89       	ldd	r25, Y+20	; 0x14
    4772:	98 8b       	std	Y+16, r25	; 0x10
    4774:	8f 87       	std	Y+15, r24	; 0x0f
    4776:	8f 85       	ldd	r24, Y+15	; 0x0f
    4778:	98 89       	ldd	r25, Y+16	; 0x10
    477a:	01 97       	sbiw	r24, 0x01	; 1
    477c:	f1 f7       	brne	.-4      	; 0x477a <H_LCD_void_writeNLatch+0x38e>
    477e:	98 8b       	std	Y+16, r25	; 0x10
    4780:	8f 87       	std	Y+15, r24	; 0x0f

		//delay
		_delay_ms(1);
		//deactivate enable
		M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    4782:	80 e0       	ldi	r24, 0x00	; 0
    4784:	62 e0       	ldi	r22, 0x02	; 2
    4786:	40 e0       	ldi	r20, 0x00	; 0
    4788:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    478c:	80 e0       	ldi	r24, 0x00	; 0
    478e:	90 e0       	ldi	r25, 0x00	; 0
    4790:	a0 ea       	ldi	r26, 0xA0	; 160
    4792:	b0 e4       	ldi	r27, 0x40	; 64
    4794:	8b 87       	std	Y+11, r24	; 0x0b
    4796:	9c 87       	std	Y+12, r25	; 0x0c
    4798:	ad 87       	std	Y+13, r26	; 0x0d
    479a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    479c:	6b 85       	ldd	r22, Y+11	; 0x0b
    479e:	7c 85       	ldd	r23, Y+12	; 0x0c
    47a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    47a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    47a4:	20 e0       	ldi	r18, 0x00	; 0
    47a6:	30 e0       	ldi	r19, 0x00	; 0
    47a8:	48 ec       	ldi	r20, 0xC8	; 200
    47aa:	53 e4       	ldi	r21, 0x43	; 67
    47ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b0:	dc 01       	movw	r26, r24
    47b2:	cb 01       	movw	r24, r22
    47b4:	8f 83       	std	Y+7, r24	; 0x07
    47b6:	98 87       	std	Y+8, r25	; 0x08
    47b8:	a9 87       	std	Y+9, r26	; 0x09
    47ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47bc:	6f 81       	ldd	r22, Y+7	; 0x07
    47be:	78 85       	ldd	r23, Y+8	; 0x08
    47c0:	89 85       	ldd	r24, Y+9	; 0x09
    47c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    47c4:	20 e0       	ldi	r18, 0x00	; 0
    47c6:	30 e0       	ldi	r19, 0x00	; 0
    47c8:	40 e8       	ldi	r20, 0x80	; 128
    47ca:	5f e3       	ldi	r21, 0x3F	; 63
    47cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47d0:	88 23       	and	r24, r24
    47d2:	2c f4       	brge	.+10     	; 0x47de <H_LCD_void_writeNLatch+0x3f2>
		__ticks = 1;
    47d4:	81 e0       	ldi	r24, 0x01	; 1
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	9e 83       	std	Y+6, r25	; 0x06
    47da:	8d 83       	std	Y+5, r24	; 0x05
    47dc:	3f c0       	rjmp	.+126    	; 0x485c <H_LCD_void_writeNLatch+0x470>
	else if (__tmp > 65535)
    47de:	6f 81       	ldd	r22, Y+7	; 0x07
    47e0:	78 85       	ldd	r23, Y+8	; 0x08
    47e2:	89 85       	ldd	r24, Y+9	; 0x09
    47e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    47e6:	20 e0       	ldi	r18, 0x00	; 0
    47e8:	3f ef       	ldi	r19, 0xFF	; 255
    47ea:	4f e7       	ldi	r20, 0x7F	; 127
    47ec:	57 e4       	ldi	r21, 0x47	; 71
    47ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47f2:	18 16       	cp	r1, r24
    47f4:	4c f5       	brge	.+82     	; 0x4848 <H_LCD_void_writeNLatch+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    47f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    47fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    47fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    47fe:	20 e0       	ldi	r18, 0x00	; 0
    4800:	30 e0       	ldi	r19, 0x00	; 0
    4802:	40 e2       	ldi	r20, 0x20	; 32
    4804:	51 e4       	ldi	r21, 0x41	; 65
    4806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    480a:	dc 01       	movw	r26, r24
    480c:	cb 01       	movw	r24, r22
    480e:	bc 01       	movw	r22, r24
    4810:	cd 01       	movw	r24, r26
    4812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4816:	dc 01       	movw	r26, r24
    4818:	cb 01       	movw	r24, r22
    481a:	9e 83       	std	Y+6, r25	; 0x06
    481c:	8d 83       	std	Y+5, r24	; 0x05
    481e:	0f c0       	rjmp	.+30     	; 0x483e <H_LCD_void_writeNLatch+0x452>
    4820:	88 e2       	ldi	r24, 0x28	; 40
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	9c 83       	std	Y+4, r25	; 0x04
    4826:	8b 83       	std	Y+3, r24	; 0x03
    4828:	8b 81       	ldd	r24, Y+3	; 0x03
    482a:	9c 81       	ldd	r25, Y+4	; 0x04
    482c:	01 97       	sbiw	r24, 0x01	; 1
    482e:	f1 f7       	brne	.-4      	; 0x482c <H_LCD_void_writeNLatch+0x440>
    4830:	9c 83       	std	Y+4, r25	; 0x04
    4832:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4834:	8d 81       	ldd	r24, Y+5	; 0x05
    4836:	9e 81       	ldd	r25, Y+6	; 0x06
    4838:	01 97       	sbiw	r24, 0x01	; 1
    483a:	9e 83       	std	Y+6, r25	; 0x06
    483c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    483e:	8d 81       	ldd	r24, Y+5	; 0x05
    4840:	9e 81       	ldd	r25, Y+6	; 0x06
    4842:	00 97       	sbiw	r24, 0x00	; 0
    4844:	69 f7       	brne	.-38     	; 0x4820 <H_LCD_void_writeNLatch+0x434>
    4846:	14 c0       	rjmp	.+40     	; 0x4870 <H_LCD_void_writeNLatch+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4848:	6f 81       	ldd	r22, Y+7	; 0x07
    484a:	78 85       	ldd	r23, Y+8	; 0x08
    484c:	89 85       	ldd	r24, Y+9	; 0x09
    484e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4854:	dc 01       	movw	r26, r24
    4856:	cb 01       	movw	r24, r22
    4858:	9e 83       	std	Y+6, r25	; 0x06
    485a:	8d 83       	std	Y+5, r24	; 0x05
    485c:	8d 81       	ldd	r24, Y+5	; 0x05
    485e:	9e 81       	ldd	r25, Y+6	; 0x06
    4860:	9a 83       	std	Y+2, r25	; 0x02
    4862:	89 83       	std	Y+1, r24	; 0x01
    4864:	89 81       	ldd	r24, Y+1	; 0x01
    4866:	9a 81       	ldd	r25, Y+2	; 0x02
    4868:	01 97       	sbiw	r24, 0x01	; 1
    486a:	f1 f7       	brne	.-4      	; 0x4868 <H_LCD_void_writeNLatch+0x47c>
    486c:	9a 83       	std	Y+2, r25	; 0x02
    486e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
#else
  #error("wrong lcd mode")
#endif

}
    4870:	e9 96       	adiw	r28, 0x39	; 57
    4872:	0f b6       	in	r0, 0x3f	; 63
    4874:	f8 94       	cli
    4876:	de bf       	out	0x3e, r29	; 62
    4878:	0f be       	out	0x3f, r0	; 63
    487a:	cd bf       	out	0x3d, r28	; 61
    487c:	cf 91       	pop	r28
    487e:	df 91       	pop	r29
    4880:	08 95       	ret

00004882 <H_KEYPAD_void_init>:
#include"KEYPAD_config.h"
#include"KEYPAD_int.h"
#include<util/delay.h>

void H_KEYPAD_void_init()
{
    4882:	df 93       	push	r29
    4884:	cf 93       	push	r28
    4886:	cd b7       	in	r28, 0x3d	; 61
    4888:	de b7       	in	r29, 0x3e	; 62
	//set all rows  direction as output
	M_DIO_void_setPinDir(KEYPAD_R0_PORT, KEYPAD_R0_PIN, OUT);
    488a:	81 e0       	ldi	r24, 0x01	; 1
    488c:	64 e0       	ldi	r22, 0x04	; 4
    488e:	41 e0       	ldi	r20, 0x01	; 1
    4890:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R1_PORT, KEYPAD_R1_PIN, OUT);
    4894:	81 e0       	ldi	r24, 0x01	; 1
    4896:	65 e0       	ldi	r22, 0x05	; 5
    4898:	41 e0       	ldi	r20, 0x01	; 1
    489a:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R2_PORT, KEYPAD_R2_PIN, OUT);
    489e:	81 e0       	ldi	r24, 0x01	; 1
    48a0:	66 e0       	ldi	r22, 0x06	; 6
    48a2:	41 e0       	ldi	r20, 0x01	; 1
    48a4:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R3_PORT, KEYPAD_R3_PIN, OUT);
    48a8:	81 e0       	ldi	r24, 0x01	; 1
    48aa:	67 e0       	ldi	r22, 0x07	; 7
    48ac:	41 e0       	ldi	r20, 0x01	; 1
    48ae:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>

	//set all collums direction as input
	M_DIO_void_setPinDir(KEYPAD_C0_PORT, KEYPAD_C0_PIN, IN);
    48b2:	83 e0       	ldi	r24, 0x03	; 3
    48b4:	62 e0       	ldi	r22, 0x02	; 2
    48b6:	40 e0       	ldi	r20, 0x00	; 0
    48b8:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C1_PORT, KEYPAD_C1_PIN, IN);
    48bc:	83 e0       	ldi	r24, 0x03	; 3
    48be:	63 e0       	ldi	r22, 0x03	; 3
    48c0:	40 e0       	ldi	r20, 0x00	; 0
    48c2:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C2_PORT, KEYPAD_C2_PIN, IN);
    48c6:	83 e0       	ldi	r24, 0x03	; 3
    48c8:	64 e0       	ldi	r22, 0x04	; 4
    48ca:	40 e0       	ldi	r20, 0x00	; 0
    48cc:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C3_PORT, KEYPAD_C3_PIN, IN);
    48d0:	83 e0       	ldi	r24, 0x03	; 3
    48d2:	65 e0       	ldi	r22, 0x05	; 5
    48d4:	40 e0       	ldi	r20, 0x00	; 0
    48d6:	0e 94 3a 0c 	call	0x1874	; 0x1874 <M_DIO_void_setPinDir>

	//deactivate rows (high)
	M_DIO_void_setPinValue(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
    48da:	81 e0       	ldi	r24, 0x01	; 1
    48dc:	64 e0       	ldi	r22, 0x04	; 4
    48de:	41 e0       	ldi	r20, 0x01	; 1
    48e0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R1_PORT,KEYPAD_R1_PIN,HIGH);
    48e4:	81 e0       	ldi	r24, 0x01	; 1
    48e6:	65 e0       	ldi	r22, 0x05	; 5
    48e8:	41 e0       	ldi	r20, 0x01	; 1
    48ea:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R2_PORT,KEYPAD_R2_PIN,HIGH);
    48ee:	81 e0       	ldi	r24, 0x01	; 1
    48f0:	66 e0       	ldi	r22, 0x06	; 6
    48f2:	41 e0       	ldi	r20, 0x01	; 1
    48f4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R3_PORT,KEYPAD_R3_PIN,HIGH);
    48f8:	81 e0       	ldi	r24, 0x01	; 1
    48fa:	67 e0       	ldi	r22, 0x07	; 7
    48fc:	41 e0       	ldi	r20, 0x01	; 1
    48fe:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
    }
    4902:	cf 91       	pop	r28
    4904:	df 91       	pop	r29
    4906:	08 95       	ret

00004908 <H_KEYPAD_void_getPressedKey>:

u8 H_KEYPAD_void_getPressedKey()
{
    4908:	df 93       	push	r29
    490a:	cf 93       	push	r28
    490c:	cd b7       	in	r28, 0x3d	; 61
    490e:	de b7       	in	r29, 0x3e	; 62
    4910:	a8 97       	sbiw	r28, 0x28	; 40
    4912:	0f b6       	in	r0, 0x3f	; 63
    4914:	f8 94       	cli
    4916:	de bf       	out	0x3e, r29	; 62
    4918:	0f be       	out	0x3f, r0	; 63
    491a:	cd bf       	out	0x3d, r28	; 61
	u8 loc_Key= NUM_PRESSED_KEY ;
    491c:	8f ef       	ldi	r24, 0xFF	; 255
    491e:	89 8b       	std	Y+17, r24	; 0x11
	u8 loc_row_indx;
	u8 loc_col_indx;
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
    4920:	ce 01       	movw	r24, r28
    4922:	42 96       	adiw	r24, 0x12	; 18
    4924:	9d a3       	std	Y+37, r25	; 0x25
    4926:	8c a3       	std	Y+36, r24	; 0x24
    4928:	ee e7       	ldi	r30, 0x7E	; 126
    492a:	f1 e0       	ldi	r31, 0x01	; 1
    492c:	ff a3       	std	Y+39, r31	; 0x27
    492e:	ee a3       	std	Y+38, r30	; 0x26
    4930:	f0 e1       	ldi	r31, 0x10	; 16
    4932:	f8 a7       	std	Y+40, r31	; 0x28
    4934:	ee a1       	ldd	r30, Y+38	; 0x26
    4936:	ff a1       	ldd	r31, Y+39	; 0x27
    4938:	00 80       	ld	r0, Z
    493a:	8e a1       	ldd	r24, Y+38	; 0x26
    493c:	9f a1       	ldd	r25, Y+39	; 0x27
    493e:	01 96       	adiw	r24, 0x01	; 1
    4940:	9f a3       	std	Y+39, r25	; 0x27
    4942:	8e a3       	std	Y+38, r24	; 0x26
    4944:	ec a1       	ldd	r30, Y+36	; 0x24
    4946:	fd a1       	ldd	r31, Y+37	; 0x25
    4948:	00 82       	st	Z, r0
    494a:	8c a1       	ldd	r24, Y+36	; 0x24
    494c:	9d a1       	ldd	r25, Y+37	; 0x25
    494e:	01 96       	adiw	r24, 0x01	; 1
    4950:	9d a3       	std	Y+37, r25	; 0x25
    4952:	8c a3       	std	Y+36, r24	; 0x24
    4954:	98 a5       	ldd	r25, Y+40	; 0x28
    4956:	91 50       	subi	r25, 0x01	; 1
    4958:	98 a7       	std	Y+40, r25	; 0x28
    495a:	e8 a5       	ldd	r30, Y+40	; 0x28
    495c:	ee 23       	and	r30, r30
    495e:	51 f7       	brne	.-44     	; 0x4934 <H_KEYPAD_void_getPressedKey+0x2c>
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
    4960:	84 e0       	ldi	r24, 0x04	; 4
    4962:	88 8b       	std	Y+16, r24	; 0x10
    4964:	c9 c0       	rjmp	.+402    	; 0x4af8 <H_KEYPAD_void_getPressedKey+0x1f0>
	{
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,LOW);
    4966:	81 e0       	ldi	r24, 0x01	; 1
    4968:	68 89       	ldd	r22, Y+16	; 0x10
    496a:	40 e0       	ldi	r20, 0x00	; 0
    496c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
		for (loc_col_indx=KEYPAD_C0_PIN;loc_col_indx<=KEYPAD_C3_PIN;loc_col_indx ++)
    4970:	82 e0       	ldi	r24, 0x02	; 2
    4972:	8f 87       	std	Y+15, r24	; 0x0f
    4974:	b5 c0       	rjmp	.+362    	; 0x4ae0 <H_KEYPAD_void_getPressedKey+0x1d8>
		{
			M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    4976:	9e 01       	movw	r18, r28
    4978:	2e 5d       	subi	r18, 0xDE	; 222
    497a:	3f 4f       	sbci	r19, 0xFF	; 255
    497c:	83 e0       	ldi	r24, 0x03	; 3
    497e:	6f 85       	ldd	r22, Y+15	; 0x0f
    4980:	a9 01       	movw	r20, r18
    4982:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <M_DIO_void_getPinValue>
			if(read==ACTIVE_LOW_PRESSED)
    4986:	8a a1       	ldd	r24, Y+34	; 0x22
    4988:	88 23       	and	r24, r24
    498a:	09 f0       	breq	.+2      	; 0x498e <H_KEYPAD_void_getPressedKey+0x86>
    498c:	a6 c0       	rjmp	.+332    	; 0x4ada <H_KEYPAD_void_getPressedKey+0x1d2>
    498e:	80 e0       	ldi	r24, 0x00	; 0
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	a8 ec       	ldi	r26, 0xC8	; 200
    4994:	b2 e4       	ldi	r27, 0x42	; 66
    4996:	8b 87       	std	Y+11, r24	; 0x0b
    4998:	9c 87       	std	Y+12, r25	; 0x0c
    499a:	ad 87       	std	Y+13, r26	; 0x0d
    499c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    499e:	6b 85       	ldd	r22, Y+11	; 0x0b
    49a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    49a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    49a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    49a6:	20 e0       	ldi	r18, 0x00	; 0
    49a8:	30 e0       	ldi	r19, 0x00	; 0
    49aa:	48 ec       	ldi	r20, 0xC8	; 200
    49ac:	53 e4       	ldi	r21, 0x43	; 67
    49ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49b2:	dc 01       	movw	r26, r24
    49b4:	cb 01       	movw	r24, r22
    49b6:	8f 83       	std	Y+7, r24	; 0x07
    49b8:	98 87       	std	Y+8, r25	; 0x08
    49ba:	a9 87       	std	Y+9, r26	; 0x09
    49bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49be:	6f 81       	ldd	r22, Y+7	; 0x07
    49c0:	78 85       	ldd	r23, Y+8	; 0x08
    49c2:	89 85       	ldd	r24, Y+9	; 0x09
    49c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    49c6:	20 e0       	ldi	r18, 0x00	; 0
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	40 e8       	ldi	r20, 0x80	; 128
    49cc:	5f e3       	ldi	r21, 0x3F	; 63
    49ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49d2:	88 23       	and	r24, r24
    49d4:	2c f4       	brge	.+10     	; 0x49e0 <H_KEYPAD_void_getPressedKey+0xd8>
		__ticks = 1;
    49d6:	81 e0       	ldi	r24, 0x01	; 1
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	9e 83       	std	Y+6, r25	; 0x06
    49dc:	8d 83       	std	Y+5, r24	; 0x05
    49de:	3f c0       	rjmp	.+126    	; 0x4a5e <H_KEYPAD_void_getPressedKey+0x156>
	else if (__tmp > 65535)
    49e0:	6f 81       	ldd	r22, Y+7	; 0x07
    49e2:	78 85       	ldd	r23, Y+8	; 0x08
    49e4:	89 85       	ldd	r24, Y+9	; 0x09
    49e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    49e8:	20 e0       	ldi	r18, 0x00	; 0
    49ea:	3f ef       	ldi	r19, 0xFF	; 255
    49ec:	4f e7       	ldi	r20, 0x7F	; 127
    49ee:	57 e4       	ldi	r21, 0x47	; 71
    49f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49f4:	18 16       	cp	r1, r24
    49f6:	4c f5       	brge	.+82     	; 0x4a4a <H_KEYPAD_void_getPressedKey+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    49fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    49fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    49fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a00:	20 e0       	ldi	r18, 0x00	; 0
    4a02:	30 e0       	ldi	r19, 0x00	; 0
    4a04:	40 e2       	ldi	r20, 0x20	; 32
    4a06:	51 e4       	ldi	r21, 0x41	; 65
    4a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a0c:	dc 01       	movw	r26, r24
    4a0e:	cb 01       	movw	r24, r22
    4a10:	bc 01       	movw	r22, r24
    4a12:	cd 01       	movw	r24, r26
    4a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a18:	dc 01       	movw	r26, r24
    4a1a:	cb 01       	movw	r24, r22
    4a1c:	9e 83       	std	Y+6, r25	; 0x06
    4a1e:	8d 83       	std	Y+5, r24	; 0x05
    4a20:	0f c0       	rjmp	.+30     	; 0x4a40 <H_KEYPAD_void_getPressedKey+0x138>
    4a22:	88 e2       	ldi	r24, 0x28	; 40
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	9c 83       	std	Y+4, r25	; 0x04
    4a28:	8b 83       	std	Y+3, r24	; 0x03
    4a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    4a2e:	01 97       	sbiw	r24, 0x01	; 1
    4a30:	f1 f7       	brne	.-4      	; 0x4a2e <H_KEYPAD_void_getPressedKey+0x126>
    4a32:	9c 83       	std	Y+4, r25	; 0x04
    4a34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a36:	8d 81       	ldd	r24, Y+5	; 0x05
    4a38:	9e 81       	ldd	r25, Y+6	; 0x06
    4a3a:	01 97       	sbiw	r24, 0x01	; 1
    4a3c:	9e 83       	std	Y+6, r25	; 0x06
    4a3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a40:	8d 81       	ldd	r24, Y+5	; 0x05
    4a42:	9e 81       	ldd	r25, Y+6	; 0x06
    4a44:	00 97       	sbiw	r24, 0x00	; 0
    4a46:	69 f7       	brne	.-38     	; 0x4a22 <H_KEYPAD_void_getPressedKey+0x11a>
    4a48:	14 c0       	rjmp	.+40     	; 0x4a72 <H_KEYPAD_void_getPressedKey+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    4a4c:	78 85       	ldd	r23, Y+8	; 0x08
    4a4e:	89 85       	ldd	r24, Y+9	; 0x09
    4a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a56:	dc 01       	movw	r26, r24
    4a58:	cb 01       	movw	r24, r22
    4a5a:	9e 83       	std	Y+6, r25	; 0x06
    4a5c:	8d 83       	std	Y+5, r24	; 0x05
    4a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a60:	9e 81       	ldd	r25, Y+6	; 0x06
    4a62:	9a 83       	std	Y+2, r25	; 0x02
    4a64:	89 83       	std	Y+1, r24	; 0x01
    4a66:	89 81       	ldd	r24, Y+1	; 0x01
    4a68:	9a 81       	ldd	r25, Y+2	; 0x02
    4a6a:	01 97       	sbiw	r24, 0x01	; 1
    4a6c:	f1 f7       	brne	.-4      	; 0x4a6a <H_KEYPAD_void_getPressedKey+0x162>
    4a6e:	9a 83       	std	Y+2, r25	; 0x02
    4a70:	89 83       	std	Y+1, r24	; 0x01
			{
				//debouncing delay
				_delay_ms(100);
				M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    4a72:	9e 01       	movw	r18, r28
    4a74:	2e 5d       	subi	r18, 0xDE	; 222
    4a76:	3f 4f       	sbci	r19, 0xFF	; 255
    4a78:	83 e0       	ldi	r24, 0x03	; 3
    4a7a:	6f 85       	ldd	r22, Y+15	; 0x0f
    4a7c:	a9 01       	movw	r20, r18
    4a7e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <M_DIO_void_getPinValue>
				if(read==ACTIVE_LOW_PRESSED)
    4a82:	8a a1       	ldd	r24, Y+34	; 0x22
    4a84:	88 23       	and	r24, r24
    4a86:	49 f5       	brne	.+82     	; 0x4ada <H_KEYPAD_void_getPressedKey+0x1d2>
    4a88:	08 c0       	rjmp	.+16     	; 0x4a9a <H_KEYPAD_void_getPressedKey+0x192>
				{

						while(read==ACTIVE_LOW_PRESSED)
						{
							M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    4a8a:	9e 01       	movw	r18, r28
    4a8c:	2e 5d       	subi	r18, 0xDE	; 222
    4a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a90:	83 e0       	ldi	r24, 0x03	; 3
    4a92:	6f 85       	ldd	r22, Y+15	; 0x0f
    4a94:	a9 01       	movw	r20, r18
    4a96:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <M_DIO_void_getPinValue>
				_delay_ms(100);
				M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
				if(read==ACTIVE_LOW_PRESSED)
				{

						while(read==ACTIVE_LOW_PRESSED)
    4a9a:	8a a1       	ldd	r24, Y+34	; 0x22
    4a9c:	88 23       	and	r24, r24
    4a9e:	a9 f3       	breq	.-22     	; 0x4a8a <H_KEYPAD_void_getPressedKey+0x182>
						{
							M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
						}//while
						loc_Key =loc_keypad_arr[loc_row_indx - KEYPAD_R0_PIN][loc_col_indx - KEYPAD_C0_PIN];
    4aa0:	88 89       	ldd	r24, Y+16	; 0x10
    4aa2:	88 2f       	mov	r24, r24
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	9c 01       	movw	r18, r24
    4aa8:	24 50       	subi	r18, 0x04	; 4
    4aaa:	30 40       	sbci	r19, 0x00	; 0
    4aac:	8f 85       	ldd	r24, Y+15	; 0x0f
    4aae:	88 2f       	mov	r24, r24
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	ac 01       	movw	r20, r24
    4ab4:	42 50       	subi	r20, 0x02	; 2
    4ab6:	50 40       	sbci	r21, 0x00	; 0
    4ab8:	22 0f       	add	r18, r18
    4aba:	33 1f       	adc	r19, r19
    4abc:	22 0f       	add	r18, r18
    4abe:	33 1f       	adc	r19, r19
    4ac0:	ce 01       	movw	r24, r28
    4ac2:	01 96       	adiw	r24, 0x01	; 1
    4ac4:	82 0f       	add	r24, r18
    4ac6:	93 1f       	adc	r25, r19
    4ac8:	84 0f       	add	r24, r20
    4aca:	95 1f       	adc	r25, r21
    4acc:	fc 01       	movw	r30, r24
    4ace:	71 96       	adiw	r30, 0x11	; 17
    4ad0:	80 81       	ld	r24, Z
    4ad2:	89 8b       	std	Y+17, r24	; 0x11
						return loc_Key;
    4ad4:	f9 89       	ldd	r31, Y+17	; 0x11
    4ad6:	fb a3       	std	Y+35, r31	; 0x23
    4ad8:	15 c0       	rjmp	.+42     	; 0x4b04 <H_KEYPAD_void_getPressedKey+0x1fc>
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
	{
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,LOW);
		for (loc_col_indx=KEYPAD_C0_PIN;loc_col_indx<=KEYPAD_C3_PIN;loc_col_indx ++)
    4ada:	8f 85       	ldd	r24, Y+15	; 0x0f
    4adc:	8f 5f       	subi	r24, 0xFF	; 255
    4ade:	8f 87       	std	Y+15, r24	; 0x0f
    4ae0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ae2:	86 30       	cpi	r24, 0x06	; 6
    4ae4:	08 f4       	brcc	.+2      	; 0x4ae8 <H_KEYPAD_void_getPressedKey+0x1e0>
    4ae6:	47 cf       	rjmp	.-370    	; 0x4976 <H_KEYPAD_void_getPressedKey+0x6e>
					}// if 2nd reading
				}// if 1St reading

			}// for
			// Deactivate row (HIGH )
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,HIGH);
    4ae8:	81 e0       	ldi	r24, 0x01	; 1
    4aea:	68 89       	ldd	r22, Y+16	; 0x10
    4aec:	41 e0       	ldi	r20, 0x01	; 1
    4aee:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <M_DIO_void_setPinValue>
	u8 loc_Key= NUM_PRESSED_KEY ;
	u8 loc_row_indx;
	u8 loc_col_indx;
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
    4af2:	88 89       	ldd	r24, Y+16	; 0x10
    4af4:	8f 5f       	subi	r24, 0xFF	; 255
    4af6:	88 8b       	std	Y+16, r24	; 0x10
    4af8:	88 89       	ldd	r24, Y+16	; 0x10
    4afa:	88 30       	cpi	r24, 0x08	; 8
    4afc:	08 f4       	brcc	.+2      	; 0x4b00 <H_KEYPAD_void_getPressedKey+0x1f8>
    4afe:	33 cf       	rjmp	.-410    	; 0x4966 <H_KEYPAD_void_getPressedKey+0x5e>

			}// for
			// Deactivate row (HIGH )
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,HIGH);
		}
		return loc_Key;
    4b00:	89 89       	ldd	r24, Y+17	; 0x11
    4b02:	8b a3       	std	Y+35, r24	; 0x23
    4b04:	8b a1       	ldd	r24, Y+35	; 0x23
	}
    4b06:	a8 96       	adiw	r28, 0x28	; 40
    4b08:	0f b6       	in	r0, 0x3f	; 63
    4b0a:	f8 94       	cli
    4b0c:	de bf       	out	0x3e, r29	; 62
    4b0e:	0f be       	out	0x3f, r0	; 63
    4b10:	cd bf       	out	0x3d, r28	; 61
    4b12:	cf 91       	pop	r28
    4b14:	df 91       	pop	r29
    4b16:	08 95       	ret

00004b18 <main>:


#if(1)

void main()
{
    4b18:	df 93       	push	r29
    4b1a:	cf 93       	push	r28
    4b1c:	cd b7       	in	r28, 0x3d	; 61
    4b1e:	de b7       	in	r29, 0x3e	; 62
  H_LCD_void_Init();
    4b20:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <H_LCD_void_Init>
  H_LCD_void_sendData("H");
    4b24:	80 e6       	ldi	r24, 0x60	; 96
    4b26:	90 e0       	ldi	r25, 0x00	; 0
    4b28:	0e 94 43 20 	call	0x4086	; 0x4086 <H_LCD_void_sendData>
    4b2c:	ff cf       	rjmp	.-2      	; 0x4b2c <main+0x14>

00004b2e <__mulsi3>:
    4b2e:	62 9f       	mul	r22, r18
    4b30:	d0 01       	movw	r26, r0
    4b32:	73 9f       	mul	r23, r19
    4b34:	f0 01       	movw	r30, r0
    4b36:	82 9f       	mul	r24, r18
    4b38:	e0 0d       	add	r30, r0
    4b3a:	f1 1d       	adc	r31, r1
    4b3c:	64 9f       	mul	r22, r20
    4b3e:	e0 0d       	add	r30, r0
    4b40:	f1 1d       	adc	r31, r1
    4b42:	92 9f       	mul	r25, r18
    4b44:	f0 0d       	add	r31, r0
    4b46:	83 9f       	mul	r24, r19
    4b48:	f0 0d       	add	r31, r0
    4b4a:	74 9f       	mul	r23, r20
    4b4c:	f0 0d       	add	r31, r0
    4b4e:	65 9f       	mul	r22, r21
    4b50:	f0 0d       	add	r31, r0
    4b52:	99 27       	eor	r25, r25
    4b54:	72 9f       	mul	r23, r18
    4b56:	b0 0d       	add	r27, r0
    4b58:	e1 1d       	adc	r30, r1
    4b5a:	f9 1f       	adc	r31, r25
    4b5c:	63 9f       	mul	r22, r19
    4b5e:	b0 0d       	add	r27, r0
    4b60:	e1 1d       	adc	r30, r1
    4b62:	f9 1f       	adc	r31, r25
    4b64:	bd 01       	movw	r22, r26
    4b66:	cf 01       	movw	r24, r30
    4b68:	11 24       	eor	r1, r1
    4b6a:	08 95       	ret

00004b6c <__udivmodqi4>:
    4b6c:	99 1b       	sub	r25, r25
    4b6e:	79 e0       	ldi	r23, 0x09	; 9
    4b70:	04 c0       	rjmp	.+8      	; 0x4b7a <__udivmodqi4_ep>

00004b72 <__udivmodqi4_loop>:
    4b72:	99 1f       	adc	r25, r25
    4b74:	96 17       	cp	r25, r22
    4b76:	08 f0       	brcs	.+2      	; 0x4b7a <__udivmodqi4_ep>
    4b78:	96 1b       	sub	r25, r22

00004b7a <__udivmodqi4_ep>:
    4b7a:	88 1f       	adc	r24, r24
    4b7c:	7a 95       	dec	r23
    4b7e:	c9 f7       	brne	.-14     	; 0x4b72 <__udivmodqi4_loop>
    4b80:	80 95       	com	r24
    4b82:	08 95       	ret

00004b84 <__divmodhi4>:
    4b84:	97 fb       	bst	r25, 7
    4b86:	09 2e       	mov	r0, r25
    4b88:	07 26       	eor	r0, r23
    4b8a:	0a d0       	rcall	.+20     	; 0x4ba0 <__divmodhi4_neg1>
    4b8c:	77 fd       	sbrc	r23, 7
    4b8e:	04 d0       	rcall	.+8      	; 0x4b98 <__divmodhi4_neg2>
    4b90:	27 d0       	rcall	.+78     	; 0x4be0 <__udivmodhi4>
    4b92:	06 d0       	rcall	.+12     	; 0x4ba0 <__divmodhi4_neg1>
    4b94:	00 20       	and	r0, r0
    4b96:	1a f4       	brpl	.+6      	; 0x4b9e <__divmodhi4_exit>

00004b98 <__divmodhi4_neg2>:
    4b98:	70 95       	com	r23
    4b9a:	61 95       	neg	r22
    4b9c:	7f 4f       	sbci	r23, 0xFF	; 255

00004b9e <__divmodhi4_exit>:
    4b9e:	08 95       	ret

00004ba0 <__divmodhi4_neg1>:
    4ba0:	f6 f7       	brtc	.-4      	; 0x4b9e <__divmodhi4_exit>
    4ba2:	90 95       	com	r25
    4ba4:	81 95       	neg	r24
    4ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ba8:	08 95       	ret

00004baa <__divmodsi4>:
    4baa:	97 fb       	bst	r25, 7
    4bac:	09 2e       	mov	r0, r25
    4bae:	05 26       	eor	r0, r21
    4bb0:	0e d0       	rcall	.+28     	; 0x4bce <__divmodsi4_neg1>
    4bb2:	57 fd       	sbrc	r21, 7
    4bb4:	04 d0       	rcall	.+8      	; 0x4bbe <__divmodsi4_neg2>
    4bb6:	28 d0       	rcall	.+80     	; 0x4c08 <__udivmodsi4>
    4bb8:	0a d0       	rcall	.+20     	; 0x4bce <__divmodsi4_neg1>
    4bba:	00 1c       	adc	r0, r0
    4bbc:	38 f4       	brcc	.+14     	; 0x4bcc <__divmodsi4_exit>

00004bbe <__divmodsi4_neg2>:
    4bbe:	50 95       	com	r21
    4bc0:	40 95       	com	r20
    4bc2:	30 95       	com	r19
    4bc4:	21 95       	neg	r18
    4bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    4bc8:	4f 4f       	sbci	r20, 0xFF	; 255
    4bca:	5f 4f       	sbci	r21, 0xFF	; 255

00004bcc <__divmodsi4_exit>:
    4bcc:	08 95       	ret

00004bce <__divmodsi4_neg1>:
    4bce:	f6 f7       	brtc	.-4      	; 0x4bcc <__divmodsi4_exit>
    4bd0:	90 95       	com	r25
    4bd2:	80 95       	com	r24
    4bd4:	70 95       	com	r23
    4bd6:	61 95       	neg	r22
    4bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    4bda:	8f 4f       	sbci	r24, 0xFF	; 255
    4bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    4bde:	08 95       	ret

00004be0 <__udivmodhi4>:
    4be0:	aa 1b       	sub	r26, r26
    4be2:	bb 1b       	sub	r27, r27
    4be4:	51 e1       	ldi	r21, 0x11	; 17
    4be6:	07 c0       	rjmp	.+14     	; 0x4bf6 <__udivmodhi4_ep>

00004be8 <__udivmodhi4_loop>:
    4be8:	aa 1f       	adc	r26, r26
    4bea:	bb 1f       	adc	r27, r27
    4bec:	a6 17       	cp	r26, r22
    4bee:	b7 07       	cpc	r27, r23
    4bf0:	10 f0       	brcs	.+4      	; 0x4bf6 <__udivmodhi4_ep>
    4bf2:	a6 1b       	sub	r26, r22
    4bf4:	b7 0b       	sbc	r27, r23

00004bf6 <__udivmodhi4_ep>:
    4bf6:	88 1f       	adc	r24, r24
    4bf8:	99 1f       	adc	r25, r25
    4bfa:	5a 95       	dec	r21
    4bfc:	a9 f7       	brne	.-22     	; 0x4be8 <__udivmodhi4_loop>
    4bfe:	80 95       	com	r24
    4c00:	90 95       	com	r25
    4c02:	bc 01       	movw	r22, r24
    4c04:	cd 01       	movw	r24, r26
    4c06:	08 95       	ret

00004c08 <__udivmodsi4>:
    4c08:	a1 e2       	ldi	r26, 0x21	; 33
    4c0a:	1a 2e       	mov	r1, r26
    4c0c:	aa 1b       	sub	r26, r26
    4c0e:	bb 1b       	sub	r27, r27
    4c10:	fd 01       	movw	r30, r26
    4c12:	0d c0       	rjmp	.+26     	; 0x4c2e <__udivmodsi4_ep>

00004c14 <__udivmodsi4_loop>:
    4c14:	aa 1f       	adc	r26, r26
    4c16:	bb 1f       	adc	r27, r27
    4c18:	ee 1f       	adc	r30, r30
    4c1a:	ff 1f       	adc	r31, r31
    4c1c:	a2 17       	cp	r26, r18
    4c1e:	b3 07       	cpc	r27, r19
    4c20:	e4 07       	cpc	r30, r20
    4c22:	f5 07       	cpc	r31, r21
    4c24:	20 f0       	brcs	.+8      	; 0x4c2e <__udivmodsi4_ep>
    4c26:	a2 1b       	sub	r26, r18
    4c28:	b3 0b       	sbc	r27, r19
    4c2a:	e4 0b       	sbc	r30, r20
    4c2c:	f5 0b       	sbc	r31, r21

00004c2e <__udivmodsi4_ep>:
    4c2e:	66 1f       	adc	r22, r22
    4c30:	77 1f       	adc	r23, r23
    4c32:	88 1f       	adc	r24, r24
    4c34:	99 1f       	adc	r25, r25
    4c36:	1a 94       	dec	r1
    4c38:	69 f7       	brne	.-38     	; 0x4c14 <__udivmodsi4_loop>
    4c3a:	60 95       	com	r22
    4c3c:	70 95       	com	r23
    4c3e:	80 95       	com	r24
    4c40:	90 95       	com	r25
    4c42:	9b 01       	movw	r18, r22
    4c44:	ac 01       	movw	r20, r24
    4c46:	bd 01       	movw	r22, r26
    4c48:	cf 01       	movw	r24, r30
    4c4a:	08 95       	ret

00004c4c <__prologue_saves__>:
    4c4c:	2f 92       	push	r2
    4c4e:	3f 92       	push	r3
    4c50:	4f 92       	push	r4
    4c52:	5f 92       	push	r5
    4c54:	6f 92       	push	r6
    4c56:	7f 92       	push	r7
    4c58:	8f 92       	push	r8
    4c5a:	9f 92       	push	r9
    4c5c:	af 92       	push	r10
    4c5e:	bf 92       	push	r11
    4c60:	cf 92       	push	r12
    4c62:	df 92       	push	r13
    4c64:	ef 92       	push	r14
    4c66:	ff 92       	push	r15
    4c68:	0f 93       	push	r16
    4c6a:	1f 93       	push	r17
    4c6c:	cf 93       	push	r28
    4c6e:	df 93       	push	r29
    4c70:	cd b7       	in	r28, 0x3d	; 61
    4c72:	de b7       	in	r29, 0x3e	; 62
    4c74:	ca 1b       	sub	r28, r26
    4c76:	db 0b       	sbc	r29, r27
    4c78:	0f b6       	in	r0, 0x3f	; 63
    4c7a:	f8 94       	cli
    4c7c:	de bf       	out	0x3e, r29	; 62
    4c7e:	0f be       	out	0x3f, r0	; 63
    4c80:	cd bf       	out	0x3d, r28	; 61
    4c82:	09 94       	ijmp

00004c84 <__epilogue_restores__>:
    4c84:	2a 88       	ldd	r2, Y+18	; 0x12
    4c86:	39 88       	ldd	r3, Y+17	; 0x11
    4c88:	48 88       	ldd	r4, Y+16	; 0x10
    4c8a:	5f 84       	ldd	r5, Y+15	; 0x0f
    4c8c:	6e 84       	ldd	r6, Y+14	; 0x0e
    4c8e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4c90:	8c 84       	ldd	r8, Y+12	; 0x0c
    4c92:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c94:	aa 84       	ldd	r10, Y+10	; 0x0a
    4c96:	b9 84       	ldd	r11, Y+9	; 0x09
    4c98:	c8 84       	ldd	r12, Y+8	; 0x08
    4c9a:	df 80       	ldd	r13, Y+7	; 0x07
    4c9c:	ee 80       	ldd	r14, Y+6	; 0x06
    4c9e:	fd 80       	ldd	r15, Y+5	; 0x05
    4ca0:	0c 81       	ldd	r16, Y+4	; 0x04
    4ca2:	1b 81       	ldd	r17, Y+3	; 0x03
    4ca4:	aa 81       	ldd	r26, Y+2	; 0x02
    4ca6:	b9 81       	ldd	r27, Y+1	; 0x01
    4ca8:	ce 0f       	add	r28, r30
    4caa:	d1 1d       	adc	r29, r1
    4cac:	0f b6       	in	r0, 0x3f	; 63
    4cae:	f8 94       	cli
    4cb0:	de bf       	out	0x3e, r29	; 62
    4cb2:	0f be       	out	0x3f, r0	; 63
    4cb4:	cd bf       	out	0x3d, r28	; 61
    4cb6:	ed 01       	movw	r28, r26
    4cb8:	08 95       	ret

00004cba <_exit>:
    4cba:	f8 94       	cli

00004cbc <__stop_program>:
    4cbc:	ff cf       	rjmp	.-2      	; 0x4cbc <__stop_program>
